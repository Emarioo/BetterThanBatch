#import "Array"
#import "String"
// #import "OS"
#import "Threads"
#import "Basic"
// #import "Logger"

// directory iterator
// threads
// whitelist file formats
// blacklist directories
// time measurements

// TODO: Command line argsg
// TODO: Have a look at the allocations. Define LOG_ALLOCATIONS in NativeLayer (can be done through Config.h).
//   I am seeing Reallocate 10 -> 10 which is really dumb. There is a bug somewhere.

// args = CmdLineArgs();
// log("arglen:",args.len);
// for *args {
//     log("Arg",nr,":", it);
// }

// #macro LN log(#line)
#macro LN #endmacro

struct Options {
    fn cleanup() {
        ARRAY_CLEANUP(whitelistedDirectories)
        ARRAY_CLEANUP(whitelistedFormats)
        ARRAY_CLEANUP(blacklistedDirectories)
    }
    threadAmount: u32 = 5;
    rootPath: char[];
    whitelistedDirectories: DynamicArray<StringBuilder>;
    whitelistedFormats: DynamicArray<StringBuilder>;
    blacklistedDirectories: DynamicArray<StringBuilder>;
    // blacklistedPaths? sometimes you may want to blacklist names in file names
    // whitelistedFormats can be used to allow specific files
}
options: Options;
defer { options.cleanup(); }
options.rootPath = ".";
options.whitelistedDirectories.add(StringBuilder{}).append("src");
options.whitelistedDirectories.add(StringBuilder{}).append("include");

options.blacklistedDirectories.add(StringBuilder{}).append("git");
// options.blacklistedDirectories.add(StringBuilder{}).append("bin");
options.blacklistedDirectories.add(StringBuilder{}).append(".vs");

// options.whitelistedFormats.add(StringBuilder{}).append("/out");
options.whitelistedFormats.add(StringBuilder{}).append(".cpp");
options.whitelistedFormats.add(StringBuilder{}).append(".h");

// if args specify formats then don't add default ones.

CalculateFiles(&options);

// fn PrintHelp() {
//     log("Help:");
//     log(" -help : Show help information.");
//     log(" -threads : Argument after -threads specifies the amount of threads to use.");
//     log(" -root");
//     log(" -debug : Spits out information. It is recommended to pipe stdout into a file.");
// }

fn CalculateFiles(options: Options*) {
    // TODO: Check that whitelistedFormats begins with a dot. "cpp" isn't allowed, ".cpp" is.
    // TODO: Warn that there are no whitelisted formats so no files will be checked.
    // TODO: Notify that no whitelisted directories will allow all directories in root path that aren't blacklisted

    iterator := DirectoryIteratorCreate(&options.rootPath);
    defer { DirectoryIteratorDestroy(iterator); }
    if !iterator {
        // error message
        return
    }
    LN
    files: DynamicArray<StringBuilder>;

    result: DirectoryIteratorData*;
    // iterator.result works too
    while result = iterator.next() {
        // TODO: blacklist, whitelist
        LN
        if result.isDirectory {
            LN
            blacklisted := false;
            for @ptr options.blacklistedDirectories.sliced_unsafe() {
                // LN
                // log(it.sliced())
                if findString(result.name,it.sliced()) {
                    blacklisted = true;
                    break;
                }
                // log("haaha",it.sliced())
            }
            LN
            if blacklisted {
                iterator.skip();
                continue;   
            }
            whitelisted := options.whitelistedDirectories.len == 0;
            for @ptr options.whitelistedDirectories.sliced_unsafe() {
                // log("check",result.name,it.sliced())
                if findString(result.name,it.sliced()) {
                    // log(" yes");
                    whitelisted = true;
                    break;
                }
            }
            if !whitelisted
                iterator.skip();
            continue;
        }
        LN
        whitelisted := false
        // log(result.name)
        for @ptr options.whitelistedFormats.sliced_unsafe() {
            if matchEnd(result.name,it.sliced()) {
                whitelisted = true;
                break;
            }
        }
        if !whitelisted  continue;

        // Optimize by using a bucket array of linear allocators for the file names.
        // Currently, each file name is allocated separately which isn't ideal.
        files.add(StringBuilder{}).append(result.name);
    }
    LN
    // for @ptr files.sliced() {
    //     log(it.sliced())
    // }

    // A note about the design. ThreadInfo should be kept here or inside MasterInfo
    // because you may want to know how each thread performed. If ThreadInfo is created
    // in the thread function then that individual informtion is lost.

    masterInfo: MasterInfo;
    masterInfo.files = files;
    defer masterInfo.cleanup();

    masterInfo.threadInfos.resize(options.threadAmount);
    memzero(masterInfo.threadInfos.ptr, masterInfo.threadInfos.max * sizeof ThreadInfo);
    
    tp := StartMeasure();

    // TODO: Write a non-threaded versions with #ifdef when using the interpreter.

    // IMPORTANT: DO NOT REALLOCATE THREAD INFOS! THE POINTERS TO THE INFOS IS PASSED
    //  TO THE THREADS SO REALLOCATING WOULD INVALIDATE THE POINTER.
    for @ptr masterInfo.threadInfos.sliced_unsafe() {
        it.masterInfo = &masterInfo;
        it.thread = ThreadCreate(CalculateLines, it);
    }

    for @ptr masterInfo.threadInfos.sliced_unsafe() {
        if !it.thread.os_handle // may happen if the thread couldn't be created for some reason
            continue;
        ThreadJoin(it.thread);
        ThreadDestroy(it.thread);
    }

    time := StopMeasure(tp);

    log("Lines:",(masterInfo.data.lines-masterInfo.data.blankLines), "(including blanks:",masterInfo.data.lines,")");
    log("Bytes:",masterInfo.data.readCharacters);
    log("Time:",time*1000,"ms");
}
struct CalcData {
    lines: u32;
    blankLines: u32;
    commentLines: u32;
    readCharacters: u64;

    // thread safe
    fn combine(data: CalcData*) {
        // #macro REC(X,...) X += data.X; REC(...)
        #macro REC(X,...) atomic_add(cast<void*>&X, data.X); REC(...)
        REC(lines, blankLines, commentLines, readCharacters);
        #undef REC
    }
}
struct ThreadInfo {
    thread: Thread;
    path: char[]; // current path
    data: CalcData;
    masterInfo: MasterInfo*;
}
struct MasterInfo {
    files: DynamicArray<StringBuilder>;
    usedFiles: u32 = 0;
    data: CalcData;

    threadInfos: DynamicArray<ThreadInfo>;
    
    // thread safe    
    fn nextFile() -> char[] {
        if usedFiles == files.len
            return Slice<char>{null,0};
        while true {
            oldVal := usedFiles;
            if !compare_swap(cast<void*>&usedFiles, oldVal, oldVal + 1) {
                // log("Retry")
                continue;
            }

            return files.get_unsafe(oldVal).sliced();
        }
        // won't ever run
        return Slice<char>{null,0};
    }

    fn cleanup() {
        ARRAY_CLEANUP(files)
        threadInfos.cleanup();
    }
}
fn @stdcall CalculateLines(_info: void*) -> u32 {
    info: ThreadInfo* = _info;
    Assert(info.masterInfo)
    
    bufferSize := 0u;
    buffer: char* = null;
    defer Free(buffer, bufferSize);

    #macro DEFAULT_BUFFER_SIZE 0x100000

    while true {
        info.path = info.masterInfo.nextFile();
        if !info.path.ptr // no more files
            break;

        fileSize: u64 = 0;
        file := FileOpen(&info.path, FILE_READ_ONLY, outFileSize = &fileSize);
        defer FileClose(file);

        if !file
            continue;   
        if fileSize == 0u {
            info.data.lines += 1;
            continue;
        }

        if bufferSize < fileSize {
            if buffer {
                // bufferSize = DEFAULT_BUFFER_SIZE;
                if bufferSize*2u < fileSize {
                    buffer = Reallocate(fileSize, buffer, bufferSize);
                } else {
                    buffer = Reallocate(bufferSize*2u, buffer, bufferSize);
                    bufferSize = bufferSize * 2u;
                }
            } else {
                bufferSize = DEFAULT_BUFFER_SIZE;
                buffer = Allocate(DEFAULT_BUFFER_SIZE);
            }
        }

        readBytes := FileRead(file, buffer, fileSize);

        // blanks, line feeds with only whitespace characters between.
        // \r, space, tab
        // comments

        // TODO: assert if readBytes
        blanks := 0u;
        lines := 1u; // files always have one line
        index := 0u
        solelyWhitespace := true;
        while index < readBytes {
            chr := buffer[index];
            if chr == '\n' {
                lines++;
                if solelyWhitespace
                    blanks++;
                solelyWhitespace = true;
            } else if chr != ' ' && chr != '\t' && chr != '\r' {
                solelyWhitespace = false;
            }
            index++;
        }
        if solelyWhitespace
            blanks++;

        info.data.lines += lines;
        info.data.blankLines += blanks;
        info.data.readCharacters += fileSize;
    }
    // NativeSleep(0.1);
    // log(info.data.lines)
    info.masterInfo.data.combine(&info.data);
    return 0;
}