/*
    Line counter is used to count lines of files.
    It supports pattern matching, recursive traversal through directories
    and include, exclude of file extensions.
        
    The program takes in arguments and does calculations and gives you information, statistics in different forms.
    
    Examples:
        Let exe = linecounter
        
        exe main.btb - Line count for this file
        exe -i btb - Count lines for all filepaths that contain btb
        exe -e bin okay - Count lines for all files in current folder (recursively) except for bin and okay
        
    
    Features:
    - 
    


*/
#import "Array"
#import "String"
// #import "OS"
#import "File"
#import "Threads"
#import "Logger"

// directory iterator
// threads
// whitelist file formats
// blacklist directories
// time measurements

// TODO: Command line argsg
// TODO: Have a look at the allocations. Define LOG_ALLOCATIONS in NativeLayer (can be done through Config.h).
//   I am seeing Reallocate 10 -> 10 which is really dumb. There is a bug somewhere.

// args = CmdLineArgs();
// log("arglen:",args.len);
// for *args {
//     log("Arg",nr,":", it);
// }

struct Options {
    threadAmount: i32 = 1;
    
    rootPath: char[];
    files: Array<StringBuilder>; // individual files to check
    include_patterns: Array<StringBuilder>;
    exclude_patterns: Array<StringBuilder>;
    
    verbose: bool;
    quick: bool;
}
fn print_version() {
    log("0.1.0/revamp-2024-10-10")
}
fn print_help() {
    log("Help information")
    log(" -f,--file    : Include files in search.")
    log(" -x,--exclude : Exclude patterns from search.")
    log(" -i,--include : Include patterns in search.")
    log(" -r,--root    : Set root directory to perform search.")
    log(" -q,--quick   : Fast counting with less information.")
    log(" -v,--verbose : Extra information")
    log(" -b,--base    : Set default includes, excludes")
    // log(" -t,--threads : Set thread count.")
}
fn main(argc: i32, argv: char**) -> i32 {
    
    if argc <= 1 {
        log("Line counter program by Emarioo.")
        log("Developed using BetterThanBatch.")
        std_print("Version: ") print_version()
        return 0
    }
    
    options: Options
    options.rootPath = "."
    enum Mode {
        MODE_FILE,
        MODE_INCLUDE,
        MODE_EXCLUDE,
    }
    mode: Mode = MODE_FILE
    for 1..argc {
        arg := Slice<char>{argv[nr], strlen(argv[nr])}
        if arg == "--help" {
            print_help()
        } else if arg == "-f" || arg == "--file" {
            mode = MODE_FILE
        } else if arg == "-x" || arg == "--exclude" {
            mode = MODE_EXCLUDE
        } else if arg == "-i" || arg == "--include" {
            mode = MODE_INCLUDE
        } else if arg == "-r" || arg == "--root" {
            if nr+1 >= argc {
                log("Expected a path after '",arg,"'.")
                return 1
            }
            nr++
            arg = Slice<char>{argv[nr], strlen(argv[nr])}
            options.rootPath = arg
        } else if arg == "-q" || arg == "--quick" {
            options.quick = true
        } else if arg == "-v" || arg == "--verbose" {
            options.verbose = true
        } else if arg[0] == '-' {
            log("Unknown argument '",arg,"', see --help.")
            return 1
        } else {
            tmp: StringBuilder
            tmp.append(arg)
            switch mode {
                case MODE_FILE:    options.files.add(tmp)
                case MODE_INCLUDE: options.include_patterns.add(tmp)
                case MODE_EXCLUDE: options.exclude_patterns.add(tmp)
            }
        }
    }
    
    log(&options)

    
    options.verbose = true
    tmp: StringBuilder
    
    #macro INCLUDE(S) tmp = {} tmp.append(S) options.include_patterns.add(tmp)
    #macro EXCLUDE(S) tmp = {} tmp.append(S) options.exclude_patterns.add(tmp)
    INCLUDE(".cpp")
    INCLUDE(".h")
    // INCLUDE(".btb")
    
    EXCLUDE("fuzzer_gen")
    EXCLUDE("libs")
    EXCLUDE("git")
    EXCLUDE("bin")
    EXCLUDE(".vs")
    
    CalculateFiles(&options);
    
    return 0
}

fn CalculateFiles(options: Options*) {
    // TODO: Print options
    
    log("Options:")
    log(" Root: ", options.rootPath)
    log(" Threads: ", options.threadAmount)
    std_print(" Includes: ")
    for options.include_patterns {
        if nr != 0
            std_print(", ")
        std_print(*it)
    }
    log()
    std_print(" Excludes: ")
    for options.exclude_patterns {
        if nr != 0
            std_print(", ")
        std_print(*it)
    }
    log()
    
    
    masterInfo: MasterInfo;
    defer masterInfo.cleanup();
    
    // Find and match files
    total_bytes := 0
    time_start_find_files := StartMeasure()
    for 0..options.files.size() {
        fil := options.files.get_unsafe(nr)
        info := masterInfo.files.add(FileInfo{})
        info.name.append(fil)
        
        total_bytes += FileSize(fil.sliced())
    }
    if options.exclude_patterns.size() > 0 || options.include_patterns.size() > 0 {
        iterator := DirectoryIteratorCreate(options.rootPath);
        defer { DirectoryIteratorDestroy(iterator); }
        if !iterator {
            log("Could not create iterator")
            // error message
            return;
        }
        result: DirIteratorItem*;
        while DirectoryIteratorNext(iterator, &result) {
            // log(result.name)
            if result.is_directory {
                excluded := false;
                for @ptr options.exclude_patterns.sliced_unsafe() {
                    // log(it.sliced())
                    if find(it.sliced(),result.name) != -1 {
                        excluded = true;
                        break;
                    }
                    // log("haaha",it.sliced())
                }
                if excluded {
                    DirectoryIteratorSkip(iterator)
                    continue;   
                }
                continue;
            }
            included := false
            for @ptr options.include_patterns.sliced_unsafe() {
                // log("check ", result.name, " ",it.sliced())
                if find(it.sliced(),result.name) != -1 {
                    included = true;
                    break;
                }
            }
            if !included
                continue;
            // Optimize by using a bucket array of linear allocators for the file names.
            // Currently, each file name is allocated separately which isn't ideal.
            info := masterInfo.files.add(FileInfo{})
            info.name.append(result.name)
            total_bytes += result.file_size
        }
    }
    
    time_find_files := StopMeasure(time_start_find_files)
    
    log("Found ",masterInfo.files.size(), " (",total_bytes/1000.0," KB) in ", time_find_files*1000.0, " ms")
    // if options.verbose {
    //     for masterInfo.files {
    //         log(it)
    //     }
    // }

    // A note about the design. ThreadInfo should be kept here or inside MasterInfo
    // because you may want to know how each thread performed. If ThreadInfo is created
    // in the thread function then that individual informtion is lost.


    masterInfo.threadInfos.resize(options.threadAmount);
    memzero(masterInfo.threadInfos.ptr, masterInfo.threadInfos.max * sizeof ThreadInfo);
    
    tp := StartMeasure();

    // TODO: Write a non-threaded versions with #ifdef when using the interpreter.

    // IMPORTANT: DO NOT REALLOCATE THREAD INFOS! THE POINTERS TO THE INFOS IS PASSED
    //  TO THE THREADS SO REALLOCATING WOULD INVALIDATE THE POINTER.
    for @ptr masterInfo.threadInfos.sliced_unsafe() {
        it.masterInfo = &masterInfo;
        it.thread = ThreadCreate(CalculateLines, it);
    }

    for @ptr masterInfo.threadInfos.sliced_unsafe() {
        if !it.thread.valid() // may happen if the thread couldn't be created for some reason
            continue;
        it.thread.join();
    }

    time := StopMeasure(tp);
    
    log("Summary:")

    if options.verbose {
        log("Files:")
        for masterInfo.files {
            log(" ",it)
        }   
    }

    log("Lines: ",(masterInfo.data.lines-masterInfo.data.blankLines), " (",masterInfo.data.lines," with empty lines)");
    log("Bytes: ",masterInfo.data.readCharacters);
    log("Time: ",time*1000,"ms");
}
struct CalcData {
    lines: i32;
    blankLines: i32;
    commentLines: i32;
    readCharacters: i32;

    // thread safe
    fn combine(data: CalcData*) {
        // #macro REC(X,...) X += data.X; REC(...)
        #macro REC(X,...) atomic_add(cast<void*>&X, data.X); REC(...)
        REC(lines, blankLines, commentLines, readCharacters);
    }
}
struct FileInfo {
    name: StringBuilder;
    stats: CalcData;
}
struct ThreadInfo {
    thread: Thread;
    path: char[]; // current path
    data: CalcData;
    masterInfo: MasterInfo*;
}
struct MasterInfo {
    files: Array<FileInfo>;
    usedFiles: i32 = 0;
    data: CalcData;

    threadInfos: Array<ThreadInfo>;
    
    // thread safe    
    fn nextFile() -> char[] {
        while true {
            if usedFiles >= files.len
                return Slice<char>{null,0};
            oldVal := usedFiles;
            // log("looping")
            res := atomic_compare_swap(cast<void*>&usedFiles, oldVal, oldVal + 1)
            if res != oldVal {
                // log("Retry ", usedFiles," " ,oldVal," ", res)
                continue;
            }
            if oldVal >= files.len
                return Slice<char>{null,0};
            // log("success")

            fil := files.get_unsafe(oldVal)
            return fil.name.sliced();
        }
        // won't ever run
        return Slice<char>{null,0};
    }

    fn cleanup() {
        files.cleanup()
        threadInfos.cleanup();
    }
}
fn @oscall CalculateLines(_info: void*) -> i32 {
    info: ThreadInfo* = _info;
    Assert(info.masterInfo)
    
    bufferSize := 0;
    buffer: char* = null;
    defer Free(buffer, bufferSize);

    #macro DEFAULT_BUFFER_SIZE 0x100000

    while true {
        info.path = info.masterInfo.nextFile();
        if !info.path.ptr // no more files
            break;

        fileSize: i64 = 0;
        file := FileOpen(info.path, FILE_READ_ONLY, outFileSize = &fileSize);
        defer FileClose(file);

        if !file
            continue;   
        if fileSize == 0u {
            info.data.lines += 1;
            continue;
        }

        if bufferSize < fileSize {
            if buffer {
                // bufferSize = DEFAULT_BUFFER_SIZE;
                if bufferSize*2 < fileSize {
                    buffer = Reallocate(fileSize, buffer, bufferSize);
                } else {
                    buffer = Reallocate(bufferSize*2, buffer, bufferSize);
                    bufferSize = bufferSize * 2;
                }
            } else {
                bufferSize = DEFAULT_BUFFER_SIZE;
                buffer = Allocate(DEFAULT_BUFFER_SIZE);
            }
        }

        readBytes := FileRead(file, buffer, fileSize);

        // blanks, line feeds with only whitespace characters between.
        // \r, space, tab
        // comments

        // TODO: assert if readBytes
        blanks := 0;
        lines := 1; // files always have one line
        index := 0
        solelyWhitespace := true;
        while index < readBytes {
            chr := buffer[index];
            if chr == '\n' {
                lines++;
                if solelyWhitespace
                    blanks++;
                solelyWhitespace = true;
            } else if chr != ' ' && chr != '\t' && chr != '\r' {
                solelyWhitespace = false;
            }
            index++;
        }
        if solelyWhitespace
            blanks++;

        info.data.lines += lines;
        info.data.blankLines += blanks;
        info.data.readCharacters += fileSize;
    }
    // NativeSleep(0.1);
    // log(info.data.lines)
    info.masterInfo.data.combine(&info.data);
    return 0;
} 

/*

Old line counter did this:
linecounter -w *.cpp *.h *.btb -b .git .vs bin libs fuzzer_gen
    
Settings
 Root:
 Threads: 4
 BufferSize: 256.00 KB
 Whitelists: *.cpp *.h *.btb
 Blacklists: .git .vs bin libs fuzzer_gen
Found 266 files (3.33 MB) in 3.52 ms
Calculating lines...
Summary:
 92158 lines, 346 lines per file
 81231 (88.14%) effective lines
 2.33 M non-space characters
 1.07 M space characters
 3.33 MB processed bytes
 345.52 KB in biggest file
 24.72 ms in pure process time (threads' combined time)
 17.56 ms overall process time
Memory
 Total allocated bytes: 1.00 MB, total allocations: 6
Program finished in 31.18 ms
*/