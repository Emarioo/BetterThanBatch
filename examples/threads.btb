// #import "OS"

// #import "Logger"

// fn @native prints(n: char[]);
// fn @native printc(n: char);

// #define log(X, ...) _print(X); _print(' '); log(...)
// #define log(X) _print(X); _print('\n')

// fn @stdcall hey(ptr: void*) -> u32 {
//     prints("Hello: ");
//     // _print(cast<i64>ptr);
//     printc(cast<char>cast<u64>ptr);
//     printc('\n')
//     return 0;
// }
// prints("Woah\n")

// thread = ThreadCreate(hey, cast<void*>cast<u64>65)
// ThreadJoin(thread)
// ThreadDestroy(thread)

global var: i32 = 5
fn add() {
    // printc('0' + var)
    var++;
}
add();

// using i32 as int

fn add() -> int {
    return 3
}

using void as int

add()