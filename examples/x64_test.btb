// #import "OS"
// #import "./factorial"

#import "Logger"

// fn @native printc(n: char);
// fn @native printi(n: i64);
// fn @native prints(n: char[]);


// println(23.32)
// println(-0.0932)
// println(2.9242)

// n: f32 = 0.0625;
// // n: f32 = 2.92;
// n: f32 = 0.039125;
// // n: f32 = 25.39125;
// bits: u32 = *cast<u32*>cast<void*>&n;

// sign = (bits >> 31) & 1;
// exp = (bits >> 23) & 0xFF
// mantissa = bits & 0x7FFFFF

// // // // println(bits>>23)
// // // // printBits(bits)
// // // // for 0..24 {
// // // //     printBits(bits >> nr);
// // // // }
// // printBits(bits)
// // printBits(sign)
// // printBits(exp)
// // printBits(mantissa)

// mul: u64 = 1
// acc: u64 = 1

// precision = 17
// for i: 0..precision {
//     mul *= 5
//     acc *= 10
//     if mantissa & (1 << (22 - i)) {
//         // print("+ ")
//         acc += mul
//     }
//     // println(22 - i," ", acc," ",mul, " ", 1 << (22 - i));
// }

// println(((exp+1) & 0x7F))
// println(127 - exp)

// if exp < 128
//     acc = acc >> (127 - exp);
// else
//     acc = acc << ((exp+1) & 0x7F);

// println(acc);

// arr: char[50];
// index = 50;
// rounds = precision
// while acc != 0 || rounds > 0 {
//     rounds--;
//     digit = 0;
//     if acc != 0 {
//         digit = acc % 10;
//         acc = acc / 10;
//     }
//     if(index == arr.len && digit == 0) {
//         precision--
//         continue
//     }
//     // println(digit)
//     arr.ptr[--index] = '0' + digit;
//     // println("b ",index);
//     if index == 50 - precision {
//         arr.ptr[--index] = '.';
//         // println("a ",index);
//     }
// }
// if arr.ptr[index] == '.'
//     arr.ptr[--index] = '0';
// if sign 
//     arr.ptr[--index] = '-';

// arr.ptr += index;
// arr.len -= index;

// println(arr)

// fn printBits(bits: u64) {
//     for @reverse 0..32 {
//         if bits & (cast<u64>1 << nr) {
//             print('1')
//         } else 
//             print('0')
//     }
//     print('\n')
// }

// // #link "uuid.lib" // not necessary for some reason
// #link "bin/NativeLayer.lib"

// fn @dllimport GetStdHandle(num: u32) -> void*;
// fn @dllimport WriteFile(file: void*, buffer: void*, bytes: u32, 
//     writtenBytes: u32*, overlapped: void*) -> bool;
// fn @dllimport GetLastError() -> u32;

// fn @import printme() -> u32;

// _print(printme())

// str = " from NativeLayer.cpp!\n";
// WriteFile(GetStdHandle(-11), str.ptr, str.len, null, null)

//-- external/native functions
// fn @native prints(n: char[]);
// prints("HELL YES!\n")
// fn @dllimport GetStdHandle(id: u32);
// GetStdHandle(-11);

//-- global data
// a = "K";
// *a.ptr

//-- intrinsics?
// fn @native memzero(dst: void*, len: u64);
// fn @native memcpy(dst: void*, src: void*, len: u64);

// a: i32[3];
// b: i32[3];

// a.ptr[2] = 9;
// memzero(a.ptr, a.len * sizeof i32);
// final = a.ptr[2]; // should be zero

// a.ptr[2] = 9;
// memcpy(b.ptr, a.ptr, a.len * sizeof i32);
// final += b.ptr[2] // 9 should have been copied
// final // leave value in eax as error code

//-- loops
// a = 0
// for 0..5 {
//     a += nr;
// }
// a

//-- recursion
// #import "./factorial"
// factorial(4)

//-- deep functions
// fn b() -> i32 {
//     return 2
// }
// b() * 3
// fn a(n: i32) -> i32 {
//     return b() * n
// }
// fn c(n: i32) -> i32 {
//     a(2)
//     // 3 * n
//     return a(2) * n
// }
// c(9)

// b()

// b()

//-- function test
// fn fun(a: i32) -> i32 { return a + 5; }
// fun(92)

//-- local variable test
// a = 9
// b = 23
// a + b