// #import "OS"
// #import "./factorial"
// #import "Logger"
// #ifndef X64
// fn @native printi(n: i64);
// fn @native printc(n: char);
fn @native prints(n: char[]);
// #endif

// fn @native memzero(dst: void*, len: u64);
// fn @native memcpy(dst: void*, src: void*, len: u64);


// _print(13352)

// t: u64 = 1395

// str: char[20];
// used: u64 = 19;
// while t > 0 && used > 0 {
//     num = t % 10;
//     str.ptr[used] = num + '0';
//     used--;
    
//     t = t / 10;
// }
// str.ptr += used;
// str.len -= used;
// prints(str);
prints("I CAN PRINT!\n");

// str: char[20];
// used = 19;
// while t > 0 && used > 0 {
//     num = t % 10;
//     str.ptr[used] = cast<char>(num + '0');
//     used--;
    
//     t = t / 10;
// }
// str.ptr += used;
// str.len -= used;
// prints(str);


//-- Native/external functions
// fn @native prints(n: char[]);
// prints("HELL YES!\n")

//-- global data
// a = "K";
// *a.ptr

//-- intrinsics?
// fn @native memzero(dst: void*, len: u64);
// fn @native memcpy(dst: void*, src: void*, len: u64);

// a: i32[3];
// b: i32[3];

// a.ptr[2] = 9;
// memzero(a.ptr, a.len * sizeof i32);
// final = a.ptr[2]; // should be zero

// a.ptr[2] = 9;
// memcpy(b.ptr, a.ptr, a.len * sizeof i32);
// final += b.ptr[2] // 9 should have been copied
// final // leave value in eax as error code

//-- loops
// a = 0
// for 0..5 {
//     a += nr;
// }
// a

//-- recursion
// #import "./factorial"
// factorial(4)

//-- deep functions
// fn b() -> i32 {
//     return 2
// }
// b() * 3
// fn a(n: i32) -> i32 {
//     return b() * n
// }
// fn c(n: i32) -> i32 {
//     a(2)
//     // 3 * n
//     return a(2) * n
// }
// c(9)

// b()

// b()

//-- function test
// fn fun(a: i32) -> i32 { return a + 5; }
// fun(92)

//-- local variable test
// a = 9
// b = 23
// a + b