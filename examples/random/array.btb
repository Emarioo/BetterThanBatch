
// arr: i32[] { 1, 2, 3, 4 }
// arr: i32, arr: i32[] { 1, 2, 3, 4 }

// for arr {
//     log(it)
// }


// /*
//     What syntax for arrays?
// */
// a = [1,2,3,4]
// a: i32[] = [cast<u64>1,2,3,4] // all elements must have the same type as the first element

// /*
//     The above is bad because all elements would be pushed to the stack and then popped
//     and put into some allocated space in the frame. That push and pop is slow and unnecessary.
//     The generator would generate push and pop when using expressions anyway but instead of pushing
//     all values and then popping all of them you would push first element then pop it at mov it
//     the location in the array and keep doing this for all elements. With that, the generator
//     can optimize away push and pop if they are close together.
//     If you aren't worried about speed right now then that would be neat syntax.
//     Perhaps you could do optimisation if you see a: i32[] = [1,23,12,4,1]

//     Another option is the below. Simular to C++.
// */      

// a: i32[] {1,2,3,4}
// a, b: i32[] {1,2,3} // b gets initialized with the values while a is zero initialized

// You could be spicy and allow this
// first: i32, second: i32, arr: i32[] { 1, 2, 3, 4 }
// first = 1
// second = 2
// arr = { 3, 4 }



// /*

// */


// b = i32[]{1,3,5}

// b[..] = [1,2,3,4,6]

// a: i32[] = {
//     1,2,3,4
// }

// you could use a macro like this for array initializers
// no point now when it's supported in the language
// #define ARR_INIT(name, type, ...) name: type; { _i=0; ARR_INIT_ELEMS(name, ...) }
// #define ARR_INIT_ELEMS(name, X, ...) name.ptr[_i++] = X; ARR_INIT_ELEMS(name, ...)
// #define ARR_INIT_ELEMS(name)
// ARR_INIT(vertices, f32[9],
//     -0.5, a/400.0 - 0.8, 0.0,
//     0.5, -0.5, 0.0,
//     0.0, 0.5, 0.0
// )