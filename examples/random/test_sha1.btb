#import "Array"
#import "Math"
#import "Logger"
#import "String"

content: DynamicArray<Slice<char>>
result: DynamicArray<Slice<char>>

#macro ADD(X,Y) content.add(X) result.add(Y)

// ####################
//   ADD TESTS HERE
// ####################

ADD("The quick brown fox jumps over the lazy dog",
    "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12")
ADD("The quick brown fox jumps over the lazy cog",
    "de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3")
ADD("",
    "da39a3ee5e6b4b0d3255bfef95601890afd80709")
ADD("abc",
    "a9993e364706816aba3e25717850c26c9cd0d89d")

// ##############
//   RUN TESTS
// ##############

failures := 0
total := 0

for content.sliced_unsafe() {
    digest: u8[20]
    hash_sha1(it, &digest)

    res := result.get_unsafe(nr)
    expected_digest: u8[20]
    parse_hex(*res, &expected_digest)

    failed := false
    for 0..digest.len {
        if digest.ptr[nr] != expected_digest.ptr[nr] {
            failed = true
            break
        }
    }
    total++
    if failed {
        failures++

        log("Test ",nr," failed")
        std_prints(" Expected: ") std_print_hex(expected_digest.ptr, expected_digest.len) log()
        std_prints("   Result: ") std_print_hex(digest.ptr, digest.len) log()
    }
}

if failures == 0 {
    log("SHA-1 success ",(total-failures),"/",total)
} else {
    log("SHA-1 failure ",(total-failures),"/",total)
}