/*
    This is an example of of threads can be used in the language.

*/

#import "OS"
#import "Logger"
#macro THREAD_SAFE #endmacro

final: u32 = 0

thread := ThreadCreate(compute, &final)
// compute(&final)

ThreadJoin(thread)
ThreadDestroy(thread)

log(final)
// threads require stdcall with the passed function
fn @stdcall compute(num: u32*) -> u32 {
    retries := 0
    for 0..100_000 {
        #if THREAD_SAFE
        lastNum := *num;
        res := atomic_compare_swap(cast<void*>num, lastNum, lastNum + 1)
        if res != lastNum {
            it--
            retries++
        }
        #else
        (*num)++;
        #endif
    }
    #if THREAD_SAFE
    log("Retries:", retries);
    #endif
    return 0;
}
