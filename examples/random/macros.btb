@macro-benchmark
// #import "./macros"
// #import "OS"
// #import "./macro-bench"
// #import "./overloading"


// @macro-benchmark

// #macro ADD(X,...) X + ADD(...)
// #macro ADD(X) X

// // ADD(1,2,3)
// // ADD(#unwrap 1,2,3)

// // #macro ADD(X,...) X+ADD(...)
// // #macro ADD(X) X 

// // ADD(#unwrap 1 ,2 ,3 )
// // ADD(#unwrap 1 ,2 ,3 )

#macro OUT
-ADD(1,2,3)-
- ADD(1,2,3)-
-ADD(1,2,3) -
-ADD( 1,2,3)
NEWLINE
#endmacro
// #macro YEET ME  #endmacro

// YEET +

// OUT

// OUT

// #macro LIST Apple, Book, Chicken
// #macro ADDS(X,...) X + ADDS(...)
// #macro ADDS(X) X
// ADDS(#unwrap LIST)

// X + ADDS(...)

// #macro Sup() #endmacro

// #macro rec(X,...) X + rec(...)
// #macro rec(X) X
// rec(1,2,3)

// #macro inf(A,...) ...

// inf(a,j,w)


// #macro for(x,y,z) x; while y { defer z;
// // A flaw in the parser
// for(i=0,i< 5,i++)
//     printi(i);
// }

// #macro Cool(X,Y) (X) (Y)
// #macro Cool(X) (X------X)
// #macro HELLO(X,Y) A Cool(X) B Cool(Y,91) C
// HELLO(HA0 Ha1,OA)
// #macro cool(X) X -- X
// #macro HELLO(X) cool(X)
// #macro cool AD  AD 
// #macro HELLO cool

// HELLO

// // I like pizza A M

// LOG(1,2,3,4,5,6,7)


// #macro MACRO(PARAM) MACRO(MACRO(PARAM + PARAM,2), PARAM) PARAM

// <macro-define> = <name> <parameters> <content>
// <macro-usage> = <name> <arguments>
// <arguments> = <content> (arguments)*
// <content> = ( <token> | <macro-usage> | <parameter> ) *


// initialStream
// outputStream // temp stream

// MACRO(1,3)


// macroName = ...
// arguments: Array<TokenRange>;
// FetchRangedArguments(initialStream,&arguments)
// certainMacro = Fetch_macro_by_arg_count(macroName, arguments.size())
// content: TokenRange = certainMacro.content;
// while token: content {

//     argRange: TokenRange;
//     if IsMacro(token) {
//         arguments: Array<TokenRange>;
//         FetchRangedArguments(content.iterator?,&arguments)
//         certainMacro = Fetch_macro_by_arg_count(macroName, arguments.size())
//         content: TokenRange = certainMacro.content;

//         go through new contents
//     } else if argRange = IsParameter(token) {
        
//         go through argument content matching stuff
//     } else {
//         outputStream.add(token);
//     }
// }


// preprocess outputStream into final stream (outTokens)