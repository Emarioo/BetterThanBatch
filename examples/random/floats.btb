#import "Logger"
// #import "Math"

// // #import "OS"

// std_print(0.01)

// fn @native printi(n : i64);
// fn @native printc(n : char);
// fn @native prints(n : char[]);

// t = 9000.0

// arr: char[30];

// // printi(arr.len);

// bits: u32 = *cast<u32*>cast<void*>&t;

// sign = (bits >> 31) & 1;
// exp = (bits >> 23) & 0xFF
// mantissa = bits & 0x7FFFFF

// mul: u64 = 1;
// acc: u64 = 1;
// precision = 17;
// if exp >= 128
//     precision -= ((exp+1) & 0x7F)>>2
// for i: 0..precision {
//     mul *= 5;
//     acc *= 10;
//     if mantissa & (1 << (22 - i)) {
//         acc += mul;
//     }
// }

// if exp < 128
//     acc = acc >> (127 - exp);
// else
//     acc = acc << ((exp+1) & 0x7F);

// arr: char[30];
// index = 30;
// rounds = precision
// while acc != 0 || rounds > 0 {
//     rounds--;
//     digit = 0;
//     if acc != 0 {
//         digit = acc % 10;
//         acc = acc / 10;
//     }

//     printi(index);
//     printc(' ');
//     printi(arr.len);
//     printc(' ');
//     printi(digit);
//     printc('\n');
//     if(index == arr.len && digit == 0 && rounds > 0) {
//         precision--;
//         continue
//     }
//     arr.ptr[--index] = '0' + digit;
//     if index == 30 - precision {
//         arr.ptr[--index] = '.';
//     }
// }
// if arr.ptr[index] == '.'
//     arr.ptr[--index] = '0';
// if sign 
//     arr.ptr[--index] = '-';

// arr.ptr += index;
// arr.len -= index;

// prints(arr)


fn @import NativeSleep(f: f32);

fn @intrinsic rdtscp() -> u64, u32;

// fn measure_rdtscp_overhead() -> u32 {
//     // overhead: u32;
//     // #macro TC 1000000
//     #macro TC 10
//     min: u32 = 0;
//     max: u32 = 99999999;
//     mid: u32 = 0;
//     total: u32;
//     for 0..TC {
//         a = rdtscp();
//         b = rdtscp();
//         overhead: u32 = b-a;
//         total += overhead;
//         // println(min, " ", overhead, " ", max);
//         // if overhead < max && overhead > min {
//         //     // println(min, " ", overhead, " ", max);
//         //     if mid == min {
//         //         mid = overhead
//         //         max = overhead
//         //     } else {
//         //         mid = overhead
//         //         min = overhead
//         //     }

//         // }
//     }
//     // println("avg ",total/TC);
//     // return mid;
//     return total/TC;
// }

// oh = measure_rdtscp_overhead();

// println("overhead ", oh)

a = rdtscp();
NativeSleep(1.0);
b = rdtscp();

tim = ((b-a))
// println("time ",tim);
// println(cast<f32>90.0)
// printd(cast<f32>2900000000)
// cast<f32>2900000000
// printd(cast<f32>(tim)/2900000);printc('\n');
// cast<f32>(tim)/2900000
// cast<f32>2900000000
println(cast<f32>(tim)/2900000)
