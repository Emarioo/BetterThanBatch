/*
    Some thought experiments
*/
// @disable all
// @enable parser
// @enable generator
// @enable interpreter

a : i32 = 82
p : i32* = &a
p : i32[] = {&a,1,length: 92}

p : i32[] = [1,9,2,5,7]

struct Array<T> {
    T* ptr
    int used
    int max
    
    @implicit constructor : (arr : T[]){
        reserve(arr.len)
        memcpy(ptr,arr.ptr,arr.len * T.size)
        used = arr.len
    }

    reserve : (size : int) -> bool {
        newPtr = realloc(ptr,size * T.size)
        if newPtr
            ptr = newPtr
        return newPtr != null
    }
}

#define OBJECTIFY(X,...) new X.type(X), OBJECTIFY(...)
#define OBJECTIFY(X)

OBJS(1,8,"hey","hoho")

new 1.type.constructor (1)

struct Obj { type: DataType; ptr: void*}
struct ObjList {
    Obj* objects
    int used
    int max
    
    push<T> : (item : T*) {
        *(objects+used) = { *alloc<T>().constructor(item) }
    }
    [] : (index : i32) -> *{
        returb (*(objects + index))
    }
}

ObjList list

hej = list[4]
if hej.type == i32 {
    
}

arr : Array = [1,8,5,5]

p.length
p.size
a.sizeb

start = &i32
end = 10
while start!=end {
    defer start++

    
}

ptr, length

b = *p

// a : f32 = 2.67
// b = a + 9.
// if 1 && 0 {
//     k = 9
// }



// a : i32 = 8 - 3.2 * ( 5 + 2 )
// b = (1-2)/9
// b = (1-a)/b