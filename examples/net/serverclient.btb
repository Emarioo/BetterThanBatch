/*
    Not finished!
*/

#import "Net"

#import "Threads"
#import "Logger"
#import "Lang"
#import "OS"

#macro DEFAULT_IP "127.0.0.1"
#macro DEFAULT_PORT 4000

global log_mutex: Mutex

fn TestClient(user: char*) {
    client: Client
    client.set_callback(handle_event, null)
    err := client.start(DEFAULT_IP,DEFAULT_PORT)
    // err := client.start("www.example.com",80)

    counter := 0
    while client.is_active() {
        msg: StringBuilder
        msg.append(" ")
        msg.append(user)
        msg.append(":")
        msg.append(" Hello ")
        msg.append(counter++)
        msg.append("\n")
        client.send(msg.sliced())

        ProcessSleep(1.0)
    }
    
    fn handle_event(e: Event, ud: void*) {
        log_mutex.lock()
        log("#CLIENT#")
        // std_print_any(&e) log()
        std_print(e.bytes)
        log_mutex.unlock()
    }

    client.wait()

    client.close()
}
fn TestServer() {
    server: Server
    server.set_callback(handle_event, null)
    err := server.start(DEFAULT_IP,DEFAULT_PORT)

    fn handle_event(e: Event, ud: void*) {
        // log_mutex.lock()
        // sem.wait()
        log("#SERVER#")
        // std_print_any(&e) log()
        std_print(e.bytes)
        // sem.signal()
        // log_mutex.unlock()
    }

    ThreadCreate(lamb, "Yikes".ptr)
    ThreadCreate(lamb, "noes".ptr)
    ThreadCreate(lamb, "Wine".ptr)
    // Lambda would be nice wouldn't it...
    fn @stdcall lamb(n: void*) -> i32 { TestClient(n) return 0 }


    server.wait()
    server.close()
}

fn main(argc: i32, argv: char**) -> i32 {
    TestServer()

    // TestHTTPRequest()
    return 0
}


fn TestHTTPRequest() {
    client: Client
    client.set_callback(handle_event, null)
    err := client.start("www.example.com",80)

    msg: StringBuilder
    msg.append("GET /index.html HTTP/1.1\r\n")
    msg.append("Host: www.example.com\r\n")
    msg.append("Connection: close\r\n\r\n")
    client.send(msg.sliced())
    
    fn handle_event(e: Event, ud: void*) {
        std_print_any(&e)
        log()
        std_print(e.bytes)
    }

    client.wait()
    client.close()
}