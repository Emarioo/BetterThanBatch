
#import "Logger"
#import "Linux"

/*
    Start program without arguments for server.
    Start program with any arguments for client.
*/

#macro PORT 8080

fn main(argc: i32, argv: char**, envp: char**) -> i32 {

    if argc > 1 {
        sock := socket(AF_INET, SOCK_STREAM, 0)
        
        client: sockaddr_in
        client.sin_family = AF_INET
        client.sin_addr = htonl(0x7F_00_00_01) // 127.0.0.1
        client.sin_port = htons(PORT);
        
        err := connect(sock, cast<sockaddr*>&client, sizeof client)
        
        if err < 0 {
            log("bad connect ", name_of_error(err))
            exit(1)
        }
        log("Connected");
        
        for 1..argc {
            len := strlen(argv[nr])
            write(sock, argv[nr], len)
        }
        
        close(sock)
    } else {
        sock := socket(AF_INET, SOCK_STREAM, 0)
        
        server: sockaddr_in
        server.sin_family = AF_INET
        server.sin_addr = INADDR_ANY
        server.sin_port = htons(PORT)
        
        err := bind(sock, cast<sockaddr*>&server, sizeof server)
        if err < 0 {
            log("bad bind ",name_of_error(err))
            exit(1)
        }
        
        len := sizeof server
        err = getsockname(sock, cast<sockaddr*>&server, &len)
        if err < 0 {
            log("bad sockname ", name_of_error(err))
            exit(1)
        }

        // #import "Lang"        
        // std_print_any(&server, true)
        
        listen(sock, 2)
        
        buf: char[1024]
        
        while {
            log("# waiting")
            msgsock := accept(sock, null, null)
            if msgsock < 0 {
                log("# bad accept ", name_of_error(msgsock))
                break
            }
            
            while {
                val := read(msgsock, buf.ptr, buf.len)
                
                if val < 0 {
                    log("# err ", name_of_error(val))
                    break
                } else if val == 0 {
                    log("# no data, closing")
                    break
                } else {
                    log("# ", val, " bytes:")
                    std_print(buf.ptr, val)
                    log() // newline
                }
            }
            
            close(msgsock)
        }
        
        close(sock)
    }

    return 0
}
