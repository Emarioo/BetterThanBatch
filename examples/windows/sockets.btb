
#import "Logger"
#import "String"
#import "Windows"

/*
    Start program without arguments for server.
    Start program with "ip port" as arguments for client.
    
    Terminal 1: "test"
    Terminal 2: "test 127.0.0.1 8080" 
*/

#macro PORT 8080

fn main(argc: i32, argv: char**) -> i32 {

    wsaData: WSADATA
    err := WSAStartup(0x0202, &wsaData)
    if err != 0 {
        log("WSA failed")
        return 1
    }
    defer WSACleanup()
    
    if argc > 2 {
         
        client := socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
        if client == INVALID_SOCKET {
            log("socket failed")
            return 1
        }
        defer closesocket(client)
        
        result: addrinfo*;
        hints: addrinfo
        hints.ai_family = AF_INET
        hints.ai_socktype = SOCK_STREAM
        hints.ai_protocol  = IPPROTO_TCP
        
        err = getaddrinfo(argv[1], argv[2], &hints, &result)
        if err != 0 {
            log("getaddrinfo failed")
            return 1
        }
        err = connect(client, result.ai_addr, sizeof *result.ai_addr)
        
        // addr: sockaddr_in
        // addr.sin_family = AF_INET
        // addr.sin_port = htons(8080)
        // addr.sin_addr = htonl(0x7F_00_00_01) // 127.0.0.1
        // err := connect(client, cast<sockaddr*>&addr, sizeof addr)
        
        if err == SOCKET_ERROR {
            log("connect failed")
            return 1
        }
        
        log("Connected")
        
        msg: StringBuilder
        msg.append("GET /index.html HTTP/1.1\r\n")
        msg.append("Host: ")
        msg.append(argv[1])
        msg.append("\r\nConnection: close\r\n\r\n")
        err = socket_send(client, msg.ptr, msg.len, 0)
        if err < 0 {
            log("send failed")
            return 1
        }
        
        buffer: char[1024]
        while {
            bytes := recv(client, buffer.ptr, buffer.len, 0)
            if bytes == 0 {
                break   
            } else if bytes < 0 {
                log("recv failed")
                return 1
            }
            std_prints("[READ ", bytes,"]")
            std_print(buffer.ptr, bytes)
        }
        // for 1..argc {
        //     len := strlen(argv[nr])
        //     err := socket_send(client, argv[nr], len, 0)   
        //     if err == SOCKET_ERROR {
        //         log("send failed")
        //         return 1   
        //     }
        // }
    } else {
        
        server := socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
        if server == INVALID_SOCKET {
            log("socket failed")
            return 1
        }
        defer closesocket(server)
        
        addr: sockaddr_in
        addr.sin_family = AF_INET
        addr.sin_port = htons(8080)
        addr.sin_addr = htonl(0x7F_00_00_01) // 127.0.0.1
        
        err = bind(server, cast<sockaddr*>&addr, sizeof addr)
        if err == SOCKET_ERROR {
            log("bind failed")   
            return 1
        }
        
        err = listen(server, SOMAXCONN)
        if err == SOCKET_ERROR {
            log("listen failed")
            return 1
        }
        
        buffer: char[1024]
        while {
            log("#waiting")
            client := accept(server, null, 0)
            if client == INVALID_SOCKET {
                log("accept failed")
                return 1
            }
            defer closesocket(client)
            
            while {
                bytes := recv(client, buffer.ptr, buffer.len, 0)
                if bytes == 0 {
                    break
                } else if bytes < 0 {
                    err := WSAGetLastError()
                    if err == WSAECONNRESET
                        break
                    log("recv failed ", err)
                    return 1
                } else {
                    std_print(buffer.ptr, bytes)
                    log() // newline
                }
            }
        }
    }

    return 0
}
