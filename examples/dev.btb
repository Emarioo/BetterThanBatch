
// a := 1 + (2 + (3 + (4 + 5)))
// a := 1 % (2 % (3 / (4 / (5 / (6 / 7)))))

// a := 2.5 + 4.5

// prints("Hey")

// fn @stdcall yoo(a: i32, b: i32) -> i64 {

fn n() -> i32 {
    return 923
}

fn @stdcall yoo(a: i32, b: i32) -> i32 {
    return a + b*2 + n()
    // return 1
}

fn main() -> i32 {
    // arr: i32[256];
    // a,c,d,e,f,g,h: i64;
    // main();
    a := yoo(9, 2)
    return a;
}

// #import "examples/foreign/main.btb"

// fn ret() -> char { return 'F' }

// printc(ret())
// printc('c')
// printc('\n')



// a: i32 = -5;
// b: u32 = 9;

// n := a + b;

// i: i32 = 0;
// while i < 5 {
//     i++;   
// }


// struct A {
//     a: i32;
//     b: i32;
//     c: i32;
// }
// a: A;
// a.a = 4;


// a := ya()*2;

// fn ya() -> i32 {
//     return 5+2;
// }

// OKay

// "eaeae"

// 2 + okay(1,3)

// struct okay {
//     nah: Math::Vec<Math::float32>;
// }

// enum Soup : i32 {
//     Shoof = 923,
//     Hihi = 9,
// }
// a :i32[32] = 9;

// a[3] = 9

// fn yea(ad: N::i32){
//     a = 923
// }

// operator +(n: i32, k: i32) -> f32 {
//     return n - k;
// }

// #import "tests/fuzzer_gen/main"
// #import "tests/fuzzer_gen/f19"