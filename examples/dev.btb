
// a := 1 + (2 + (3 + (4 + 5)))
// a := 1 % (2 % (3 / (4 / (5 / (6 / 7)))))

struct A {
    a: int;
    b: int;
    c: int;
}

// a: A;
// a.a = 4;

// a := ya()*2;

// fn ya() -> i32 {
//     return 5+2;
// }

// OKay

// "eaeae"

// 2 + okay(1,3)

// struct okay {
//     nah: Math::Vec<Math::float32>;
// }

// enum Soup : i32 {
//     Shoof = 923,
//     Hihi = 9,
// }
// a :i32[32] = 9;

// a[3] = 9

// fn yea(ad: N::i32){
//     a = 923
// }

// operator +(n: i32, k: i32) -> f32 {
//     return n - k;
// }

// #import "tests/fuzzer_gen/main"
// #import "tests/fuzzer_gen/f19"