// @macro-benchmark
// #import "OS"
// #import "Logger"
// #import "Basic"
// #import "String"
// #import "Math"

// #import "macros"
// #import "macro-bench"
// #import "overloading"
// #import "defer"
// #import "dir-iterator"
// #import "random/operator"
// #import "threads"
// #import "linecounter"
// #import "graphics/quad.btb"
// #import "graphics/perf.btb"

// #import "Array"

#define ORS(T,X,...) T==X || ORS(T,...)
#define ORS(T,X) T==X

#define PART0 a,b
#define PART1 1,2

#quote ORS(t,b,"c",d,e,f)
 
// #define yoo hallu sup

// #quote yoo


// flag0.x | flag1.x
// flag0.x | flag1.x


// a: u32* = Allocate(8);

// a[0] = 13;
// a[1] = 31;

// a[0] + a[1]

// fn @native prints(str: char[]);

// for 0..1 {
//     defer prints("second\n")
//     {
//         defer prints("first\n")
//         continue;
//     }
// }
// a = cast<u16>10000 * cast<u8>7
// a = cast<u16>1000 * cast<u8>7
// a = cast<u16>1000 * cast<u16>7
// a = 
// test cast<i32>1000 * cast<i32>7

// test 70000; T(u16, u8, 10000, *, 7);

// a = 9;
// test 3; 2;
// varf:f32 = -12415.92913
// test 12415.92913; -varf;


// #define T(t0,t1,n0,OP,n1) cast<t0> n0 OP cast<t1> n1

// test 70000; T(u16, u8, 10000, *, 7);

// fn @import @unixcall write(fd: i32, buf: void*, len: u64);
// #define stdout 1

// s.ptr[0] = 0x41;
// s.ptr[1] = 0x41;
// s.ptr[2] = ':';
// s.ptr[3] = 'x';

// write(stdout, s.ptr, s.len);

