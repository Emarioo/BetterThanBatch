
#import "Net"

#import "Threads"
#import "Logger"
#import "Lang"
#import "OS"

#macro DEFAULT_IP "127.0.0.1"
#macro DEFAULT_PORT 4000

fn TestClient() {
    client: Client
    client.set_callback(handle_event, null)
    err := client.start(DEFAULT_IP,DEFAULT_PORT)
    // err := client.start("www.example.com",80)

    while client.is_active() {
        msg: StringBuilder
        msg.append("Hello there\n")
        client.send(msg.sliced())

        ProcessSleep(0.5)
    }
    
    fn handle_event(e: Event, ud: void*) {
        log("CLIENT")
        std_print_any(&e)
        log()
        std_print(e.bytes)
    }

    client.wait()

    client.close()
}
fn TestServer() {
    server: Server
    server.set_callback(handle_event, null)
    err := server.start(DEFAULT_IP,DEFAULT_PORT)

    fn handle_event(e: Event, ud: void*) {
        log("SERVER")
        std_print_any(&e)
        log()
        std_print(e.bytes)
    }

    server.wait()
    server.close()
}

fn main(argc: i32, argv: char**) -> i32 {

    ThreadCreate(lamb,null)
    // Lambda would be nice wouldn't it...
    fn @stdcall lamb(n: void*) -> i32 { TestClient() return 0 }

    TestServer()

    // TestHTTPRequest()
    return 0
}


fn TestHTTPRequest() {
    client: Client
    client.set_callback(handle_event, null)
    err := client.start("www.example.com",80)

    msg: StringBuilder
    msg.append("GET /index.html HTTP/1.1\r\n")
    msg.append("Host: www.example.com\r\n")
    msg.append("Connection: close\r\n\r\n")
    client.send(msg.sliced())
    
    fn handle_event(e: Event, ud: void*) {
        std_print_any(&e)
        log()
        std_print(e.bytes)
    }

    client.wait()
    client.close()
}