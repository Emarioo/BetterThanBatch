
// #import "examples/graphics/game.btb"
// #import "examples/net/serverclient.btb"

/*
    Today's quest: Initialization of global data

    Should globals be initialized at compile time or at runtime?

    Compile time of course. That way we don't have to spend time
    setting up global data at the start of every process.

    We may need to init at runtime if global opens a file but allowing globals to do
    that will lead to a confusing program. You have no idea which global will be initialized first so
    it is better to open files manually. Hence, global initialized at compile time is totally fine.
    
    We can still allow opening of files at compile time.

    What are the next steps.
    Get compile time execution up and running for globals.

    Steps:
        - We go through each global
            in generator, we find global declaration statements of all scopes
        - We generate bytecode for the globals with expressions
            generate bytecode to a temporary tinycode
        - We execute the bytecode and put values into global data
            setup the VM, add some extra instructions to pop evaluated values into global data

    Extra:
        - Error if expression can't be evaluated at compile time
*/

#import "Logger"

// global yeet: i32 = 23 + 82 * hmmm() // crashes, functions can't be evaluated yet
global yeet: i32 = 23 + 82
global hoho: i32 = yeet

fn hmmm() -> i32 {
    return 2;
}

fn main() {
    log(hoho)
}