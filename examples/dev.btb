
// fn std_print(t: i64){
//     // If you are worried that this language will be filled with ifdefs like C/C++
//     // then you can calm down. This is just temporary.
    
//     // optimise by using a log10 function to know how many characters you need.
//     // then allocate some memory for that space
//     // run a while looop filling up that memory
//     // then print all characters at once
//     // free memory
//     // One last thing, the memory should be allocated using a linear allocator
//     // or some other temporary allocator. Perhaps you can allocate it on the
//     // stack or something?
//     // log("int")
//     if t == 0 {
//         printc('0')
//         return;
//     }
//     str: char[20];
//     used := 19;
//     value := t;
//     while value > 0 && used > 0 {
//         num: u32 = value % 10;
//         // log('A','0'+num)
//         // log(,num)
//         str.ptr[used] = num + '0';
//         used--;
        
//         value = value / 10;
//     }
//     str.ptr += used + 1;
//     // str.len -= used - 1;
//     str.len -= used + 1;
//     prints(str);
// }
// std_print(5)

// printc('a')
// printc('a')
// printc('a')
// printc('a')
// printc('\n')

t: i64 = 0x234

str: char[20];
used := 19;
value := t;
while used > 0 {
    num: u32 = value % 10;
    // log('A','0'+num)
    // log(,num)
    str.ptr[used] = num + '0';
    used--;
    
    value = value / 10;
    printc(str.ptr[used])
}
// printc('0' + str.len)
str.ptr += used + 1; // TODO: Program crashes here. Probably in x64 generator.
// str.len -= used - 1;
str.len -= used + 1;
prints(str);