
// #import "Logger"


/*
    Compile time execution:
    
    1. Run directives at global level runs at the bytecode generation like evaulation of global values.
    
    2. Run directives in expressions 
    
    2. Detect circular dependency.
        We can't execute run directive inside a function that
        the run eventually calls since it's not generated yet and the 
        run needs to execute before we can generate it.
        
*/
#import "Logger"

fn first() {
    log("first")
    #run second()
}
fn second() {
    log("second")
    #run first()
}

// #import "Memory"

// x := #run Allocate(4) // try this line if you are curious

// #import "Logger"

// struct Funcs {
//     start: fn();
//     finish: fn();
// }

// for 0..2 {
//     x := #run get_funcs()
    
//     x.start()
//     x.finish()
// }

// fn get_funcs() -> Funcs {
//     log("Get funcs")
//     return { Start, Finish }
// }

// fn Start() {
//     log("START")
// }
// fn Finish() {
//     log("FINISH")
// }

// #import "Logger"

// struct Stuff {
//     str: char[];
//     x: i32;
// }
// x := fun()
// y := fun()
// log(&x," ", &y)

// fn comp() -> Stuff {
//     log("comp")
//     return { "hello", 23 }
// }
// fn fun() -> Stuff {
//     res := #run comp()
//     return res
// }
                       
// #import "File"
// #import "String"
// #import "Memory"




// global BUILD_VERSION: i32 = get_version();

// fn main() {
//     log("Build Version: ", BUILD_VERSION);  
// }


// #import "Logger"


// fn okay() -> i32 {
//     log("okay")
//     return 5
// }

// fn main() {
//     log("main begin")
    
//     #run log("I am auxiliary but local")
    
//     x := #run okay()
    
//     log("main end ", y)
// }

// #run {
//     log("I am auxiliary and global")
// }

// global y: i32 = temp()
// fn temp() -> i32 {
//     log("I am global variable")
//     return 5
// }

// #import "Logger"


// fn first() {
//     log("first")
//     #run second()
// }
// fn second() {
//     log("second")
//     #run first()
// }
// first() // Should trigger a compiler error for circular dependency.


// #import "Memory"

// fn compute() -> i32 {
//     x: i32* = Allocate(4);
//     *x = 99;
//     return *x
// }
// // we can call functions that calls external functions from dynamic libraries
// _test 99; #run compute();
// _test 99; compute();

// #import "Memory"

// fn compute() -> i32 {
//     x: i32* = Allocate(4);
//     *x = 99;
//     return *x
// }
// // we can call functions that calls external functions from dynamic libraries
// // x := #run compute();
// _test 99; #run compute();
// // log(x)

// fn compute() -> i32 {
//     a := 5;
//     b := #run a + 5;
//     return b;
// }
// log(compute())

// global counter: i32 = #run 5;

// x := #run counter++;
// y := #run counter++;

// log(x," ",y," ", counter)
// make sure #run are executed in the right order
// _test 5; x;
// _test 6; y;

// fn hello() { }

// global f: fn() = #run hello; // error, we don't allow this

// @TEST_ERROR(E3001) #run hello();
// fn hello() { }

// struct app {
//     x: fn();
// }

// // global f: fn() = app{}; // error, we don't allow this
// global f: app = app{hello}; // error, we don't allow this

// log(cast_unsafe<i64>f)

// struct app {
//     x: i32 = 4;
//     y: char[] = "Hello";
// }

// y := #run "Hello"
// y := #run app{}

// #run for 0..5 {
//     log("Hello")   
// }

// log("Runtime")
