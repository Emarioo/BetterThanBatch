// #import "./dev2"

// struct B {
//     a: A*;
// }

/*
    Today's quest: destructors (part 2)
*/

#import "Logger"
#import "Array"

struct Ok {
    x: i32;
    fn init(a: i32 = 5, b: i32 = 9) {
        log("init ", a, " ", b)
    }
    fn cleanup(b: bool = 3, ya: i32 = 2) {
         log("clean ", b, " ",ya)
    }
}

arr: Array<Ok>

memory_tracker.init()

arr.add()
arr.add()
arr.add()
arr.pop()

// arr.cleanup()
destruct(&arr)


memory_tracker.print_memory()

// ok: Ok
// construct(&ok)

// destruct(&ok)

// #import "Logger"
// #import "Array"
// #import "Lang"

// global counter: i32
// struct Item {
//     x: i32
//     fn init() {
//         x = counter++
//         log("init ",x)
//     }
//     fn cleanup() {
//         log("cleanup ",x)
//     }
// }

// // operator cast(x: i32) -> Item { return Item{x} }

// memory_tracker.init()

// arr: Array<Item>;
// arr.add(Item{4})
// arr.add(Item{23})
// arr.pop()
// arr.add(Item{92})
// arr.add(Item{96})
// arr.add(Item{98})
// for arr.sliced() {
//     log(&it)
// }
// log(arr.len, " ", arr.max)

// memory_tracker.print_memory()

// arr.reserve(0);



// #import "examples/graphics/game.btb"

// #import "BucketArray"

// #import "Logger"
// #import "Lang"
// #import "String"

// struct Tree {
//     name: char[];
//     age: i32;
// }

// memory_tracker.init()

// arr: BucketArray<Tree>

// arr.init(3)

// req_elem := arr.requestSpot(5, null)
// req_elem.name = "Requested"
// req_elem.age = -5

// for 0..100 {
//     pos, elem := arr.add(null)
//     name: StringBuilder
//     name.append("oak ")
//     name.append(nr)
//     elem.name = name.sliced()
//     elem.age = nr * 3
// }

// elem := arr.get(5)
// log(elem)

// for 0..90 {
//     pos := (nr * 120124 + 2131) % arr.getMax()
//     // log("del ", pos)
//     arr.removeAt(pos)
// }

// memory_tracker.print_memory()

// log("items left: ", arr.getCount())

// log(&arr)

// log("memory: ", arr.getMemoryUsage())

// iter := arr.create_iterator()
// while arr.iterate(&iter) {
// // while arr.iterate_reverse(&iter) {
//     log(iter.index," = ",iter.ptr)
// }

// arr.cleanup()