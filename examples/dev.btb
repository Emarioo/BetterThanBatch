

// #import "./demo/macros"

// #import "Logger"
// log(823.32)

// #import "Logger"

// global fun_step: i32 = 0;
// global while_step: i32 = 0;

// // turn on/off printing
// // #macro step(V, N, ...) { _test V; N; V = N + 1; prints(...); }
// #macro step(V, N, ...) { _test V; N; V = N + 1; }

// fn fun(i: i32){
//     fun_step = 0;
    
//     defer step(fun_step, 2, "fun1 defer\n")
//     defer step(fun_step, 1, "fun2 defer\n")
//     if(i >1){
//         step(fun_step, 0, "before return\n")
//         return
//     }
//     step(fun_step, 0, "end of fun\n")
// }

// i := -1;
// while i < 10; {
//     i++;
//     base := while_step;
//     // printi(i);
//     // printc('\n');
    
//     // printi(i);
//     // prints(" - ");
//     // printi(while_step);
//     // printc('\n');
    
//     defer step(while_step, base + 2,"while defer\n")
//     if(i>5){
//         step(while_step, base + 0, "before break\n")
//         if(i==8){
//             while_step += 1; // steps in if won't run so we add the steps here since "while defer"" expects 2 steps
//             continue;
//         }
//         defer step(while_step, base + 1, "if defer\n");
//         continue;
//     }
//     while_step += 2; // steps in if won't run so we add the steps here since "while defer"" expects 2 steps
//     fun(i);
//     // printi(base + 1);
//     // prints(" - ");
//     // printi(while_step);
//     // printc('\n');
// }
