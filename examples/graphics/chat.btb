/*
    A chat client/server

    Compile with: btb examples/graphics/chat.btb

    Run executable and type /help
    Write "/start" and press enter then start another
      executable and write "/connect"
    Now you have two applications that can send messages
      back and forth.
*/

#import "Graphics"
#import "Net"
#import "Math"
#import "Logger"
#import "Array"
#import "String"
#import "Stream"

#import "File"

#macro DEFAULT_PORT 5231

global window: WindowContext*;
global server: Server
global client: Client
global is_server: bool = false
global chat_widget: ChatWidget*

enum NetType {
    MSGTYPE_MESSAGE,
}
struct NetHeader {
    type: NetType
}
struct NetMessage {
    header: NetHeader = NetHeader{MSGTYPE_MESSAGE};
    sender_len: i32;
    text_len: i32;
}
// #macro LOG_NET(X) X
#macro LOG_NET(X) #endmacro

fn net_callback(e: NetEvent, user_data: void*) {
    LOG_NET(
        std_print("EVENT ") std_print_any(&e.type) log()
    )
    switch e.type {
    case EVENT_START_LISTENING:
        if is_server {
            tmp: StringBuilder
            tmp.append("Started server")
            chat_widget.add_msg(tmp);
        } else {
            tmp: StringBuilder
            tmp.append("Started client")
            chat_widget.add_msg(tmp);
        }
    case EVENT_STOP_LISTENING:
        if is_server {
            tmp: StringBuilder
            tmp.append("Stopped server")
            chat_widget.add_msg(tmp);
        } else {
            tmp: StringBuilder
            tmp.append("Stopped client")
            chat_widget.add_msg(tmp);
        }
    case EVENT_CONNECT:
        tmp: StringBuilder
            tmp.append("Someone connected")
            chat_widget.add_msg(tmp);
    case EVENT_RECEIVE:

        LOG_NET( log("msglen ", e.bytes.len) )

        header := cast<NetHeader*>e.bytes.ptr
        switch header.type {
            case MSGTYPE_MESSAGE:
                body := cast<NetMessage*>e.bytes.ptr
                LOG_NET( std_print_any(body,true) )

                tmp: StringBuilder
                // Make sure you get this right
                tmp.append(Slice<char>{cast<void*>body + sizeof (NetMessage),body.sender_len})
                tmp.append(": ")
                tmp.append(Slice<char>{cast<void*>body + sizeof (NetMessage) + body.sender_len,body.text_len})
                chat_widget.add_msg(tmp);

                if is_server {
                    server.send(e.bytes, all_except = e.who)
                }
            case:
                std_prints("ERROR, bad message header ") std_print_any(header) log()
        }
    case: // nothing
    }
}

struct ChatWidget {
    x: f32;
    y: f32;
    w: f32;
    h: f32;

    text_size: f32;

    user_name: StringBuilder;

    messages: Array<StringBuilder>;
    input_message: StringBuilder;
    cursor_pos: i32;

    fn add_msg(str: StringBuilder) {
        messages.add(str)
    }

    fn init(_x: f32, _y: f32, _w: f32, _h: f32) {
        x = _x;
        y = _y;
        w = _w;
        h = _h;
        text_size = 20.0
    }
    // TODO: set_width/height methods

    fn render(window: WindowContext*) {
        EditText(window, &input_message, &cursor_pos)

        if window.isKeyPressed(GLFW_KEY_ENTER) {
            if find("/", input_message.sliced()) == 0 {
                // command
                args := split(" ",input_message.sliced())
                // log(&args)
                if args.len == 0 {
                    // what?
                } else if args[0] == "/help" {
                    tmp: StringBuilder
                    tmp.append("Help:\n")
                    tmp.append(" /start [port] - Start server\n")
                    tmp.append(" /connect [ip] [port] - Start client\n")
                    tmp.append(" /stop - Stop server or client")
                    add_msg(tmp)
                } else if args[0] == "/stop" {
                    if server.is_active()
                        server.close()
                    if client.is_active()
                        client.close()
                } else if args[0] == "/setname" {
                    user_name.clear()
                    user_name.append(args[1])
                } else if args[0] == "/start" {
                    // TODO: start and connect commands always use defaul port and never the optional
                    //   one provided by the user.
                    // TODO: If client or server, close them.
                    //   This may take some time so we should probably do it in another thread.
                    is_server = true
                    if server.is_active()
                        server.close()
                    if client.is_active()
                        client.close()
                    server.start(DEFAULT_PORT, NET_TCP | NET_PROTO_MESSAGE)
                } else if args[0] == "/connect" {
                    // if args.len < 2 {
                    //     log("ERROR: /connect expects at least one argument, ip and optionally port. You provided ", args.len-1," argument(s).")
                    // } else {
                        is_server = false
                        if server.is_active()
                            server.close()
                        if client.is_active()
                            client.close()
                        if args.len > 1 {
                            client.start(args[1], DEFAULT_PORT, NET_TCP | NET_PROTO_MESSAGE)
                        } else {
                            client.start("127.0.0.1", DEFAULT_PORT, NET_TCP | NET_PROTO_MESSAGE)
                        }
                    // }
                }
                input_message.clear()
            } else {

                // log("Pressed enter")
                sender: StringBuilder
                defer sender.cleanup()
                if user_name.size() != 0 {
                    sender.append(user_name)
                } else if is_server {
                    sender.append("Server")
                } else {
                    sender.append("Client")
                }

                header: NetMessage
                header.header.type = MSGTYPE_MESSAGE
                header.sender_len = sender.size()
                header.text_len = input_message.size()

                stream: ByteStream
                defer stream.cleanup()
                stream.reserve(sizeof (NetMessage) + sender.size() + input_message.size() + 20)

                stream.write(&header, sizeof header)
                stream.write(sender.data(), header.sender_len)
                stream.write(input_message.data(), header.text_len)

                // FileWrite("bin.txt", stream.sliced_unsafe())

                if is_server {
                    server.send(stream.sliced_unsafe())
                } else {
                    client.send(stream.sliced_unsafe())
                }
                tmp: StringBuilder
                tmp.append("You: ")
                tmp.append(input_message)
                add_msg(tmp)
                input_message.clear()
            }
        }

        layout_y := y
        padding := 5
        draw_info: DrawTextInfo
        // TODO: Rendering 10000 messages will be slow.
        //   If we don't have scroll, we can throw away unnecessary messages.
        //   With scroll we can render the messages that fit on the screen, messages outside can be skipped.
        //   For that we need to know the height of each message, more specifically, the amount of newlines in the message.
        //   This should be stored alongside the text context for each message so we don't recompute it every time.
        for @ptr messages.sliced() {
            DrawText(window, x + padding, padding + layout_y, text_size, it.sliced(), out_info = &draw_info)
            // layout_y += text_size
            layout_y += draw_info.drawn_height
        }
        // TODO: Support newlines in input message? shift+enter? We also need to offset the render position
        //   so the whole input message fits on the screen.
        DrawText(window, padding + x, padding + y + h - text_size - 2*padding, text_size, input_message.sliced(), cursor = cursor_pos)
    }
}

#macro SKIP_CONSOLE #endmacro

#if SKIP_CONSOLE
#if OS_WINDOWS
    // NOTE: A hack in the compiler, if a function named WinMain exists and the target is Windows, the linker will not use the console subsystem
    fn @stdcall @entry WinMain(hInstance: void*, hPrevInstance: void*, cmdline: char*, showCmd: i32) -> i32 {
        buf0: StringBuilder
        buf1: Array<char*>
        argc, argv := ParseCmdLine(sliced(cmdline), &buf0, &buf1)

        main(argc, argv)

        ExitProcess(0)

        return 0
    }
#endif
#endif

fn main(argc: i32, argv: char**) -> i32 {
    // net_callback uses chat_widget so we make sure it's not null to avoid crashes
    chat: ChatWidget
    // chat.init(0,0,window.width, window.height)
    chat_widget = &chat

    // log(argc)
    server.set_callback(net_callback, null)
    client.set_callback(net_callback, null)
    if argc > 1 {
        if "client" == sliced(argv[1]) {
            client.start("127.0.0.1", DEFAULT_PORT, NET_TCP | NET_PROTO_MESSAGE)
        } else if "server" == sliced(argv[1]) {
            is_server = true
            server.start(DEFAULT_PORT, NET_TCP | NET_PROTO_MESSAGE)
        } else {
            log("Chat executable only handles one of these arguments: 'server' or 'client'.")
        }
    }
    start_chat()
    return 0
}

fn start_chat() {
    // window = CreateWindow(1400,600)
    window = CreateWindow(800,600)

    step := 0

    chat_widget.init(0,0,window.width, window.height)

    while window.running {
        FillColor(window, Color{0.2,0.2,0.2})
        
        window.enableUISpace(true)
        
        chat_widget.w = window.width
        chat_widget.h = window.height

        chat_widget.render(window)

        RefreshWindow(window)
    }   
    
    DestroyWindow(window)
}
