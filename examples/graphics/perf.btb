/*
    A visualizer for profiled information

    Two main panels.
    Left panel contains a list of profiled functions with hits and time measurement (inclusive and exclusive time from inner function calls)
    The list can be sorted.
    The right panel shows a timeline of when and which thread functions were called.
*/

#import "Graphics"
#import "Logger"
#import "OS"
#import "String"

// fn @import Sleep(ms: i32); // windows sleep, remove this later

// #define GLCHECK glErrCode = glGetError(); if glErrCode { log("Error",#line,glErrCode,":",glewGetErrorString(glErrCode)); }
// #ifndef GLCHECK
// #define GLCHECK
// #endif
struct Zone {
    start: u64;
    end: u64;
    name: char*;
}
struct ProfiledData {
    fn cleanup() {
        Free(rawData, rawSize);
        Free(zoneOffsets, contextCount * sizeof u32);
    }
    contextCount: u32;
    zoneCounts: u32*; // do not free this
    zoneOffsets: u32*;

    rawSize: u32;
    rawData: void*;
}

// #define LN printc('L'); printc('N'); _print(cast<i64>#line); _print('\n')

fn ReadPerfData(path: char[]) -> ProfiledData* {
    ptr: ProfiledData* = Allocate(sizeof ProfiledData);
    memzero(ptr, sizeof ProfiledData);

    fileSize: u64;
    file = FileOpen(&path, FILE_READ_ONLY, &fileSize);
    if(!file)
        return null;
    data: void* = Allocate(fileSize);
    FileRead(file, data, fileSize);
    FileClose(file);

    offset = 0;
    
    ptr.contextCount = *cast<u32*>data + offset;
    // return null;
    offset += 4;

    ptr.zoneCounts = (cast<u32*>data + offset);
    offset += ptr.contextCount * 4u;

    ptr.zoneOffsets = Allocate(ptr.contextCount * sizeof u32);
    for 0..ptr.contextCount {
        ptr.zoneOffsets[nr] = offset;
        offset += ptr.zoneCounts[nr] * sizeof Zone;
    }
    
    // log(fileSize, offset);
    ptr.rawData = data;
    ptr.rawSize = fileSize;
// 9999999999999
// 95679105467774
    profiledData = ptr;
    // minx: u64 = 9999999999999;
    // for depth: 0..profiledData.contextCount {
    //     zoneC = profiledData.zoneCounts[nr];
    //     zones = cast<Zone*>profiledData.rawData + profiledData.zoneOffsets[nr];
    //     cmp = zones[0].start < minx;
    //     log("start ", zones[0].start," < ", minx, " ", cmp );
    //     if cmp {
    //         log(" minx", minx, zones[0].start);
    //         minx = zones[0].start;
    //     }
    // }
    for depth: 0..profiledData.contextCount {
        zoneC = profiledData.zoneCounts[nr];
        zones = cast<Zone*>profiledData.rawData + profiledData.zoneOffsets[nr];

        for 0..zoneC {
            zone = &zones[nr];
            log(cast<i64>zone.start, cast<i64>zone.end)
        }
    }
    return ptr;
}

// global tempBuilder: StringBuilder;
global tempStringData: char*;
// LN
tempStringData = Allocate(0x10_0000);
// log(tempBuilder.len, tempBuilder.max);
// LN

// LN
main();
0 // exit code
// global offsetX: i32 = 0;
// global offsetY: i32 = 0;
fn main(){
    // log(tempBuilder.len, tempBuilder.max);
    profiledData = ReadPerfData("profiled.dat");
    if !profiledData {
        log("Cannot find data");
        return;
    }
    // return;
    winw = 800;
    winh = 600;
    window = InitGLFWAndCreateWindow(winw, winh);

    // vshader = "
    //     #version 330 core
    //     layout (location = 0) in vec3 aPos;
    //     void main()
    //     {
    //         gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);
    //     }
    //     ";
    // fshader = "
    //     #version 330 core
    //     out vec4 FragColor;

    //     void main()
    //     {
    //         FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);
    //     } 
    //     ";
    
    // shaderProgram = CreateShaderProgram(vshader, fshader);

    // glUseProgram(shaderProgram);
    // GLCHECK

    module = CreateUIModule();

    // box = module.makeBox(3);
    // box.x = 20;
    // box.y = 100;
    // box.w = 200;
    // box.h = 200;
    // box.color = UIColor{1,1,1,1};

    lastTime = rdtsc();
    invClockSpeed: f32 = 1.0/GetClockSpeed();

    // avg: f32;
    str = "Hello";
    // frames = 0
    while !glfwWindowShouldClose(window) {
        // if frames > 200
        //     break;
        // frames++
        now = rdtsc();
        delta: f32 = cast<f32>(now - lastTime) * invClockSpeed;
        // delta: f32 = cast<f32>(now - lastTime) / clockSpeed;
        lastTime = now;
        
        glfwGetWindowSize(window, &winw, &winh);
        glViewport(0,0,winw,winh);

        glClearColor(0.02,0.05,0.08,1);
        glClear(GL_COLOR_BUFFER_BIT);

        // box = module.makeBox(3);
        // // box.x += 3 * delta;
        // box.x += 0.0625/64;
        
        // text = module.makeText();
        // text.x = box.x + 20;
        // text.y = box.y + 20;
        // text.h = 40;
        // text.string = str.ptr;
        // text.length = str.len;
        // text.color = UIColor{1,0,0,1};

        RenderProfiledData(module, profiledData);

        // log("win",cast<i64>winw,cast<i64>winh);
        RenderUIModule(module, winw, winh);

        // avg += delta;
        // log(delta);

        glfwSwapBuffers(window);

        glfwPollEvents();
        Sleep(100)
    }
    // log(avg/frames)

    DestroyUIModule(module);

    glfwTerminate();
}
fn RenderProfiledData(module: UIModule*, profiledData: ProfiledData*) {
    scale = 10*800*1.0/GetClockSpeed();

    strOffset = 0;
    // tempBuilder.clear();
    // log("##############")
    minx: u64 = -1;
    for depth: 0..profiledData.contextCount {
        zoneC = profiledData.zoneCounts[nr];
        zones = cast<Zone*>profiledData.rawData + profiledData.zoneOffsets[nr];
        // cmp = zones[0].start < minx;
        // log("start ", zones[0].start," < ", minx, " ", cmp );
        if zones[0].start < minx || minx == -1 {
            // log(" minx", minx, zones[0].start);
            minx = zones[0].start;
        }
    }
    for depth: 0..profiledData.contextCount {
        zoneC = profiledData.zoneCounts[nr];
        zones = cast<Zone*>profiledData.rawData + profiledData.zoneOffsets[nr];

        for 0..zoneC { 
            zone = &zones[nr];

            box = module.makeBox();
            box.x = (zone.start-minx) * scale;
            box.w = (zone.end - zone.start) * scale;
            box.y = 10 + 60 * depth;
            box.h = 20;
            // box.color = UIColor{0.5,0.5,0.5,1};
            box.color = UIColor{1,1,1,1};

            timeText = module.makeText();
            timeText.color = UIColor{0.1,0,0.08,1};
            timeText.x = box.x;
            timeText.h = box.h*0.8;
            timeText.y = box.y + box.h/2 - timeText.h/2;

            time = 1000.0 * cast<f32>(zone.end - zone.start) / GetClockSpeed();
            len: u32;
            timeText.string = tempStringData + strOffset;
            // log("data:",(cast<i64>tempStringData)," off:",cast<i64>strOffset," time:",time);
            len = swrite_unsafe(tempStringData + strOffset, time);
            // if len > 8
            //     len = 8;
            strOffset += len;
            timeText.length = len;

            textwidth = module.getWidthOfText(timeText);

            timeText.x += box.w/2 - textwidth/2;

            // index = tempBuilder.len;
            // tempBuilder.append(time*1000);
            // tempBuilder.len -= 

            // timeText.length = strlen(@cstr "Sup");
            // timeText.string =  @cstr "Sup";
        }
    }
}