/*
    This file contains structures and some logic for the world.
    Tiles, entities...
*/

#import "BucketArray"
#import "Array"
#import "Graphics"
#import "Math"
#import "./Config"

enum EntityType {
    ENTITY_BLOB,
    ENTITY_PLATFORM,

    ENTITY_TYPE_MAX,
}
struct EntityInfo {
    texture: Texture*;
    color: Color;
    is_static: bool;
}
enum TileType {
    TILE_NONE,
    TILE_GRASS,
    TILE_ROCK,
    TILE_WATER,

    TILE_TYPE_MAX,
}
struct TileInfo {
    texture: Texture*;
    color: Color;
    // has_collision?
}
enum EntityFlags {
    ENTITY_FLAG_NONE = 0,
    ENTITY_FLAG_ONLINE = 0x1,
}
struct Entity {
    id: UUID;
    pos: vec2;
    size: vec2;
    vel: vec2;
    entity_info: i32; // entity type
    flags: EntityFlags;
}
struct Tile {
    tile_info: i32;
}
struct Chunk {
    x: i32;
    y: i32;
    tiles: Array<Tile>; // The position of the tile is calculated based on it's index. All chunks have the same sized arrays
}

struct Collision {
    obj0: i32;
    obj1: i32;
    old_pos0: vec2;
    old_pos1: vec2;
    was_y: bool;
    was_x: bool;
}
        
struct World {
    entities: BucketArray<Entity>;
    chunks: BucketArray<Chunk>;
    chunk_size: i32 = 16;
    timestep: f32 = 1/60.0;

    removed_entities: Array<UUID>;
    added_entities: Array<UUID>;

    fn init() {
        entities.init(256)
        chunks.init(100)
    }
    fn add_entity(x: f32, y: f32, w: f32, h: f32, type: EntityType) -> Entity* {
        id, e := entities.add(null)
        e.entity_info = cast<i32>type
        e.pos.x = x
        e.pos.y = y
        e.size.x = w
        e.size.y = h
        e.id = gen_uuid()

        added_entities.add(e.id)

        return e
    }
    fn remove_entity(id: UUID) {
        iter := entities.create_iterator()
        while entities.iterate(&iter) {
            if iter.ptr.id == id {
                break
            }
        }
        
        removed_entities.add(iter.ptr.id)
        entities.removeAt(iter.index)
    }
    fn remove_entity_from_net(id: UUID) {
        iter := entities.create_iterator()
        while entities.iterate(&iter) {
            if iter.ptr.id == id {
                break
            }
        }
        
        entities.removeAt(iter.index)
    }
    // from network
    fn add_entitity_with_uuid(x: f32, y: f32, w: f32, h: f32, type: EntityType, uuid: UUID) -> Entity* {
        id, e := entities.add(null)
        e.entity_info = cast<i32>type
        e.pos.x = x
        e.pos.y = y
        e.size.x = w
        e.size.y = h
        e.id = uuid

        return e
    }
    fn get_entity(id: UUID) -> Entity* {
        iter := entities.create_iterator()
        while entities.iterate(&iter) {
            if iter.ptr.id == id {
                return iter.ptr
            }
        }
        return null
    }
    fn find_chunk(x: i32, y: i32) -> Chunk* {
        chunk_x := x / chunk_size
        chunk_y := y / chunk_size
        if x < 0
            chunk_x--
        if y < 0
            chunk_y--

        found_chunk: Chunk*;
        iter := chunks.create_iterator()
        while chunks.iterate(&iter) {
            it := iter.ptr

            if it.x == chunk_x && it.y == chunk_y {
                found_chunk = it
                break
            }
        }
        if !found_chunk {
            _: i32, found_chunk = chunks.add(null)
            found_chunk.tiles.resize(chunk_size*chunk_size)
        }
        return found_chunk
    }
    fn set_tile(x: i32, y: i32, tile: Tile) {
        found_chunk := find_chunk(x, y);

        tile_x := x % chunk_size
        tile_y := y % chunk_size

        tilep := found_chunk.tiles.get_unsafe(tile_y * chunk_size + tile_x);
        *tilep = tile
    }
    fn get_tile(x: i32, y: i32) -> Tile* {
        found_chunk := find_chunk(x, y);

        tile_x := x % chunk_size
        tile_y := y % chunk_size

        tile := found_chunk.tiles.get_unsafe(tile_y * chunk_size + tile_x)
        return tile
    }
    fn compute_collisions(array: Array<Collision>*) {
        array.clear()
        iter0 := entities.create_iterator()
        while entities.iterate(&iter0) {
            it0 := iter0.ptr

            info0 := entity_infos.get_unsafe(it0.entity_info)

            iter1 := entities.create_iterator(iter0.index + 1) // don't loop over the same entities multiple times
            while entities.iterate(&iter1) {
                it1 := iter1.ptr

                info1 := entity_infos.get_unsafe(it1.entity_info)
                
                if info0.is_static && info1.is_static
                    continue // nothing happens if static

                if collides(it0.pos, it0.size, it1.pos, it1.size) {
                    c: Collision
                    c.obj0 = iter0.index
                    c.obj1 = iter1.index
                    c.old_pos0.x = it0.pos.x - it0.vel.x * timestep
                    c.old_pos0.y = it0.pos.y - it0.vel.y * timestep
                    c.old_pos1.x = it1.pos.x - it1.vel.x * timestep
                    c.old_pos1.y = it1.pos.y - it1.vel.y * timestep
                    
                    c.was_y = c.old_pos0.y + it0.size.y > c.old_pos1.y && c.old_pos0.y < c.old_pos1.y + it1.size.y
                    c.was_x = c.old_pos0.x + it0.size.x > c.old_pos1.x && c.old_pos0.x < c.old_pos1.x + it1.size.y
                    array.add(c)
                }
            }
        }
    }
    fn resolve_collisions(collisions: Array<Collision>*) {
        #macro near_zero(f) (f > -0.001 || f < 0.001)
        #macro non_zero(f) (f < -0.001 || f > 0.001)

        for @ptr collisions.sliced() {
            // log(it)
            // continue

            it0 := entities.get(it.obj0)
            it1 := entities.get(it.obj1)
            
            // TODO: Current collision leaves gaps between collision objects

            if !it.was_y {
                both_up := it0.vel.y > 0 && it1.vel.y > 0
                both_down := it0.vel.y < 0 && it1.vel.y < 0
                if non_zero(it0.vel.y) && !(both_up && it0.vel.y <= it1.vel.y) && !(both_down && it0.vel.y >= it1.vel.y) {
                    it0.pos.y = it.old_pos0.y
                    // it0.vel.y = 0
                }
                if non_zero(it1.vel.y) && !(both_up && it0.vel.y >= it1.vel.y) && !(both_down && it0.vel.y <= it1.vel.y) {
                    it1.pos.y = it.old_pos1.y
                    // it0.vel.y = 0
                }
            } else if !it.was_x {
                both_right := it0.vel.x > 0 && it1.vel.x > 0
                both_left := it0.vel.x < 0 && it1.vel.x < 0
                if non_zero(it0.vel.x) && !(both_right && it0.vel.x <= it1.vel.x) && !(both_left && it0.vel.x >= it1.vel.x) {
                    it0.pos.x = it.old_pos0.x
                    // it0.vel.x = 0
                }
                if non_zero(it1.vel.x) && !(both_right && it0.vel.x >= it1.vel.x) && !(both_left && it0.vel.x <= it1.vel.x) {
                    it1.pos.x = it.old_pos1.x
                    // it0.vel.x = 0
                }
            }
        }
    }
    fn update(window: WindowContext*) {
        iter := entities.create_iterator()
        while entities.iterate(&iter) {
            it := iter.ptr
            it.pos.x += it.vel.x * timestep
            it.pos.y += it.vel.y * timestep
        }
        collisions: Array<Collision>
        defer collisions.cleanup()
        for 0..9 {
            compute_collisions(&collisions)
            if collisions.size() == 0
                break
            resolve_collisions(&collisions)
        }
    }
}

// Creates a hardcoded test world
fn LoadWorld() -> World* {
    world := cast<World*>Allocate(sizeof World)
    construct(world)
    

    fn fill(x: i32, y: i32, w: i32, h: i32, tile: Tile, world: World* = world) {
        for 0..w*h {
            world.set_tile(x + nr % w, y + nr / w,tile)
        }
    }

    grass := Tile{tile_info = TILE_GRASS}

    fill(0,0,5,5,grass)

    return world
}

struct WorldFormat_Header {
    magic: i32;
    version: i32;
    flags: i32; // reserved
    length: i32; // length of rest of file
}
struct WorldFormat_Body {
    entity_count: i32;
    chunk_count: i32;
    chunk_size: i32;
    // array of entities
    // array of chunks
    //   x,y
    //   array of tiles
}
fn SaveWorld(path: char[], world: World*) -> bool {
    // Version: 1

    body: WorldFormat_Body
    body.entity_count = world.entities.getCount()
    body.chunk_count = world.chunks.getCount()
    body.chunk_size = world.chunk_size

    header: WorldFormat_Header
    header.version = 1
    header.length = sizeof(WorldFormat_Body) +
        body.entity_count * sizeof(Entity) +
        body.chunk_count * (2 * sizeof(i32) + body.chunk_size * body.chunk_size * sizeof(Tile))

    file := FileOpen(path, FILE_CLEAR_AND_WRITE)
    if !file {
        log("Cannot save world to file: ", path)
        return false
    }
    defer FileClose(file)

    FileWrite(file, &header, sizeof(header))
    FileWrite(file, &body, sizeof(body))

    iter := world.entities.create_iterator()
    while world.entities.iterate(&iter) {
        ent := iter.ptr
        if ent.flags & ENTITY_FLAG_ONLINE
            continue

        // TODO: Players should be stored differently.

        FileWrite(file, ent, sizeof(Entity))
    }

    tile_count := body.chunk_size * body.chunk_size
    iter_c := world.chunks.create_iterator()
    while world.chunks.iterate(&iter_c) {
        chunk := iter_c.ptr
        
        FileWrite(file, &chunk.x, sizeof(i32))
        FileWrite(file, &chunk.y, sizeof(i32))

        if chunk.tiles.ptr {
            FileWrite(file, chunk.tiles.ptr, tile_count * sizeof(Tile))
        } else {
            tile: Tile
            for 0..tile_count {
                FileWrite(file, &tile, sizeof(Tile))
            }
        }
    }

    log("Saved world to ",path)

    return true
}
// world is cleared and loaded with data from file
fn LoadWorld(path: char[], world: World*) -> bool {
    // Version: 1

    header: WorldFormat_Header
    body: WorldFormat_Body

    file := FileOpen(path, FILE_READ_ONLY)
    if !file {
        log("Cannot load world from file: ", path)
        return false
    }
    defer FileClose(file)

    FileRead(file, &header, sizeof(header))
    FileRead(file, &body, sizeof(body))

    if header.version != 1 {
        log("Cannot load file, unsupported version: ", path)
        return false
    }
    expected_length := sizeof(WorldFormat_Body) +
        body.entity_count * sizeof(Entity) +
        body.chunk_count * (2 * sizeof(i32) + body.chunk_size * body.chunk_size * sizeof(Tile))
    if header.length != expected_length {
        log("Cannot load file, length is corrupt: ", path)
        return false
    }

    world.entities.clear()
    world.chunks.clear()
    world.chunk_size = body.chunk_size

    for 0..body.entity_count {
        _, ent := world.entities.add(null)
        
        FileRead(file, ent, sizeof(Entity))
    }

    tile_count := body.chunk_size * body.chunk_size
    for 0..body.chunk_count {
        _, chunk := world.chunks.add(null)
        
        FileRead(file, &chunk.x, sizeof(i32))
        FileRead(file, &chunk.y, sizeof(i32))

        chunk.tiles.resize(tile_count)
        FileRead(file, chunk.tiles.ptr, tile_count * sizeof(Tile))
    }

    log("Loaded world from ",path)

    return true
}

global tile_infos: Array<TileInfo>
global entity_infos: Array<EntityInfo>
global textures: Array<Texture*>;

enum TextureNames {
    IMG_BLOB,
    IMG_GRASS,
    IMG_ROCK,
    IMG_WATER,

    IMG_MAX,
}
// Window (glfw, opengl context) should be initialized before calling this
fn InitEntityInfos() {
    textures.resize(IMG_MAX)
    entity_infos.resize(ENTITY_TYPE_MAX)
    tile_infos.resize(TILE_TYPE_MAX);

    *&textures.get_unsafe(IMG_BLOB) = CreateTexture("examples/graphics/blob.png");

    entity_infos.get_unsafe(ENTITY_BLOB).texture = textures[cast<i32>IMG_BLOB]

    tile_infos.get_unsafe(TILE_GRASS).color = Color{0.1,0.9,0.1}
    tile_infos.get_unsafe(TILE_ROCK).color = Color{0.08,0.08,0.1}
    tile_infos.get_unsafe(TILE_WATER).color = Color{0.02,0.1,0.7}

}






struct UUID {
    data: u64; // zero means invalid, none, empty UUID
    fn valid() -> bool { return data != 0 }
}
operator ==(a: UUID, b: UUID) -> bool {
    return a.data == b.data
}
operator !=(a: UUID, b: UUID) -> bool {
    return a.data != b.data
}
fn gen_uuid() -> UUID {
    return UUID{random64()}
}
fn std_print(id: UUID) {
    std_print_hex(&id, sizeof id)
}