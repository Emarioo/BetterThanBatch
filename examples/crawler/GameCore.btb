/*
    This file contains the core game code.
    Entities and things.


    TODO:
        Chat
        Level editor
        Multiplayer
*/

#import "./Config"
#import "./Debug"
#import "./World"
#import "./Network"
#import "./Chat"

#import "Graphics"
#import "Net"
#import "Math"
#import "Logger"
#import "Array"
#import "BucketArray"
#import "String"

#import "Hotreloading"

#if BUILD_EXE
fn main(argc: i32, argv: char**) -> i32 {
    log("HI!")
    app: AppInstance
    app.argc = argc
    app.argv = argv
    // app.rebuild_func = build
    // fn build() {
    //     ExecuteCommand("btb examples/crawler/GameCore -d --silent --incremental -o bin/code.dll", asynchronous = true)
    // }
    // #if OS_WINDOWS
    //     app.init("bin/code.dll")
    // #else
    //     app.init("bin/code.so")
    // #endif

    HOTRELOAD_FN_EVENT (&app, APP_START)
    while app.running {
        HOTRELOAD_FN_EVENT (&app, APP_TICK)
    }
    HOTRELOAD_FN_EVENT (&app, APP_STOP)

    return 0
}
#endif

fn @export HOTRELOAD_FN_EVENT (app: AppInstance*, event: AppEvent) {
    if event == APP_CODE_LOAD  init_preload() // init global data, type information
    
    core: GameCore* = app.user_data

    switch event {
        case APP_START:
            core = Allocate(sizeof GameCore)
            construct(core)
            if app.argc > 1 {
                if "client" == sliced(app.argv[1]) {
                    core.special_action = SPECIAL_START_CLIENT
                } else if "server" == sliced(app.argv[1]) {
                    core.special_action = SPECIAL_START_SERVER
                }
            }
            app.user_data = core
            core.start_game(app)
        case APP_TICK:
            core.tick_game(app)
        case APP_STOP:
            core.stop_game(app)

        case APP_CODE_LOAD:
        case APP_CODE_UNLOAD: // do nothing for now
    }

    // if event == APP_TICK {
    //     global tick: i32
    //     tick++
    //     if tick < 70
    //         return;
    //     tick = 0
    // }
    // log(&event)
    // std_print(app, true) log()
}


#macro TIMED_CODE(T, CODE)
global timed_step_ ## #line: i32
if timed_step_###line++ > T {
    CODE
    timed_step_###line = 0
}
#endmacro

global display_game: bool = true

global window: WindowContext*;

global enable_free_camera: bool
global enable_entity_info: bool

enum FocusedElement {
    FOCUS_GAME,
    FOCUS_CHAT,
}
global focused_element: FocusedElement = FOCUS_GAME

struct Player {
    entity_id: UUID;
    // entity_id: Entity*; // can't be pointer if we step through the frames

    online_player: bool;
    joystick_id: i32; // -1 indicates keyboard player

    deadzone: f32 = 0.1; // some controllers are great, some are terrible and require a high deadzone
}
enum SpecialAction {
    SPECIAL_NONE,
    SPECIAL_START_SERVER,
    SPECIAL_START_CLIENT,
}
struct Code {
    func: fn(void*);
    data: void*;
    ticks: i32; // ticks until called
}
struct GameCore {
    world: World*;
    
    players: Array<Player>;

    pause_game: bool; // debug
    current_frame: i32;

    chat: ChatWidget;

    delayed_code: Array<Code>;

    special_action: SpecialAction;

    debug: DebugModule;

    fn start_game(app: AppInstance*) {
        // window = CreateWindow(1400,600)
        window = CreateWindow(800,600)
        InitEntityInfos()

        client.set_callback(net_callback, this)
        server.set_callback(net_callback, this)


        window.camera_zoom = 20

        world = LoadWorld()

        chat.init(0,0,window.width, window.height)

        debug.init(world)

        refresh_local_players()

        if special_action != SPECIAL_NONE {
            chat.editing = true
            window.setInput(GLFW_KEY_ENTER, true)
            window.setInput(GLFW_KEY_ENTER, false)
            delayed_code.add(Code{press_t, this})
            fn press_t(data: void*) {
                core: GameCore* = data
                core.chat.editing = false
            }
            if special_action == SPECIAL_START_CLIENT {
                chat.input_message.clear()
                chat.input_message.append("/connect")
            } else if special_action == SPECIAL_START_SERVER {
                chat.input_message.clear()
                chat.input_message.append("/start")
            }
        }

        keyboard_player := players.add()
        keyboard_player_entity := world.add_entity(0,0,1,1,ENTITY_BLOB)
        keyboard_player.entity_id = keyboard_player_entity.id
        keyboard_player.online_player = false
        keyboard_player.joystick_id = -1
    }
    fn tick_game(app: AppInstance*) {
        if app
            app.running = window.running

        FillColor(window, Color{0.2,0.2,0.2})

        window.enableUISpace(false)
        //######################
        // GAME STUFF
        //######################
        
        if focused_element == FOCUS_GAME {
            if window.isKeyPressed(GLFW_KEY_ESCAPE) {
                pause_game = !pause_game
                if !pause_game {
                    debug.EraseFutureFrames(current_frame)
                }
            }
            if window.isKeyPressed(GLFW_KEY_I) {
                enable_entity_info = !enable_entity_info
            }
        }

        if display_game {
            global refresh_ticks: i32
            refresh_ticks++ // keep ticking, as soon as game is unpaused we will refresh local players, refreshing players while paused won't work since adding new entities could mess things up

            if !pause_game {
                if refresh_ticks > 30 {
                    refresh_local_players()
                    refresh_ticks = 0
                }
                if current_frame == 0
                    debug.SaveFrame(current_frame)
                
                game_logic()

                update_player_movement()
                world.update(window)

                refresh_network()

                current_frame++
                debug.SaveFrame(current_frame)
            } else {
                if focused_element == FOCUS_GAME {
                    fast_step := window.isKeyDown(GLFW_KEY_LEFT_SHIFT)
                    if window.isKeyPressed(GLFW_KEY_LEFT) || (fast_step && window.isKeyDown(GLFW_KEY_LEFT)) {
                        if debug.is_valid_frame(current_frame-1) {
                            current_frame--
                            debug.RestoreFrame(current_frame)
                        }
                    }
                    if window.isKeyPressed(GLFW_KEY_RIGHT) || (fast_step && window.isKeyDown(GLFW_KEY_RIGHT)) {
                        if debug.is_valid_frame(current_frame+1) {
                            current_frame++
                            debug.RestoreFrame(current_frame)
                        }
                    }
                }
            }

            render_world()
        }
        if focused_element == FOCUS_GAME {
            if window.isKeyDown(GLFW_KEY_LEFT_CONTROL) && window.isKeyPressed(GLFW_KEY_S) {
                SaveWorld("bin/world.dat",world)
            }
            if window.isKeyDown(GLFW_KEY_LEFT_CONTROL) && window.isKeyPressed(GLFW_KEY_L) {
                LoadWorld("bin/world.dat",world)
            }
        }

        window.enableUISpace(true)
        
        // ###################
        // MENU STUFF
        // ###################
        temp: StringBuilder
        defer temp.cleanup()

        if display_game {
            // render chat at bottom left corner
            chat.w = window.width * 0.3
            chat.h = window.height * 0.25
            chat.x = 0
            chat.y = window.height - chat.h
            // TIMED_CODE(60, log(&chat))
            chat.render(window)

            if chat.editing
                focused_element = FOCUS_CHAT
            else
                focused_element = FOCUS_GAME
        }

        if !display_game {
            font := window.defaultFont()
            title_text_size := 40
            option_text_size := 30
            title_color := Color{1,1,1}
            option_color := Color{1,1,1}
            highlight_color := Color{0.3,1,0.7}
            
            temp.clear()
            temp.append("Dungeon crawler No. 89")
            
            title_w := font.width_of_text(temp.sliced(), title_text_size)
            DrawText(window, window.width / 2 - title_w / 2, window.height / 8, title_text_size, temp.sliced(), title_color)

            layout_x := 10
            layout_y := window.height / 3 + 100

            enum OptionButton {
                OPTION_PLAY,
                OPTION_OPTIONS,
                OPTION_QUIT,
            }
            a := OPTION_OPTIONS
            options: char[][3] {
                "Play",
                "Options",
                "Quit"
            }
            mx := window.getMouseX()
            my := window.getMouseY()
            pressed := -1
            for @ptr options {
                temp.clear()
                temp.append(*it)

                box := Box{layout_x, layout_y, 0, option_text_size}
                box.w = font.width_of_text(temp.sliced(), option_text_size)

                // log(mx," ",my," ",&box)
                if box.inside(mx, my) {
                    DrawText(window, box, temp.sliced(), highlight_color)
                    // if pressed, do action
                    if window.isKeyPressed(GLFW_MOUSE_BUTTON_1) {
                        pressed = nr
                    }

                    // Temporary debug code
                    if nr == cast<i32>OPTION_OPTIONS && window.isKeyDown(GLFW_MOUSE_BUTTON_1) {
                        new_box := box
                        new_box.x += new_box.w + 10
                        DrawText(window, new_box, "incomplete", Color{1,0.5,0.5})
                    }
                } else {
                    DrawText(window, box, temp.sliced(), option_color)
                }
                layout_y += option_text_size
            }

            switch pressed {
            case OPTION_PLAY:
                // Play
                transition_to_game()
            case OPTION_OPTIONS:
                // options
                // render other options
            case OPTION_QUIT:
                // quit
                window.close()
            }
        }

        //######################
        //  DEBUG STUFF
        //######################
        
        layout_y: f32 = 0

        fps: StringBuilder
        fps.append(cast<i32>(window.delta*1000))
        fps.append(".")
        fps.append((cast<i32>(window.delta*10000)) % 10)
        fps.append(" ms")
        
        DrawText(window, 0, layout_y, 20, fps)
        layout_y += 20

        temp.clear()
        temp.append("frame: ")
        temp.append(current_frame)
        if pause_game {
            temp.append(" (")
            temp.append(debug.last_frame-debug.saved_frames+1)
            temp.append("-")
            temp.append(debug.last_frame)
            temp.append(")")
        }
        DrawText(window, 0, layout_y, 20, temp.sliced())
        layout_y += 20
        
        temp.clear()
        temp.append("zoom: ")
        temp.append(window.camera_zoom)
        DrawText(window, 0, layout_y, 20, temp.sliced())
        layout_y += 20

        layout_y = window.height - 5
        text_h: f32 = 18
        text_w: f32 = 0
        font := window.defaultFont()

        #macro TEXT(TXT)
            temp.clear()
            temp.append(TXT)
            text_w = font.width_of_text(temp.sliced(), text_h)
            DrawText(window, window.width - text_w - 5, layout_y, text_h, temp.sliced())
            layout_y -= text_h
            temp.cleanup()
        #endmacro

        // text is rendered bottom-up
        TEXT("WASD or left joystick to move")
        TEXT("shift or right bumper to sprint")
        TEXT("C for free camera, arrow keys to move")
        TEXT("scroll to zoom, when free camera")
        TEXT("ESCAPE to pause, arrow keys to step frames")
        TEXT("shift + arrow keys to step faster")

        for @ptr delayed_code.sliced() {
            if it.ticks <= 0 {
                it.func(it.data)
                delayed_code.remove(nr)
                nr--
            } else {
                it.ticks--
            }
            
        }
        delayed_code.clear()

        RefreshWindow(window)
    }
    fn stop_game(app: AppInstance*) {
        DestroyWindow(window)
    }

    fn refresh_local_players() {
        global prev_present_joysticks: Array<bool>

        if prev_present_joysticks.size() == 0 {
            prev_present_joysticks.resize(GLFW_JOYSTICK_LAST+1)
            // bools should be zeroed
        }
        
        for 0..GLFW_JOYSTICK_LAST+1 {
            is_present := glfwJoystickPresent(nr)
            if is_present == prev_present_joysticks[nr]
                continue
            prev_present_joysticks.ptr[nr] = is_present
            
            joystick_id := nr
            if is_present {
                // connect
                log("Connect joystick ",joystick_id, " ",glfwGetJoystickName(joystick_id))

                if !glfwJoystickIsGamepad(joystick_id) {
                    log("WARNING: Joystick ",joystick_id, " isn't a gamepad (glfwJoystickIsGamepad() == false).")
                }

                player := players.add()
                player.online_player = false
                player.joystick_id = joystick_id
                ent := world.add_entity(0,0,1,1,ENTITY_BLOB)
                player.entity_id = ent.id

                // add player to network

                name := glfwGetJoystickName(joystick_id)

                // TODO: Temporary, my joystick is terrible and randomly moves around between -0.8 and 0.8 so I have to set a high deadzone. There should be a options menu for setting deadzones and controller button bindings. While you're at it, design the menu to display the raw input from the controller, whether a button is pressed, the value of the joystick axes.
                if "Xbox Controller" == sliced(name) {
                    player.deadzone = 0.9
                }
            } else {
                // disconnect
                log("Disconnect joystick ",joystick_id)

                for 0..players.len {
                    plr := players.get_unsafe(nr)
                    if plr.joystick_id != joystick_id
                        continue

                    // remove player from network
                    world.remove_entity(plr.entity_id)
                    players.remove(nr)
                    break
                }
            }
        }
    }
    fn refresh_network() {
        // TODO: Add remove entities in batches. A net message that adds/removes multiple entities
        if server.is_active() || client.is_active() {
            if world.removed_entities.size() > 0 {
                for @ptr world.removed_entities.sliced() {
                    msg: NetRemove
                    msg.id = *it
                    data := Slice<char>{cast<char*>&msg, sizeof msg}
                    if is_server {
                        server.send(data)
                    } else {
                        client.send(data)
                    }
                }
            }
            
            // if world.added_entities.size() > 0 {
            //     for @ptr world.added_entities.sliced() {
            //         ent := world.get_entity(*it)
            //         log("send ", ent.id)
            //         msg: NetSpawn
            //         msg.pos = ent.pos
            //         msg.size = ent.size
            //         msg.entity_info = ent.entity_info
            //         msg.id = ent.id
            //         data := Slice<char>{cast<char*>&msg, sizeof msg}
            //         if is_server {
            //             server.send(data)
            //         } else {
            //             client.send(data)
            //         }
            //     }
            // }
            world.added_entities.clear()
            world.removed_entities.clear()

            global step: i32
            step++
            if step > 4 {
                step = 0
                iter := world.entities.create_iterator()
                while world.entities.iterate(&iter) {
                    ent := iter.ptr
                    if ent.flags & ENTITY_FLAG_ONLINE
                        continue

                    msg: NetPosition
                    msg.pos = ent.pos
                    msg.vel = ent.vel
                    msg.id  = ent.id
                    data := Slice<char>{cast<void*>&msg, sizeof msg}
                    if is_server {
                        server.send(data)
                    } else {
                        client.send(data)
                    }
                }
            }
        }
    }
    fn update_player_movement() {

        for @ptr player: players.sliced() {
            entity := world.get_entity(player.entity_id)
            if player.online_player
                continue

            real_speed := PLAYER_SPEED
            if player.joystick_id == -1 {
                if focused_element == FOCUS_GAME {
                    if window.isKeyDown(GLFW_KEY_LEFT_SHIFT)
                        real_speed *= 2

                    if window.isKeyDown(GLFW_KEY_W) {
                        entity.vel.y = real_speed
                    } else if window.isKeyDown(GLFW_KEY_S) {
                        entity.vel.y = -real_speed
                    } else {
                        entity.vel.y = 0
                    }
                    if window.isKeyDown(GLFW_KEY_A) {
                        entity.vel.x = -real_speed
                    } else if window.isKeyDown(GLFW_KEY_D) {
                        entity.vel.x = real_speed
                    } else {
                        entity.vel.x = 0
                    }
                }
            } else {
                state: GLFWgamepadstate
                glfwGetGamepadState(player.joystick_id, &state)

                axis_x := state.axes[GLFW_GAMEPAD_AXIS_LEFT_X]
                axis_y := state.axes[GLFW_GAMEPAD_AXIS_LEFT_Y]

                if state.buttons[GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER] == GLFW_PRESS
                    real_speed *= 2

                // raxis_x := state.axes[GLFW_GAMEPAD_AXIS_RIGHT_X]
                // raxis_y := state.axes[GLFW_GAMEPAD_AXIS_RIGHT_Y]
                
                // log(axis_x," ",axis_y)

                deadzone := player.deadzone
                if axis_x < -deadzone || axis_x > deadzone
                    entity.vel.x = real_speed * axis_x
                else
                    entity.vel.x = 0
                if axis_y < -deadzone || axis_y > deadzone
                    entity.vel.y = -real_speed * axis_y
                else
                    entity.vel.y = 0
            }
        }
    }
    fn transition_to_game() {
        display_game = true
    }

    fn render_world() {
        // ############
        //  CAMERA + 
        // ############
        {
            if focused_element == FOCUS_GAME && window.isKeyPressed(GLFW_KEY_C) {
                enable_free_camera = !enable_free_camera
            }
            if !enable_free_camera {
                force_power: f32 = 8
                extra_visibility: f32 = 6 // amount of tiles (since each tile is one unit)

                // TODO: Camera should follow the player.
                //   If local co-op then camera should move and zoom out to
                //   follow all players.
                targets: Array<vec2>
                for @ptr player: players.sliced() {
                    if player.online_player
                        continue
                    ent := world.get_entity(player.entity_id)
                    targets.add(ent.pos + ent.size / 2.0)
                }
                cam_pos := vec2{window.camera_x, window.camera_y}

                target: vec2
                for @ptr targets.sliced() {
                    target = target + *it
                }
                if targets.len > 0 {
                    target = target / targets.len
                }

                force: vec2 = (target - cam_pos) / force_power

                if targets.len > 0 {
                    low_x : f32 = 999999999.0
                    low_y : f32 = 999999999.0
                    high_x: f32 = -9999999999.0
                    high_y: f32 = -9999999999.0
                    for @ptr targets.sliced() {
                        if it.x < low_x
                            low_x = it.x
                        if it.x > high_x
                            high_x = it.x
                        if it.y < low_y
                            low_y = it.y
                        if it.y > high_y
                            high_y = it.y
                    }

                    // Extra zoom so that the players can see if they walk into monsters or walls. Without it, the code would zoom in as much as possible as long as all players are visible.
                    low_x  -= extra_visibility
                    low_y  -= extra_visibility
                    high_x += extra_visibility
                    high_y += extra_visibility

                    // +1 because target stores the center of the player, we want the corners 0.5 + 0.5 = 1
                    // this assumes all players are 1 unit in size.
                    width := high_x - low_x +1
                    height := high_y - low_y +1

                    size := width
                    screen_s := window.width
                    ratio := cast<f32>window.height / cast<f32>window.width
                    if height > width * ratio {
                        size = height
                        screen_s = window.height
                    }

                    // entity to screen calculation
                    // screen_w = window.camera_zoom * (high_x - low_x)
                    // window.width / 

                    target_zoom := screen_s
                    if size >= 1.0
                        target_zoom = screen_s / (size)
                    

                    force_zoom := (target_zoom - window.camera_zoom) / (force_power * 1.5) // the constant is tweaked to be similar to force for camera position
                    window.camera_zoom += force_zoom
                }
                
                window.camera_x += force.x
                window.camera_y += force.y
            } else {
                // CAMERA MOVEMENT FOR DEBUG MODE
                // TODO: Debug mode where you can freely move the camera.
                if focused_element == FOCUS_GAME {
                    speed := CAMERA_SPEED * window.delta
                    speed /= window.camera_zoom
                    if window.isKeyDown(GLFW_KEY_LEFT_SHIFT) {
                        speed *= 2
                    }
                    if window.isKeyDown(GLFW_KEY_DOWN) {
                        window.camera_y -= speed
                    } else if window.isKeyDown(GLFW_KEY_UP) {
                        window.camera_y += speed
                    }
                    if window.isKeyDown(GLFW_KEY_LEFT) {
                        window.camera_x -= speed
                    } else if window.isKeyDown(GLFW_KEY_RIGHT) {
                        window.camera_x += speed
                    }
                }
                scroll := window.getScrollY()
                if scroll > 0 {
                    window.camera_zoom *= 1.04;
                } else if scroll < 0 {
                    window.camera_zoom *= 0.96;
                }
            }
        }


        // ############
        // TILES
        // ############
        {
            iter := world.chunks.create_iterator()
            while world.chunks.iterate(&iter) {
                chunk := iter.ptr
                // log(chunk.x," ",chunk.y)

                for 0..world.chunk_size*world.chunk_size {
                    tx := nr % world.chunk_size
                    ty := nr / world.chunk_size

                    type := chunk.tiles.ptr[nr].tile_info

                    if type == cast<i32>TILE_NONE
                        continue
                    
                    w := 1
                    h := 1
                    x := chunk.x * world.chunk_size + tx
                    y := chunk.y * world.chunk_size + ty
                    x *= w
                    y *= h
                    
                    info := &tile_infos.ptr[type]
                    if info.texture {
                        DrawTexture(window, x, y, w, h, info.texture)
                    } else {
                        FillRect(window, x, y, w, h, info.color)
                        DrawSquare(window, x, y, w, h, Color{1,1,1}, thickness = 0.05)
                    }
                }
            }
        }
        // ############
        // ENTITIES
        // ############
        iter := world.entities.create_iterator()
        while world.entities.iterate(&iter) {
            it := iter.ptr

            info := entity_infos.get_unsafe(it.entity_info)
            if info.texture {
                DrawTexture(window, it.pos.x, it.pos.y, it.size.x, it.size.y, info.texture)
            } else {
                FillRect(window, it.pos.x, it.pos.y, it.size.x, it.size.y, info.color)
            }
        }
        if enable_entity_info {
            iter := world.entities.create_iterator()
            while world.entities.iterate(&iter) {
                it := iter.ptr

                info := entity_infos.get_unsafe(it.entity_info)

                
                font := window.defaultFont()
                th: f32 = 0.4
                str: StringBuilder
                str.append("pos: ")
                str.append(it.pos.x)
                str.append(", ")
                str.append(it.pos.y)
                str.append("\n")
                str.append("vel: ")
                str.append(it.vel.x)
                str.append(", ")
                str.append(it.vel.y)

                w, h := font.size_of_text(str.sliced(), th)

                {
                    // this code prevents drastic changes to the entity info box when decimals of floats change
                    struct RenderState {
                        w: f32
                    }
                    global states: Array<RenderState>
                    if states.size() <= iter.index
                        states.resize(iter.index + 1)
                    
                    if states.ptr[iter.index].w == 0
                        states.ptr[iter.index].w = w

                    target_w := w
                    w = states.ptr[iter.index].w

                    if target_w > w
                        w = target_w

                    force := (target_w - w) / 20
                    w += force

                    states.ptr[iter.index].w = w
                }

                layout_x := it.pos.x + it.size.x
                layout_y := it.pos.y + it.size.y - h
                padding := 0.1
                FillRect(window, layout_x - padding, layout_y -padding, w + padding*2,h+2*padding, Color{0,0,0,0.5})
                DrawText(window, layout_x, layout_y, th, str.sliced())
                // log(it.pos.y)
            }
        }

        // ##############
        //    DEBUG
        // ##############
        
        // Rect and text at origin
        // FillRect(window, 0,0, 0.0, 0.1, Color{0,0,0})
        // DrawText(window, 0.0, 0.0, 1.0, "Hello", Color{0,0,0})

    }
    fn game_logic() {
        // global id: UUID
        // global dir: bool
        // if current_frame == 0 {
        //     ent := world.add_entity(0,5,1,1,ENTITY_BLOB)
        //     id = ent.id
        // }

        // ent := world.get_entity(id)
        // if ent.pos.y > 7 {
        //     dir = false
        // } else if ent.pos.y < 3 {
        //     dir = true
        // }
        // ent.vel.y = 0.8
        // if !dir
        //     ent.vel.y *= -1
    }
}

