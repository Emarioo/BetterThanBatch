// Import OS to get printi, printc, prints
// OS also imports Basic which contains Slice<T>
#import "OS"

// Basic overloading
fn log(t: i32){
    printi(cast<i64>t)
}
fn log(t: char){
    printc(t)
}
fn log(t: bool){
    if(t)
        prints("true");
    else
        prints("false");
}
fn log(t: Slice<char>){
    prints(t);
}

#define LOG(X,...) log(X); LOG(...);
#define LOG()

LOG("Hello ", 007, " are you ",false && true);

// Polymorphic overloading
fn plog<T>(t: T, k: bool){
    prints("bool, sizeof(T):");
    printi(cast<i64>(sizeof T))
    printc('\n')
}
fn plog<T>(t: T, k: i32){
    prints("i32, sizeof(T):");
    printi(cast<i64>(sizeof T))
    printc('\n')
}
plog<bool>(false, 92)
plog<f32>(25.23, false)