@TEST_CASE(macro_recursion)

#macro ADD(X,...) X + ADD(...)
#macro ADD(X) X

_test 1+2; ADD(1,2);
_test 4+9; ADD(4,9,);
ADD() // should not cause an error

#macro REV(F,...) REV(...), F
#macro REV(F) F

arr: i32[] { REV(0,1,2) }
_test arr.ptr[0]; 2;
_test arr.ptr[1]; 1;
_test arr.ptr[2]; 0;

// #macro CHAOS(F,S,...) S CHAOS(...) F
// #macro CHAOS

#macro NOR(X,...) !X || NOR(...)
#macro NOR(X) !X

_test 1; NOR(0);
_test 1; NOR(1,0,1,0);

_test 1; NOR(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
_test 1; NOR(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1);
_test 0; NOR(1);
_test 0; NOR(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1);

// TODO: More and better tests

// #macro ORS(T,X,...) T==X || ORS(T,...)
// #macro ORS(T,X) T==X

// #macro PART0 a,b
// #macro PART1 1,2

// ORS(t,b,c,d,e,f)
// ORS(type,#unwrap PART0,#unwrap PART1)