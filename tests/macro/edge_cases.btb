@TEST_CASE(variadic_macro)

#macro l0(a0,...) a0
#macro l1(...) l0(...)
#macro l2(a2) l1(a2)
l2(9) // should produce 9  (a bug at one point produced a2)
l1(1,2) // should produce 1 (a bug at one point produced 1,2)

#macro k0(X,...) X.. k0(...)
#macro k1(...) k1(...)
k0(0,1) // produces 0.. 1..
k1(0,1) // produces 0.. 1..

#macro n(...) [ ... ]
n(na,na) // should produce [ na, na ]

#macro print(...) { print_inner(...) }
#macro print_inner(X,...) std_print(X); print_inner(...)
#macro gotoxy(x,y) print("\033[",(x),";",(y),"H")
gotoxy(0,0) // it should not produce x and y but zeros. There was a bug where x and y were produced and the 0,0 arguments ignored or forgotten


#macro log(...) { log_inner(...) }
#macro log_inner(X, ...) p(X); p(' '); log_inner(...)
#macro log_inner(X) p(X); p('\n')

a log("a", "b") // should produce one newline after } a bug at one point made a new line before the } on the ) token

#macro AA 3
#macro AB 3 4
l2(#unwrap AA)
l1(#unwrap AB)



#macro base(x,y,F) if(flags & F) { x - y }
#macro log(x,y) base(x,y, LOG_TYPE)
#macro ENTER yoo, hi
log(ENTER,other) // should produce   if(flags & LOG_TYPE) { yoo, hi - other }