/*
    
*/

@TEST_CASE(parenthesis_depth)

#macro add(x,y) x + y
add(fun(me), 2)
// the first ) should not end the macro, parenthesis should accumulate

@TEST_CASE(macro_other2)

#macro no 1
#macro yes no

yes+1 // at one point E1200 occured, the last token from yes was flagged as newline, bug in preprocessor, this was due to nested macros

@TEST_CASE(macro_other)
// single- and multiline definitions
#macro SINGLE i am SINGLE

#macro MULTI
i am
not 
SINGLE #endmacro

SINGLE SINGLE
SINGLE MULTI
MULTI

// zero tokens
#macro ZERO #endmacro
Undisturbed ZERO text

// redefine
#macro SINGLE oh no
SINGLE

// multi evaluation (recursive implementation)
#macro ONE 1111 TWO 1111

#macro TWO 2222 TRI 2222
#macro TRI 3333

TWO ONE
TWO

// with arguments
#macro Base(T, NAME) T NAME;
#macro Alt(T) hole..T
#macro Integer int

Base(Integer, Alt(suce))

// inner argument evaluation
#macro Base(A) new A()
#macro Alt(B) Base(B)
Alt(int)

// Recursion
#macro REV(F,...) REV(...) F
#macro REV(L) L
REV(1,2,3,4)

// Infinite Recursion
#macro Trick Hej Trick0
#macro Trick0 Hej Trick

#macro NotBug(A,...) NotBug0(...)
#macro NotBug0(...) NotBug(A,B,...)

// increment
#macro NotBug(...) Here NotBug(0,...)
#macro NotBug(a,a,a,a,a,a) #endmacro
NotBug()

// print
#macro Mass(M,...) print M; Mass(...)
#macro Mass(M) print M
Mass(Hey, you, cool?)

// Empty base
#macro Mass(M,...) print M Mass(...)
#macro Mass() #endmacro


@TEST_CASE(tuple_macro)

#macro DEF_TUPLE_NAMED(struct_name, ...) struct struct_name { DEF_TUPLE_MEMBERS(...) }
#macro DEF_TUPLE_NAMED_MEMBERS(member0, ...) member0; DEF_TUPLE_NAMED(...)
#macro DEF_TUPLE(struct_name, ...) struct struct_name { DEF_TUPLE_MEMBERS(...) }
#macro DEF_TUPLE_MEMBERS(member0, ...) m ## #counter: member0; DEF_TUPLE_MEMBERS(...)

#import "Math"
#import "Lang"
#import "Logger"
enum Direction {
    a,b
}

DEF_TUPLE(Collision, bool, Direction, vec2)
DEF_TUPLE_NAMED(Collision2, bool, Direction, vec2)

a: Collision
log(&a)

b: Collision2
log(&b)