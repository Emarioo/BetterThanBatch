@TEST_CASE(access)
struct Base {
    mem: i32;
    fn hey() -> i32 {
        return mem; // abreviated access of this.mem
    }
    fn incr() {
        mem = 1 + hey(); // abreviated access of this.hey()
    }
}
base: Base;
*cast<i32*>&base.mem
// Bug 0: Parsing issues, this happens: *& ( (cast<i32*>base) .mem )
//   the member access should happen first though.
base.incr();

struct A {
    n: i32;
}
a: A
p: i32* = &a.n;
*p = 23
_test 23; a.n;

// not implemented yet
// @TEST_CASE(shortcuts)

// struct Base {
//     mem: i32;
// }
// base := Base{}
// base = Base{2}

// base2: Base = .{3}
// base2 = .{7}

struct Num {
    x: i32
}
struct Ore {
    n: Num;
    fn nump() -> Num* {
        return &n
    }
    fn num() -> Num {
        return Num{4}
    }
}
o: Ore
o.nump().x // should be allowed
@TEST_ERROR(E1) o.num().x  // we expect error for now but in the future we will allow this

@TEST_CASE(slice_method)

fn sl() -> char[] { return "ok" }
_test 2; sl().len // generator missed a push/pop at one point

@TEST_CASE(assign_add)

struct Box {
    head: i32;
}

box: Box
p := &box

p.head += 5 // x64_gen crashed, X64_REG_INVALID appeared somehow

@TEST_CASE(array_in_struct)

struct Box {
    items: i32[20]
}
box: Box

// should cause error, box.items evaluates to a slice
// *(box.items + 9 * sizeof i32)

box.items[9] = 3
_test 3; box.items[9]
_test 3; *(box.items.ptr + 9 * sizeof i32)

_test 8; sizeof (box.items) // items is evaluated to a pointer, not a slice
_test 20; box.items.len // even though items is a evaluated to a pointer, since it's an array of a struct and we know the size, .len is allowed
_test 80; sizeof box


struct A {
    x: i32[5];

    fn ok() {
        n := x
        a := x[2]
        _test 3; *n;


        _test 9; a;
        // log(n," ",a)
    }
}
a: A
a.x[0] = 3
a.x[2] = 9
a.ok()

// TODO: Test arrays in structs more thoroughly.

@TEST_CASE(indexing_slice)

// move test case elsewhere
fn get() -> Slice<i32> { return Slice<i32>{null,5}; }

_test 8; &(get().ptr[2])

@TEST_CASE(methods)

struct A {
    n: i32;
    fn k() -> i32 { 
        return u();
    }
    fn u() -> i32 {
        return n + 2
    }
}
a: A = A{23}
_test 25; a.k()

@TEST_CASE(methods_poly)
struct Poly<T> {
    t: u32;

    fn first() -> i32 {
        return second();
    }
    fn second() -> i32 {
        // #import "Logger"
        // log("second, size",sizeof T)
        acc_size += sizeof T
        return 0;
    }
}
global acc_size: i32

a: Poly<i32>;
b: Poly<i64>;

a.first();
_test acc_size;  4
b.first();
_test acc_size;  12

@TEST_CASE(nested_struct)

struct Tuf {
    ad: i32;
    fn hi() {
        struct Okay {
            n: i32
        }
        a: Okay
    }
}
t: Tuf
t.hi()

struct Dup {
    bc: i32
}
@TEST_ERROR(ERROR_ANY) struct Dup {
    a: f32
}

@TEST_CASE(circular_structs)

#import "./struct2"

fun_a()
fun_b()