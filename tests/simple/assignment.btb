
// TODO: Test other types than i32 including structs and enums.
// TODO: Add tests to trigger certain errors (redeclaring a variable for example, same scope and different scope)
// TODO: Test assignment in expressions (not just statements)

@TEST_CASE(globals)
#import "OS"

global num: i32;
main();
fn main() -> i32{
    // Bug 0: The address of global variables must be set before they are used in
    //  functions. Functions were evaluated before everything including globals which cause the issue.
    return num;
}

global str: char*;
str = Allocate(16);
*str; // This caused a crash at some point in time

// TODO: Test that you can access globals from another file.

@TEST_CASE(many_assignments)

fn fvoid() {}
@TEST_ERROR(ERROR_INVALID_TYPE) wawa := fvoid(); // should fail

// standard
a := 1
b: i32 = 1
c: i32;
c = 1
d: i64 = cast<i32>1

// multiple
fn many() -> i32, i32, i32 {
    return 1, 2, 3
}


e, f, g := many() // declaration with all values
h, j := many() // declartion with skipped values

a = many() // skipping return values
a, b, c = many() // all return values
@TEST_ERROR(ERROR_TOO_MANY_VARIABLES) a, b, c, d = many(); // should fail
// This doesn't work anymore, why: @TEST_ERROR( ERROR_TOO_MANY_VARIABLES @TEST_ERROR( ERROR_TYPE_MISMATCH a, b, c, d = many(); // should fail

// shadowing is not implemented yet so we need to scope the assignments
{
    a: i32 = many()
}
{
    a, b: i32 = many()
    _test 1; a
    _test 2; b
}
{
    c: i32; // declare in advance
    a, b: i32, c = many() // c fails?
}
{
    a, b, c: i32 = many();
    _test 1; a
    _test 2; b
    _test 3; c
}
{
    a: i64, b: i32 = many() // does this fail or does it cast?
}


{
    str: char[20];
    str.ptr[0] = 5 // crashed at one point

    
    s: char[20];
    n: u64 = 5;
    s.ptr[10] = n + '0'; // push and pop was messed up where a ptr was moved instead of n+'0' at one point
}