
// single- and multiline definitions
#define SINGLE i am SINGLE

#multidefine MULTI
i am
not 
SINGLE #enddef

SINGLE SINGLE
SINGLE MULTI
MULTI

// zero tokens
#define ZERO #enddef
Undisturbed ZERO text

// redefine
#define SINGLE oh no
SINGLE

// multi evaluation (recursive implementation)
#define ONE 1111 TWO 1111

#define TWO 2222 TRI 2222
#define TRI 3333

TWO ONE
TWO

// with arguments
#define Base(T, NAME) T NAME;
#define Alt(T) hole..T
#define Integer int

Base(Integer, Alt(suce))

// inner argument evaluation
#define Base(A) new A()
#define Alt(B) Base(B)
Alt(int)

// Recursion
#define REV(F,...) REV(...) F
#define REV(L) L
REV(1,2,3,4)

// Infinite Recursion
#define Trick Hej Trick0
#define Trick0 Hej Trick

#define NotBug(A,...) NotBug0(...)
#define NotBug0(...) NotBug(A,B,...)

// increment
#define NotBug(...) Here NotBug(0,...)
#define NotBug(a,a,a,a,a,a)
NotBug()

// print
#define Mass(M,...) print M; Mass(...)
#define Mass(M) print M
Mass(Hey, you, cool?)

// Empty base
#define Mass(M,...) print M Mass(...)
#define Mass()
