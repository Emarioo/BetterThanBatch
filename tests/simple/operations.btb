

@TEST_CASE(arithmetic)
test 3; 1+2;
test 3; 1- -2;
test -1; 2-3;
test 6; -2*-3;
test 0; 2/3;
test 499; cast<i32>((0.5 % 0.15)*10000);

// TEST OPERATIONS WITH 64-bit numbers like 99999999999999!
// TODO: Not just the one below, loads more tests
test 1; 120331 < 999999999999999
test 0; 95679105467774 < 9999999999999 // very specific test which returned 1 at some point

test 1; 1.2 < 1.3;
test 0; 1.3004 < 1.3;
test 1; -4.0 <= -2.;
test 1; 9.09 <= 9.09;
test 0; -9.0 > 1.3;
test 1; 0.1 > -0.001;
test 1; 99999.0 >= 99998.99999999;
test 1; 99999.0 >= -2.0;
test 0; -4.0 >= -2.;
test 1; 1.0000009 == 1.0000009;
test 0; 1.0000009 == -1.0;
test 1; 3.2 != 4.02;
test 0; 3.2 != 3.2;

// TODO: Binary operations! with various sizes of integers, signed, unsigned, char...

fn @intrinsic round(v: f32) -> f32;
fn @intrinsic sqrt(v: f32) -> f32;

test 3; cast<i32>round(3.3);
test 4; cast<i32>round(3.7);
test 1; cast<i32>sqrt(1);
test 1; cast<i32>sqrt(2);
test 2; cast<i32>sqrt(3.9999999);

@TEST_CASE(many_math_ops)
// The test below is a little scuffed because of issues with precision.
// Python evaluates the math to this: -2159226 while this compiler gives this result: -2158333.
test -2158333; cast<i32>(100000*(5. / 6. - 7. )* 7. / 8. * 4. + (1. / 4. / (1. - 5. + 1. - 4. * 7. - 2. * 3. / 2. - (6. / 3. )/ 2. + (6. / 6. + 8. - 7. )+ 5. )));
test 69; 8+1*(5-8%6+4*3%1%7-4-7+7+(8+7))*4+5%(6/2+(6+8/4*1*5*2*6));

@TEST_CASE(special)

var: u32 = 2;
varf: f32 = -12415.92913
test -2; -var;
test 12415.92913; -varf;

a := 6;
pa := &a;
ppa := &pa;
test 6; *ppa[0]; // test precedence between deref and index operations

data: u32* = &var;
test 2; *cast<u32*>data;
// Bug 0: deref was performed before cast (issue in parser)

test 1; 3-1-1; // tests precedence

// test 1<<32; 0x0_0000_0000; // shl eax, cl would produce 1 so we must use shl rax, cl instead. ACTUALLY, C/C++ compilers uses eax, cl so 
// test 1<<32; 1; // shl eax, cl would produce 1 so we must use shl rax, cl instead. ACTUALLY, C/C++ compilers uses eax, cl so 
test cast<i64>1<<32; 0x1_0000_0000; // 64-bit

ptr: char* = null;
++(*cast<u64*>&ptr);
test cast<u64>1; ptr;

cast<u64>cast<char*>null
cast<u64>cast<void*>null
cast<u64*>cast<void*>null
@TEST_ERROR(ERROR_CASTING_TYPES) cast<u64*>cast<char*>null

// On error, program and tests won't execute
// but we want to test errors without having a seperate
// case for just errors because it's inconvenient

/* Solution 1:
The annotation @TEST_ERROR will cause some the next expression or statement to not be generated but will be checked.
There are some exceptions. If, while and other bodies will be complicated to deal with so we don't allow it on those.
Declarations of variables, functions, structs and other stuff is also not allow for simplicity.
We may be able to do those but the compiler would need a feature to do things silently withoout generating or affecting code in some way? whaat? i don't know.
Do we need to handle the annotation in SO MANY places. Parsing expressions, statements and other ones. We wouldn't even run code just ignore the annotation TEST_ERROR.
Then handle annotation in type checker, generator as well kind of I guess. Hmm... Maybe we have an annotation called @no-code which allows stuff to go from parser to
generator but then not generate the actual code. This annotation could have multiple uses cases but for now @TEST_CASE can leverage that annotation.

*/
@TEST_CASE(conversions)

// unsigned conversion, floats should not be negative
test 1; cast<f32>cast<u32>0x8100_0001 > 0.0;
test 1; cast<f32>cast<u64>0x8100_0000_0000_0001 > 0.0;
test 1; cast<f32>cast<u64>0x8100_0000_0000_0010 > 0.0;
test 1; cast<f32>cast<u64>0x8100_0000_0000_0011 > 0.0;

// TODO: Test float to integer conversions! Not just int to float.
// https://baseconvert.com/ieee-754-floating-point

test 17.0; cast<f32>cast<u64>0x0000_0000_0000_0011; // A bug at some point produced 18.0 instead of 17.0

test 1u; cast<u64>0x8000_0000_0000_0000 > 0u
test 1u; cast<u64>0x8000_0000_0000_0000 >= 0u
test 0u; cast<u64>0x8000_0000_0000_0000 < 0u
test 0u; cast<u64>0x8000_0000_0000_0000 <= 0u

test 23.0; cast<f32>cast<u8>23;
test 23.0; cast<f32>cast<u16>23;
test 23.0; cast<f32>cast<u32>23;
test 23.0; cast<f32>cast<u64>23;
test 23.0d; cast<f64>cast<u8>23;
test 23.0d; cast<f64>cast<u16>23;
test 23.0d; cast<f64>cast<u32>23;
test 23.0d; cast<f64>cast<u64>23;

// these conversions, divisions don't work properly
// sample0 = 47627486
// sample1 = 53253632
// t = cast<f64>sample0/cast<f64>2900000000; ///cast<f32>NS;
// // log("end",end,"t",t);
// t = cast<f64>sample1/cast<f64>2900000000; ///cast<f32>NS;

// TODO: Signed conversions of 8,16,32,64-bit integers and floats.
// TODO: f64

// This code caused a crash at one point.
t: f32 = 0;
t == 0;

@TEST_CASE(overflow)
/*
    Overflow cases with multiplication, addition, subtraction, and division needs to be tested.
    What should be the result though?
*/
#define T(t0,t1,n0,OP,n1) cast<t0> n0 OP cast<t1> n1

test 60000; T(u32, u32, 10000, *, 6);
// { @dump_bc
test 49000; T(u16, u8, 7000, *, 7);
// }
test 1; cast<u8>301 % cast<u8>258;
