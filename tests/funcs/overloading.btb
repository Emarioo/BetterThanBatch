@TEST_CASE(overload_with_casting)

fn say(v: i16) {
    // log("int");
}
fn say(v: i64) {
    // log("int64");
}
fn say(v: char) {
    // log("chr");
}
@TEST_ERROR(ERROR_OVERLOAD_MISMATCH) say(32)

fn say2(v: i16) {
    // log("int");
}
fn say2(v: char) {
    // log("chr");
}
say2(32) // should be fine, i32 is casted to i16

fn match(p: i32*) {
    _test 1; 0
}
// we should not accept match(i32*) as an overload because
// we don't want to implicitly cast u64 to a i32*
// it's strange behaviour and could cause bugs
// void* to i32* is fine and u64 to void* is fine
// User should explicitly do the casts to prevent bugs
// TODO: Test this with polymorphism, not use normal overload matching
@TEST_ERROR(ERROR_UNSPECIFIED) match(cast<u64>23)

@TEST_CASE(add_or_operator)
operator +(a: i32, b: i32) -> i32 {
    return a * b;
}
_test 20; 4 + 5;

struct i128 {
    x: i64;
    y: i64;
}
operator |(a: i128, b: i128) -> i128 {
    return i128{a.x|b.x, a.y|b.y};
}

flag0 := i128{5,8}
flag1 := i128{3,9}
result := i128{5,8} | i128{3,9}
_test flag0.x | flag1.x; result.x;
_test flag0.y | flag1.y; result.y;

@TEST_CASE(index_operator)
operator [](slice: Slice<char>, index: i64) -> i32 {
    return slice.ptr[index];
}
str := "Hello";
_test 'H'; str[0];

// str[2] = 'S'; // Not possible at the moment, how do we make it possible?
