@TEST_CASE(call_conventions)
struct Big { a: u64; b: u64; }
// Should throw error
fn @stdcall a(b: Big) {}


// return values are overwritten by push instructions
fn n() -> u8, u8, u8 { return 1, 2, 3 }
n();
// but not here
fn da() -> u8, u8 { return 1, 2 }
da();

// arguments give more space for pushed values
fn nf(a: i32, b: i32) -> u8, u8, u8 { return 1, 2, 4 }
nf(1,2);

// more complications
struct Big2 {
    a: i8;
    b: i8;
    c: i8;
}
fn nd(a: i32, b: i32) -> Big2 { return Big2{5,8,3} }

nd(1,2);


// fn n() -> u8, u8, u8 { return 1, 2, 3 }

// struct Big {
//     a: i8;
//     b: i8;
//     c: i8;
//     // d: i8;
// }
// // fn n() -> Big { return Big{5,8,3,23} }
// fn n() -> Big { return Big{5,8,3} }
// n();
// fn a() -> u8, u8, u8 { return 1,6,4 }
// a()


@TEST_CASE(func_syntax)

fn get() -> i32, i32 {
    return // this should not be recognized as a return with no arguments
        2, // we must not assume this is a statement
        6;
}

x,y := get()

@TEST_CASE(variable_accessibility)

struct A {
    n: i32 = 3;
    fn fun() {
        fn okay() {
            @TEST_ERROR(ERROR_ANY) _test 3; n; // okay is not a method, n is not available
        }
        okay()
    }
}
a: A
a.fun()

outer(9)

fn outer(arg: i32) {
    inner()
    fn inner() {
        @TEST_ERROR(ERROR_ANY) a := arg // arg should not be accesible from inner function
        @TEST_ERROR(ERROR_ANY) a := sizeof arg
    }
}

@TEST_CASE(if_problems)

fn func() {
    if(0) {
        // hi dude
        return
    }
}

func()

@TEST_CASE(default_args_err)

// at one point we got "Compiler bug IRON not defined"
enum Dust {
    RED,
    IRON,
}
fn cravin(x: Dust = IRON, msg: i32 = 23) { }
cravin(msg = 23)

fn pcravin<T>(x: Dust = IRON, msg: T = 23) { }
pcravin<i32>(msg = 23)

struct dat {
    xz: i32
    fn cravin(x: Dust = IRON, msg: i32 = 23) { }
    fn pcravin<T>(x: Dust = IRON, msg: T = 23) { }
}
d: dat
d.cravin(msg = 23)
d.pcravin<i32>(msg = 23)


fn okay() -> i32 {
    return 0
}
fn wrap(n: i32) {}

if false {
    
}
wrap(okay())