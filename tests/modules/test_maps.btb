@TEST_CASE(hash_map_test)
/*
    The tests assume that Array doesn't have a bug in it.
*/

#import "Map"
// math because we need random64
#import "Math"


struct Entry {
    key: i32;
    val: i32;
}

fn InsertValues(map: Map<i32,i32>*, entries: Array<Entry>*, count: u32) {
    for 0..count {
        random: u64 = random64();
        key: i32 = (random & cast<u64>0xFFFF_FFFF);
        val: i32 = (random >> 32);
        
        done := false;
        for @ptr entries.sliced_unsafe() {
            if it.key == key {
                it.val = val;
                done = true;
                break;   
            }
        }
        if done  continue
        
        map.set(key,val);
        entries.add(Entry{key,val});
    }
}
fn RemoveValues(map: Map<i32,i32>*, entries: Array<Entry>*, count: u32) {
    for 0..count {
        if entries.len == 0
            break;
            
        random: u64 = random64();
        index := random % cast<u64>entries.len;
        key: i32 = entries.ptr[index].key;
        
        entries.remove(index);
        map.remove(key);
    }
}

// returns number of failures
fn CheckValues(map: Map<i32,i32>*, entries: Array<Entry>*) -> u32 {
    failures := 0;
    for @ptr entries.sliced_unsafe() {
        val := map.get_unsafe(it.key);
        if val {
            // log("check",it.key,it.val,"?=",*val);
            if *val != it.val
                failures++;
        } else {
            // log("check",it.key,it.val,"null");
            failures++;
        }
    }
    return failures;
}
// returns number of failures
fn CheckIterator(map: Map<i32,i32>*, entries: Array<Entry>*) -> u32 {
    failures := 0;
    iter: MapIterator<i32,i32>;
    while map.iterate_unsafe(&iter) {
        // log(*iter.key,":",*iter.val);
        
        found := false;
        for @ptr entries.sliced_unsafe() {
            if it.key == *iter.key {
                if it.val != *iter.val
                    failures++;
            }
        }    
    }
    return failures;
}

fn TestMap(tableSize: u32, count: i32) -> u32 {
    map: Map<i32,i32>;
    entries: Array<Entry>;
    failures := 0;
    map.init(tableSize);
    
    InsertValues(&map, &entries, count);
    RemoveValues(&map, &entries, count / 3)
    
    failures += CheckValues(&map, &entries)
    
    factor := random_f32();
    map.remap(tableSize * (0.5 + 1.5 * factor));
    
    failures += CheckValues(&map, &entries)

    failures += CheckIterator(&map, &entries)
    
    // map.print()
    
    // log("Failures:",failures);
    return failures;
}
fn TestMapString(tableSize: u32, count: u32) {
    map: Map<Slice<char>,i32>;
    // map: Map<char[],i32>;
    map.init(tableSize);
    
    map.set("chicken",92)
    map.set("chicken2",123)
    map.set("chicken",932)
    
    map.print();
}

// TestMapString(5,10)

_test 0; TestMap(400,200);
_test 0; TestMap(4000,4000);
_test 0; TestMap(100,1000);

// fn TestDistribution(tableSize: u32, values: i32) {
//     map: Map<i32, i32>;
//     map.init(tableSize);
    
//     for 0..values {
//         ptr := map.get_unsafe(nr);
//         if !ptr
//             map.set(nr, 1);
//         else
//             map.set(nr, 1 + *ptr);
//     }
    
//     map.print();
// }