@TEST_CASE(inline_asm_stack)
a := asm<i32> {
    mov eax, 23
    push rax
}
_test 23; a;

struct Pack {
    x: i32;
    y: char;
}
b := asm<Pack> {
    mov eax, 'A'
    push rax
    mov eax, 5
    push rax
}

_test 5; b.x;
_test 'A'; b.y;

@TEST_CASE(inline_asm_labels)

_test 15; asm<i32> {
    mov ecx, 0
    mov eax, 0
loop_start:
    cmp ecx, 5
    je loop_end
    add ecx, 1
    add eax, ecx
    jmp loop_start
loop_end:
    push rax  // return value
}

@TEST_CASE(inline_assembly_stack)
// NOTE: There seems to be an infinite loop here if stack isn't aligned.
//   Bug perhaps? _test might assume 16-byte alignment (it calls write syscall on Linux which may cause the loop?)

// make sure the generator tracks push and pop from inline assembly
we_good(asm<i32>{push 1})

fn we_good(n: i32) {
    _test 1; n
}


more_params(asm<i32>(9, 2){
    pop rax
    pop rdx
    add eax, edx
    push rax
})

fn more_params(n: i32) {
    _test 11; n
}


// @TEST_CASE(variables_in_inline_asm)
// // TODO: Inline assembly, reading/writing to local variables
// //   What about structs? Artifical instruction perhaps?
// num := 65
// new_num := asm<i32> {
//     mov eax, [num]
//     add eax, 123
//     push rax
// }
