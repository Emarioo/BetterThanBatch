@TEST_CASE(base_typeinfo)

#import "Lang"
#import "String"
// #import "Logger"

// TODO: How do we test type information?
//  Check that the names aren't corrupt with odd characters?
//  Create some types and make sure they exist in the type array?

enum Flavour : u16 {
    STRAWBERRY,
    CHICKEN,
    CHOCOLATE,
}

struct Milkshake {
    temperature: f32;
    flavour: Flavour;
    size: i32;
}

found_enum := false;
found_struct := false;

strs := lang_strings.ptr;

for @ptr lang_typeInfos {
    if !it.type  continue; // some types are NONE

    name := Slice<char>{&lang_strings.ptr[it.name.beg], it.name.end-it.name.beg};
    
    // std_print(lang_TypeId{nr}) printc('\n')
    // std_print(it); printc('\n')
    // log(name)
    // prints(name) printc('\n')

    if name == "Milkshake" {
        found_struct = true;
        _test 12; it.size;
        _test 3; it.members.end - it.members.beg;
    } else if name == "Flavour" {
        found_enum = true;
        _test 2; it.size;
    }
}

_test true; found_enum;
_test true; found_struct;

@TEST_CASE(printing_types)
#import "Logger"
#import "Lang"

struct Soul {
    ko: i32;
    numsi: f32;
}
struct App {
    a: i32;
    soul: Soul;
    tr: bool;
}
app: App;
app.a = 932
app.tr = true
app.soul.numsi = 232.232
app.soul.ko = 2
// std_print_any(app, true);
std_print_any("yoo!", true);
// std_print_any(app, false);

// TODO: how to test this? At least we test that there are no compiler errors.