/*
    Debugging is hard to use automatic tests for.
    So we do them manually for now.
*/
@TEST_CASE(general)
#macro fail (*cast<u8*>null);

ok(3)
a := 9;
a *= 2;

// fail

fn ok(arg: i32){
    i := arg + 3;

    fail
}
@TEST_CASE(overloading)
fn hey(a: i32) {
    k := a;
}
fn hey() {
    a := 9
}
hey();
hey(23);

@TEST_CASE(types)

#import "Logger"
struct Cake {
    a: i32*;
    b: Cake*;
}

fn main() -> i32 {
    defer {
        log("Hi bro");
    }
    p: i32 = 23;
    cake: Cake = Cake{&p};
    cake2: Cake = Cake{null,&cake};
    hey(1);
    return 9;
}

fn hey(a: i64) -> i64 {
    k: i64 = a + 4;
    return k + 9;
}

// TODO: Enums

@TEST_CASE(debug_call_stack)

fn main() -> i32 {
    b := hey() + hey3();
    return b
}

fn hey3() -> i32 {
    a: i32 = 3
    return a + 2
}

fn hey() -> i32 {
    a: i32 = 3
    return a + 2
}

// @TEST_CASE(debug_asm_scope)

@TEST_CASE(debug_operator)

// there was a bug here where the debugger wasn't working, incorreclty generated DWARF debug information 
// It was due to preload which isn't a file and the fact that the preload contained an operator overloaded function (altough any function would do).
// Generating line statements for a file that doesn't exist did not make the debugger happy.

fn split(pattern: char[])  {
    pattern[0] // commenting out this line fixed the bug, causing the operator overload to be skipped
}

split(" ") // break point on this line did not work