@TEST_CASE(switch_integers)

fn @native printc(str: char);

msg := 9
out := 0
switch msg {
    case 1: {
        out = 1
    }
    case 5: {
        out = 5
    }
    case 7: {
        out = 7
    }
    case: {
        out = 10
    }
}
_test 10; out;
msg = 1
out = 0
switch msg {
    case 1: out = 1
    case 5: out = 5
    case 7: out = 7
    case: out = 10
}
_test 1; out;
msg = 5
out = 0
switch msg {
    case 1: out = 1
    case 5: out = 5
    case 7: out = 7
    case: out = 10
}
_test 5; out;
msg = 7
out = 0
switch msg {
    case 1: out = 1
    case 5: out = 5
    case 7: out = 7
    case: out = 10
}
_test 7; out;

@TEST_CASE(switch_enums)

enum Mouthful { Batter, Bitter, Butter }

msg := Mouthful.Butter
out := 0
switch msg {
    case Batter: { }
    case Bitter: { }
    case: { } // switch with default does not require all enum members
}

msg = Mouthful.Butter
out = 0
switch msg {
    case Batter: { }
    case Bitter: { }
    case Butter: { } // no default case require all enum members
}

@TEST_CASE(switch_errors)

msg := 9
switch msg {
    case 1: { }                                                 
    case: { }
    case: { }       @TEST_ERROR(ERROR_DUPLICATE_DEFAULT_CASE)
    default: {}     @TEST_ERROR(ERROR_C_STYLED_DEFAULT_CASE)
}

enum Mouthful {
    Batter,
    Bitter,
    Butter,
}

msge := Mouthful.Butter
switch msge { // we are planning some annotations to enable/disable this error, it's currently always disabled: @TEST_ERROR(ERROR_MISSING_ENUM_MEMBERS_IN_SWITCH)
    case Batter: { }                                                        
    case Batter: { }  @TEST_ERROR(ERROR_DUPLICATE_CASE)
    case Bitter: { }                                                        
    chicken             @TEST_ERROR(ERROR_BAD_TOKEN_IN_SWITCH)     
}

enum @lenient_switch Hmm {
    A,
    B,
}

switch A {
    case A: { }
    // case B: { } // not needed because of @lenient_switch
}