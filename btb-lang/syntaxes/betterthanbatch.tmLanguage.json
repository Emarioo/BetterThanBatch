{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Better Than Batch",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#strings1"
		},
		{
			"include": "#commentline"
		},
		{
			"include": "#commentblock"	
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#preproc"
		},
		{
			"include": "#annotation"
		},
		{
			"include": "#types"
		},
        {
            "include": "#assembly"
        }
	],
	"repository": {
		"commentline": {
			"name":"comment.line",
			"begin":"//",
			"end":"\n",
            "patterns": [
                {
                "name": "keyword.other",
                "match": "TODO:|NOTE:"
            }]
		},
		"commentblock": {
			"name":"comment.block",
			"begin":"/\\*",
			"end":"\\*/",
            "patterns": [
                {
                    "name": "keyword.other",
                    "match": "TODO:|NOTE:"
                }
            ]
		},
        "assembly": {
            "name": "support.function",
            "begin": "(?<=asm\\s*(<.*>)?(\\(.*\\))?\\s*\\{)",
            "end": "\\}",
            "patterns": [
                {
                    "name": "keyword.control",
                    "match": "^\\s*\\w+"
                },
                {
                    "name": "comment.line",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block",
                    "match": "/\\*(.|\\n)*\\*//"
                }
            ]
        },
		"keywords": {
			"patterns": [{
				"name": "keyword.control",
				"match": "\\b(if|else|while|switch|case|default|for|break|namespace|continue|global|fn|enum|union|struct|return|defer|each|operator|cast|_test|using|as)\\b"
			},
            {
                "name": "keyword.other",
                "match": "TODO:|NOTE:"
            }
			]
		},
		"preproc":{
			"patterns": [{
				"name":"entity.name.selector",
				"match":"#\\w+"
			}]
		},
		"annotation": {
			"patterns": [
				{
					"name": "entity.name.tag",
					"match": "@\\S+"
				}
			]
		},
		"functions":{
			"patterns": [{
				"name":"entity.name.function",
				"match": "\\w+\\("
			}]
		},
		"types":{
			"patterns": [{
				"name":"entity.name.type",
				"match": "((?<=\\w+\\s*:\\s*)|(?<=-\\>\\s*))(?<base>(\\w+::)*(\\w+)(\\<(\\g'base')(,\\g'base')*\\>)?(\\*)*)"
			}]
		},
		"strings": {
			"name": "string.quoted.double.betterthanbatch",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.betterthanbatch",
					"match": "\\\\."
				}
			]
		},
		"strings1": {
			"patterns": [
				{
					"name": "string.quoted.single.betterthanbatch",
					"match": "'((.)|(\\\\.))'"
				}
			]
		},
		"operators":{
			"name":"keyword.operator",
			"patterns": [
				{
					"name": "keyword.operator",
					"match":"(\\=\\=)|(\\=)|(\\+)|(\\-)|(\\*)|(\\/)|(\\%)|(\\<)|(\\>)|(\\!\\=)|(\\|)|(\\&)|(\\^)"
				}
			]
		},
		"numbers": {
			"name": "constant.numeric",
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "\\b\\d+(\\.\\d+)?d?u?s?\\b|\\b0x[0-9A-F_]+\\b|\\b(false|true|null)\\b"
				}
			]
		}
	},
	"scopeName": "source.btb"
}