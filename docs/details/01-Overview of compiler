# Overview of the compiler
These chapters, in `docs/details`, describes the implementation of the compiler. The chapters do not cover everything but the most notworthy parts.

**NOTE**: CHAPTERS ARE WORK IN PROGRESS

## The phases
The name of each step may not accurately represent what's
actually happening. Type checker infers and creates types for
structs, enums and functions. The generator also does some
more detailed type checking with expressions and when the
values are put in registers and pushed to the stack.

Some preprocessing is done after the parser like
\_FUNCTION\_ which isn't know until after parsing.

- Tokenizer     (text -> tokens)
- Preprocessor  (tokens -> tokens)
- Parser        (tokens -> AST)
- Type checker  (modifies types in AST)
- Generator     (AST -> bytecode)
- Optimizer     (bytecode -> faster and smaller bytecode)
- Interpreter   (runs the bytecode, compile time execution)
- x64 Generator (bytecode -> object file)