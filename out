Compiling...all.cpp
Compiled in 3.38 seconds
NativeLayer.cpp
Parsed struct Slice with 2 members
Parsed struct Range  with 2 members
Parsed struct Basket  with 1 members
Parsed struct Field  with 3 members
Parsed struct TypeDefinition  with 3 members
Parsed struct FormatSpec  with 2 members
Parsed struct Layer  with 2 members
Parsed struct DynamicArray with 3 members
Parsed struct ByteStream  with 3 members
Parsed struct DirectoryIteratorData  with 4 members
Parsed struct DirectoryIterator  with 3 members
enter GenerateFunctions
exit  GenerateFunctions
Native function prints
Native function printc
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
Function cleanup
Func cleanup
set 1 args
 [16] (: Basket*

0: push fp   
relsp -16
1: mov sp fp  
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: cleanup(DynamicArray<i32>*)
2: inc sp -16 
relsp -32
enter GenerateReference
exit  GenerateReference
 expr var push items
3: mov [fp+disp] rbx 8 
4: 16
5: li rax 
6: 0
7: add rbx rax rbx 
8: push rbx   
relsp -40
9: mov sp rbx  
move return value
10: pop rax   
relsp -32
11: mov rax [rbx+disp] 8 
12: 8
13: call none betcall 
14: 999999999
pop arguments
15: inc sp 16 
relsp -16
16: pop fp   
relsp -8
17: ret    
enter GenerateFunction
exit  GenerateFunction
Function main
Func main
set 2 args
 [16] argc: i32
 [24] argv: char**

18: push fp   
relsp -16
19: mov sp fp  
20: mov rdx [fp+disp] 8 
21: 24
22: mov ecx [fp+disp] 4 
23: 16
enter GenerateBody
exit  GenerateBody
enter ASSIGN
exit  ASSIGN
24: inc sp -16 
relsp -32
25: li rdi 
26: -16
27: add fp rdi rdi 
28: li rbx 
29: 16
30: memzero rdi rbx  
31: li rdi 
32: -16
33: add fp rdi rdi 
34: li rbx 
35: 16
36: memzero rdi rbx  
37: li rdi 
38: -4
39: add fp rdi rdi 
40: li rbx 
41: 4
42: memzero rdi rbx  
43: bxor rax rax rax 
44: mov eax [fp+disp] 4 
45: -4
46: li rdi 
47: -8
48: add fp rdi rdi 
49: li rbx 
50: 4
51: memzero rdi rbx  
52: bxor rax rax rax 
53: mov eax [fp+disp] 4 
54: -8
55: li rdi 
56: -16
57: add fp rdi rdi 
58: li rbx 
59: 8
60: memzero rdi rbx  
61: bxor rax rax rax 
62: mov rax [fp+disp] 8 
63: -16
declare bask at -16
 bask : Basket
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: add(DynamicArray<i32>*, i32)
64: inc sp -16 
relsp -48
enter GenerateReference
exit  GenerateReference
 expr var push bask
65: li rbx 
66: -16
67: add fp rbx rbx 
68: push rbx   
relsp -56
enter GenerateExpression
exit  GenerateExpression
69: li eax 
70: 5
71: push rax   
relsp -64
72: mov sp rbx  
move return value
73: pop rax   
relsp -56
74: mov eax [rbx+disp] 4 
75: 24
move return value
76: pop rax   
relsp -48
77: mov rax [rbx+disp] 8 
78: 16
79: call none betcall 
80: 999999999
extract return values
81: mov sp rbx  
82: inc sp 16 
relsp -32
83: mov [rbx+disp] rax 8 
84: -24
85: push rax   
relsp -40
move return value
86: pop rax   
relsp -32
enter DEFER
exit  DEFER
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: cleanup(Basket*)
87: inc sp -16 
relsp -48
enter GenerateReference
exit  GenerateReference
 expr var push bask
88: li rbx 
89: -16
90: add fp rbx rbx 
91: push rbx   
relsp -56
92: mov sp rbx  
move return value
93: pop rax   
relsp -48
94: mov rax [rbx+disp] 8 
95: 8
96: call none betcall 
97: 999999999
pop arguments
98: inc sp 16 
relsp -32
enter RETURN
exit  RETURN
enter GenerateExpression
exit  GenerateExpression
99: li eax 
100: 2
101: push rax   
relsp -40
102: pop rax   
relsp -32
103: inc sp 16 
relsp (temp) -16
104: pop fp   
105: ret    
enter DEFER
exit  DEFER
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: cleanup(Basket*)
106: inc sp -16 
relsp -48
enter GenerateReference
exit  GenerateReference
 expr var push bask
107: li rbx 
108: -16
109: add fp rbx rbx 
110: push rbx   
relsp -56
111: mov sp rbx  
move return value
112: pop rax   
relsp -48
113: mov rax [rbx+disp] 8 
114: 8
115: call none betcall 
116: 999999999
pop arguments
117: inc sp 16 
relsp -32
relsp -16
118: bxor rax rax rax 
119: pop fp   
relsp -8
120: ret    
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
Native function strlen
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
Function _print
Func _print
set 1 args
 [16] t: i64

121: push fp   
relsp -16
122: mov sp fp  
enter GenerateBody
exit  GenerateBody
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push t 
123: mov [fp+disp] rax 8 
124: 16
125: push rax   
relsp -24
enter GenerateExpression
exit  GenerateExpression
126: li eax 
127: 0
128: push rax   
relsp -32
129: pop rax   
relsp -24
130: pop rcx   
relsp -16
131: cast s->s eax rax 
132: eq rcx rax rcx 
133: push rcx   
relsp -24
134: pop rax   
relsp -16
135: jne rax   
136: 0
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: printc(char)
137: inc sp -16 
relsp -32
enter GenerateExpression
exit  GenerateExpression
138: li al 
139: 48
140: push rax   
relsp -40
141: mov sp rbx  
move return value
142: pop rax   
relsp -32
143: mov al [rbx+disp] 1 
144: 8
145: call native betcall 
146: 999999999
pop arguments
147: inc sp 16 
relsp -16
enter RETURN
exit  RETURN
148: pop fp   
149: ret    
enter ASSIGN
exit  ASSIGN
150: inc sp -8 
relsp -24
declare signed  at -8
 signed  : bool
enter GenerateExpression
exit  GenerateExpression
151: li al 
152: 0
153: push rax   
relsp -32
assign pop bool
move return value
154: pop rax   
relsp -24
155: mov al [fp+disp] 1 
156: -8
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push t 
157: mov [fp+disp] rax 8 
158: 16
159: push rax   
relsp -32
enter GenerateExpression
exit  GenerateExpression
160: li eax 
161: 0
162: push rax   
relsp -40
163: pop rcx   
relsp -32
164: pop rax   
relsp -24
165: cast s->s ecx rcx 
166: lt s-s rax rcx 
167: push rcx   
relsp -32
168: pop rax   
relsp -24
169: jne al   
170: 0
enter GenerateBody
exit  GenerateBody
enter ASSIGN
exit  ASSIGN
 signed  : bool
enter GenerateExpression
exit  GenerateExpression
171: li al 
172: 1
173: push rax   
relsp -32
assign pop bool
move return value
174: pop rax   
relsp -24
175: mov al [fp+disp] 1 
176: -8
enter ASSIGN
exit  ASSIGN
 t  : i64
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
177: li eax 
178: 0
179: push rax   
relsp -32
enter GenerateExpression
exit  GenerateExpression
 expr var push t
180: mov [fp+disp] rax 8 
181: 16
182: push rax   
relsp -40
183: pop rax   
relsp -32
184: pop rcx   
relsp -24
185: cast s->s ecx rcx 
186: sub rcx rax rcx 
187: push rcx   
relsp -32
assign pop i64
move return value
188: pop rax   
relsp -24
189: mov rax [fp+disp] 8 
190: 16
enter ASSIGN
exit  ASSIGN
191: inc sp -24 
relsp -48
192: li rdx 
193: 24
194: memzero sp rdx  
195: li rdi 
196: -32
197: add fp rdi rdi 
198: li rbx 
199: 1
200: memzero rdi rbx  
201: bxor rax rax rax 
202: mov al [fp+disp] 1 
203: -32
204: li rdi 
205: -31
206: add fp rdi rdi 
207: li rbx 
208: 1
209: memzero rdi rbx  
210: bxor rax rax rax 
211: mov al [fp+disp] 1 
212: -31
213: li rdi 
214: -30
215: add fp rdi rdi 
216: li rbx 
217: 1
218: memzero rdi rbx  
219: bxor rax rax rax 
220: mov al [fp+disp] 1 
221: -30
222: li rdi 
223: -29
224: add fp rdi rdi 
225: li rbx 
226: 1
227: memzero rdi rbx  
228: bxor rax rax rax 
229: mov al [fp+disp] 1 
230: -29
231: li rdi 
232: -28
233: add fp rdi rdi 
234: li rbx 
235: 1
236: memzero rdi rbx  
237: bxor rax rax rax 
238: mov al [fp+disp] 1 
239: -28
240: li rdi 
241: -27
242: add fp rdi rdi 
243: li rbx 
244: 1
245: memzero rdi rbx  
246: bxor rax rax rax 
247: mov al [fp+disp] 1 
248: -27
249: li rdi 
250: -26
251: add fp rdi rdi 
252: li rbx 
253: 1
254: memzero rdi rbx  
255: bxor rax rax rax 
256: mov al [fp+disp] 1 
257: -26
258: li rdi 
259: -25
260: add fp rdi rdi 
261: li rbx 
262: 1
263: memzero rdi rbx  
264: bxor rax rax rax 
265: mov al [fp+disp] 1 
266: -25
267: li rdi 
268: -24
269: add fp rdi rdi 
270: li rbx 
271: 1
272: memzero rdi rbx  
273: bxor rax rax rax 
274: mov al [fp+disp] 1 
275: -24
276: li rdi 
277: -23
278: add fp rdi rdi 
279: li rbx 
280: 1
281: memzero rdi rbx  
282: bxor rax rax rax 
283: mov al [fp+disp] 1 
284: -23
285: li rdi 
286: -22
287: add fp rdi rdi 
288: li rbx 
289: 1
290: memzero rdi rbx  
291: bxor rax rax rax 
292: mov al [fp+disp] 1 
293: -22
294: li rdi 
295: -21
296: add fp rdi rdi 
297: li rbx 
298: 1
299: memzero rdi rbx  
300: bxor rax rax rax 
301: mov al [fp+disp] 1 
302: -21
303: li rdi 
304: -20
305: add fp rdi rdi 
306: li rbx 
307: 1
308: memzero rdi rbx  
309: bxor rax rax rax 
310: mov al [fp+disp] 1 
311: -20
312: li rdi 
313: -19
314: add fp rdi rdi 
315: li rbx 
316: 1
317: memzero rdi rbx  
318: bxor rax rax rax 
319: mov al [fp+disp] 1 
320: -19
321: li rdi 
322: -18
323: add fp rdi rdi 
324: li rbx 
325: 1
326: memzero rdi rbx  
327: bxor rax rax rax 
328: mov al [fp+disp] 1 
329: -18
330: li rdi 
331: -17
332: add fp rdi rdi 
333: li rbx 
334: 1
335: memzero rdi rbx  
336: bxor rax rax rax 
337: mov al [fp+disp] 1 
338: -17
339: li rdi 
340: -16
341: add fp rdi rdi 
342: li rbx 
343: 1
344: memzero rdi rbx  
345: bxor rax rax rax 
346: mov al [fp+disp] 1 
347: -16
348: li rdi 
349: -15
350: add fp rdi rdi 
351: li rbx 
352: 1
353: memzero rdi rbx  
354: bxor rax rax rax 
355: mov al [fp+disp] 1 
356: -15
357: li rdi 
358: -14
359: add fp rdi rdi 
360: li rbx 
361: 1
362: memzero rdi rbx  
363: bxor rax rax rax 
364: mov al [fp+disp] 1 
365: -14
366: li rdi 
367: -13
368: add fp rdi rdi 
369: li rbx 
370: 1
371: memzero rdi rbx  
372: bxor rax rax rax 
373: mov al [fp+disp] 1 
374: -13
375: inc sp -16 
relsp -64
376: li rdx 
377: 20
378: push rdx   
relsp -72
379: li rbx 
380: -32
381: add rbx fp rbx 
382: push rbx   
relsp -80
move return value member ptr
move return value
383: pop rax   
relsp -72
384: mov rax [fp+disp] 8 
385: -48
move return value member len
move return value
386: pop rax   
relsp -64
387: mov rax [fp+disp] 8 
388: -40
declare str at -48
 str : Slice<char>
enter ASSIGN
exit  ASSIGN
389: inc sp -8 
relsp -72
declare used  at -56
 used  : i32
enter GenerateExpression
exit  GenerateExpression
390: li eax 
391: 19
392: push rax   
relsp -80
assign pop i32
move return value
393: pop rax   
relsp -72
394: mov eax [fp+disp] 4 
395: -56
enter WHILE
exit  WHILE
push loop
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push t 
396: mov [fp+disp] rax 8 
397: 16
398: push rax   
relsp -80
enter GenerateExpression
exit  GenerateExpression
399: li eax 
400: 0
401: push rax   
relsp -88
402: pop rcx   
relsp -80
403: pop rax   
relsp -72
404: cast s->s ecx rcx 
405: gt s-s rax rcx 
406: push rcx   
relsp -80
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push used 
407: mov [fp+disp] eax 4 
408: -56
409: push rax   
relsp -88
enter GenerateExpression
exit  GenerateExpression
410: li eax 
411: 0
412: push rax   
relsp -96
413: pop rcx   
relsp -88
414: pop rax   
relsp -80
415: gt s-s eax ecx 
416: push rcx   
relsp -88
417: pop rax   
relsp -80
418: pop rcx   
relsp -72
419: and cl al cl 
420: push rcx   
relsp -80
421: pop rax   
relsp -72
422: jne al   
423: 0
enter GenerateBody
exit  GenerateBody
enter ASSIGN
exit  ASSIGN
424: inc sp -8 
relsp -80
declare num at -64
 num : u32
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push t 
425: mov [fp+disp] rax 8 
426: 16
427: push rax   
relsp -88
enter GenerateExpression
exit  GenerateExpression
428: li eax 
429: 10
430: push rax   
relsp -96
431: pop rdx   
relsp -88
432: pop rax   
relsp -80
433: cast s->s edx rdx 
434: mod al rax rdx 
435: push rdx   
relsp -88
assign pop i64
436: pop rax   
relsp -80
437: cast s->u rax eax 
438: push rax   
relsp -88
move return value
439: pop rax   
relsp -80
440: mov eax [fp+disp] 4 
441: -64
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push num 
442: mov [fp+disp] eax 4 
443: -64
444: push rax   
relsp -88
enter GenerateExpression
exit  GenerateExpression
445: li al 
446: 48
447: push rax   
relsp -96
448: pop rax   
relsp -88
449: pop rcx   
relsp -80
450: cast s->u al eax 
451: add ecx eax ecx 
452: push rcx   
relsp -88
enter GenerateReference
exit  GenerateReference
 expr var push str
453: li rbx 
454: -48
455: add fp rbx rbx 
456: push rbx   
relsp -96
enter GenerateExpression
exit  GenerateExpression
 expr var push used
457: mov [fp+disp] eax 4 
458: -56
459: push rax   
relsp -104
460: pop rdx   
relsp -96
461: pop rbx   
relsp -88
462: mov [rbx] rcx 8 
463: add rcx eax rcx 
464: push rcx   
relsp -96
465: pop rbx   
relsp -88
466: pop rax   
relsp -80
467: cast s->s eax al 
468: push rax   
relsp -88
move return value
469: pop rax   
relsp -80
470: mov al [rbx] 1 
471: mov [rbx] al 1 
472: push rax   
relsp -88
move return value
473: pop rax   
relsp -80
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
enter GenerateReference
exit  GenerateReference
 expr var push used
474: li rbx 
475: -56
476: add fp rbx rbx 
477: push rbx   
relsp -88
478: pop rbx   
relsp -80
479: mov [rbx] eax 4 
480: push rax   
relsp -88
481: inc eax -1 
482: mov eax [rbx] 4 
move return value
483: pop rax   
relsp -80
enter ASSIGN
exit  ASSIGN
 t  : i64
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push t 
484: mov [fp+disp] rax 8 
485: 16
486: push rax   
relsp -88
enter GenerateExpression
exit  GenerateExpression
487: li eax 
488: 10
489: push rax   
relsp -96
490: pop rdx   
relsp -88
491: pop rax   
relsp -80
492: cast s->s edx rdx 
493: div al rax rdx 
494: push rax   
relsp -88
assign pop i64
move return value
495: pop rax   
relsp -80
496: mov rax [fp+disp] 8 
497: 16
fix sp when exiting body
498: inc sp 8 
relsp -72
499: jmp    
500: 396
pop loop
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
enter GenerateReference
exit  GenerateReference
 expr var push str
501: li rbx 
502: -48
503: add fp rbx rbx 
504: push rbx   
relsp -80
505: pop rbx   
relsp -72
506: mov [rbx] rax 8 
507: push rax   
relsp -80
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push used 
508: mov [fp+disp] eax 4 
509: -56
510: push rax   
relsp -88
enter GenerateExpression
exit  GenerateExpression
511: li eax 
512: 1
513: push rax   
relsp -96
514: pop rax   
relsp -88
515: pop rcx   
relsp -80
516: add ecx eax ecx 
517: push rcx   
relsp -88
enter GenerateReference
exit  GenerateReference
 expr var push str
518: li rbx 
519: -48
520: add fp rbx rbx 
521: push rbx   
relsp -96
522: pop rbx   
relsp -88
523: pop rax   
relsp -80
524: pop rcx   
relsp -72
525: add rcx eax rcx 
526: push rcx   
relsp -80
527: mov rcx [rbx] 8 
move return value
528: pop rax   
relsp -72
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
enter GenerateReference
exit  GenerateReference
 expr var push str
529: li rbx 
530: -48
531: add fp rbx rbx 
532: push rbx   
relsp -80
533: pop rbx   
relsp -72
534: li eax 
535: 8
536: add rbx eax rbx 
537: push rbx   
relsp -80
538: pop rbx   
relsp -72
539: mov [rbx] rax 8 
540: push rax   
relsp -80
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push used 
541: mov [fp+disp] eax 4 
542: -56
543: push rax   
relsp -88
enter GenerateExpression
exit  GenerateExpression
544: li eax 
545: 1
546: push rax   
relsp -96
547: pop rax   
relsp -88
548: pop rcx   
relsp -80
549: add ecx eax ecx 
550: push rcx   
relsp -88
enter GenerateReference
exit  GenerateReference
 expr var push str
551: li rbx 
552: -48
553: add fp rbx rbx 
554: push rbx   
relsp -96
555: pop rbx   
relsp -88
556: li eax 
557: 8
558: add rbx eax rbx 
559: push rbx   
relsp -96
560: pop rbx   
relsp -88
561: pop rax   
relsp -80
562: pop rcx   
relsp -72
563: cast s->u eax rax 
564: sub rcx rax rcx 
565: push rcx   
relsp -80
566: mov rcx [rbx] 8 
move return value
567: pop rax   
relsp -72
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
 expr var push signed

568: mov [fp+disp] al 1 
569: -8
570: push rax   
relsp -80
571: pop rax   
relsp -72
572: jne al   
573: 0
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: printc(char)
574: inc sp -8 
relsp -80
enter GenerateExpression
exit  GenerateExpression
575: li al 
576: 45
577: push rax   
relsp -88
578: mov sp rbx  
move return value
579: pop rax   
relsp -80
580: mov al [rbx+disp] 1 
581: 8
582: call native betcall 
583: 999999999
pop arguments
584: inc sp 8 
relsp -72
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: prints(Slice<char>)
585: inc sp -24 
relsp -96
enter GenerateExpression
exit  GenerateExpression
 expr var push str
push len
586: mov [fp+disp] rax 8 
587: -40
588: push rax   
relsp -104
push ptr
589: mov [fp+disp] rax 8 
590: -48
591: push rax   
relsp -112
592: mov sp rbx  
move return value member ptr
move return value
593: pop rax   
relsp -104
594: mov rax [rbx+disp] 8 
595: 16
move return value member len
move return value
596: pop rax   
relsp -96
597: mov rax [rbx+disp] 8 
598: 24
599: call native betcall 
600: 999999999
pop arguments
601: inc sp 24 
relsp -72
fix sp when exiting body
602: inc sp 56 
relsp -16
603: pop fp   
relsp -8
604: ret    
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
Function _print
Func _print
set 1 args
 [16] t: char

605: push fp   
relsp -16
606: mov sp fp  
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: prints(Slice<char>)
607: inc sp -16 
relsp -32
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
608: li eax 
609: 1
610: push rax   
relsp -40
611: pop rax   
relsp -32
612: cast s->u eax rax 
613: push rax   
relsp -40
enter GenerateExpression
exit  GenerateExpression
enter GenerateReference
exit  GenerateReference
 expr var push t
614: li rbx 
615: 16
616: add fp rbx rbx 
617: push rbx   
relsp -48
618: mov sp rbx  
move return value member ptr
move return value
619: pop rax   
relsp -40
620: mov rax [rbx+disp] 8 
621: 16
move return value member len
move return value
622: pop rax   
relsp -32
623: mov rax [rbx+disp] 8 
624: 24
625: call native betcall 
626: 999999999
pop arguments
627: inc sp 16 
relsp -16
628: pop fp   
relsp -8
629: ret    
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
Function _print
Func _print
set 1 args
 [16] t: Slice<char>

630: push fp   
relsp -16
631: mov sp fp  
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: prints(Slice<char>)
632: inc sp -16 
relsp -32
enter GenerateExpression
exit  GenerateExpression
 expr var push t
push len
633: mov [fp+disp] rax 8 
634: 24
635: push rax   
relsp -40
push ptr
636: mov [fp+disp] rax 8 
637: 16
638: push rax   
relsp -48
639: mov sp rbx  
move return value member ptr
move return value
640: pop rax   
relsp -40
641: mov rax [rbx+disp] 8 
642: 16
move return value member len
move return value
643: pop rax   
relsp -32
644: mov rax [rbx+disp] 8 
645: 24
646: call native betcall 
647: 999999999
pop arguments
648: inc sp 16 
relsp -16
649: pop fp   
relsp -8
650: ret    
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
Native function memcpy
Native function memzero
Native function strlen
Native function rdtsc
Native function compare_swap
Native function atomic_add
External function Allocate
External function Reallocate
External function Free
Native function CurrentWorkingDirectory
External function StartMeasure
External function StopMeasure
External function DiffMeasure
External function NativeSleep
External function CmdLineArgs
External function GetClockSpeed
External function ExecuteCommand
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
Function cleanup
Func cleanup
set 1 args
 [16] (: DynamicArray<i32>*

651: push fp   
relsp -16
652: mov sp fp  
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _reserve(DynamicArray<i32>*, u32)
653: inc sp -16 
relsp -32
654: mov [fp+disp] rbx 8 
655: 16
656: push rbx   
relsp -40
enter GenerateExpression
exit  GenerateExpression
657: li eax 
658: 0
659: push rax   
relsp -48
660: pop rax   
relsp -40
661: cast s->u eax eax 
662: push rax   
relsp -48
663: mov sp rbx  
move return value
664: pop rax   
relsp -40
665: mov eax [rbx+disp] 4 
666: 24
move return value
667: pop rax   
relsp -32
668: mov rax [rbx+disp] 8 
669: 16
670: call none betcall 
671: 999999999
extract return values
672: mov sp rbx  
673: inc sp 16 
relsp -16
674: mov [rbx+disp] al 1 
675: -24
676: push rax   
relsp -24
move return value
677: pop rax   
relsp -16
678: pop fp   
relsp -8
679: ret    
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
Function add
Func add
set 2 args
 [16] (: DynamicArray<i32>*
 [24] newElement: i32

680: push fp   
relsp -16
681: mov sp fp  
682: li rcx 
683: 8
684: mov fp rbx  
685: sub rbx rcx rbx 
686: memzero rbx rcx  
687: inc sp -8 
relsp -24
Return values:
 [0] : i32*
enter GenerateBody
exit  GenerateBody
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push len 
688: mov [fp+disp] rbx 8 
689: 16
690: mov [rbx+disp] eax 4 
691: 12
692: push rax   
relsp -32
enter GenerateExpression
exit  GenerateExpression
693: li eax 
694: 1
695: push rax   
relsp -40
696: pop rax   
relsp -32
697: pop rcx   
relsp -24
698: add ecx eax ecx 
699: push rcx   
relsp -32
enter GenerateExpression
exit  GenerateExpression
 expr var push max 
700: mov [fp+disp] rbx 8 
701: 16
702: mov [rbx+disp] eax 4 
703: 8
704: push rax   
relsp -40
705: pop rcx   
relsp -32
706: pop rax   
relsp -24
707: gt u-u eax ecx 
708: push rcx   
relsp -32
709: pop rax   
relsp -24
710: jne al   
711: 0
enter GenerateBody
exit  GenerateBody
enter ASSIGN
exit  ASSIGN
712: inc sp -8 
relsp -32
declare res at -16
 res : bool
enter GenerateExpression
exit  GenerateExpression
Overload: _reserve(DynamicArray<i32>*, u32)
713: inc sp -16 
relsp -48
714: mov [fp+disp] rbx 8 
715: 16
716: push rbx   
relsp -56
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
717: li eax 
718: 7
719: push rax   
relsp -64
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push max 
720: mov [fp+disp] rbx 8 
721: 16
722: mov [rbx+disp] eax 4 
723: 8
724: push rax   
relsp -72
enter GenerateExpression
exit  GenerateExpression
725: li eax 
726: 2
727: push rax   
relsp -80
728: pop rax   
relsp -72
729: pop rdx   
relsp -64
730: mul  edx eax 
731: push rax   
relsp -72
732: pop rax   
relsp -64
733: pop rcx   
relsp -56
734: add ecx eax ecx 
735: push rcx   
relsp -64
736: mov sp rbx  
move return value
737: pop rax   
relsp -56
738: mov eax [rbx+disp] 4 
739: 24
move return value
740: pop rax   
relsp -48
741: mov rax [rbx+disp] 8 
742: 16
743: call none betcall 
744: 999999999
extract return values
745: mov sp rbx  
746: inc sp 16 
relsp -32
747: mov [rbx+disp] al 1 
748: -24
749: push rax   
relsp -40
assign pop bool
move return value
750: pop rax   
relsp -32
751: mov al [fp+disp] 1 
752: -16
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push res 
753: mov [fp+disp] al 1 
754: -16
755: push rax   
relsp -40
756: pop rax   
relsp -32
757: not al al  
758: push rax   
relsp -40
759: pop rax   
relsp -32
760: jne al   
761: 0
enter GenerateBody
exit  GenerateBody
enter RETURN
exit  RETURN
enter GenerateExpression
exit  GenerateExpression
762: li rax 
763: 0
764: push rax   
relsp -40
move return value
765: pop rax   
relsp -32
766: mov rax [fp+disp] 8 
767: -8
768: inc sp 16 
relsp (temp) -16
769: pop fp   
770: ret    
fix sp when exiting body
771: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push newElement
772: mov [fp+disp] eax 4 
773: 24
774: push rax   
relsp -32
enter GenerateReference
exit  GenerateReference
 expr var push ptr
775: mov [fp+disp] rbx 8 
776: 16
777: li rax 
778: 0
779: add rbx rax rbx 
780: push rbx   
relsp -40
enter GenerateExpression
exit  GenerateExpression
 expr var push len
781: mov [fp+disp] rbx 8 
782: 16
783: mov [rbx+disp] eax 4 
784: 12
785: push rax   
relsp -48
786: pop rdx   
relsp -40
787: pop rbx   
relsp -32
788: mov [rbx] rcx 8 
789: li eax 
790: 4
791: mul al edx eax 
792: add rcx eax rcx 
793: push rcx   
relsp -40
794: pop rbx   
relsp -32
move return value
795: pop rax   
relsp -24
796: mov eax [rbx] 4 
797: mov [rbx] eax 4 
798: push rax   
relsp -32
move return value
799: pop rax   
relsp -24
enter RETURN
exit  RETURN
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push ptr 
800: mov [fp+disp] rbx 8 
801: 16
802: mov [rbx] rax 8 
803: push rax   
relsp -32
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
enter GenerateReference
exit  GenerateReference
 expr var push len
804: mov [fp+disp] rbx 8 
805: 16
806: li rax 
807: 12
808: add rbx rax rbx 
809: push rbx   
relsp -40
810: pop rbx   
relsp -32
811: mov [rbx] eax 4 
812: push rax   
relsp -40
813: inc eax 1 
814: mov eax [rbx] 4 
enter GenerateExpression
exit  GenerateExpression
815: li eax 
816: 4
817: push rax   
relsp -48
818: pop rax   
relsp -40
819: pop rdx   
relsp -32
820: mul  edx eax 
821: push rax   
relsp -40
822: pop rax   
relsp -32
823: pop rcx   
relsp -24
824: add rcx eax rcx 
825: push rcx   
relsp -32
move return value
826: pop rax   
relsp -24
827: mov rax [fp+disp] 8 
828: -8
829: inc sp 8 
relsp (temp) -16
830: pop fp   
831: ret    
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
Function _reserve
Func _reserve
set 2 args
 [16] (: DynamicArray<i32>*
 [24] newMax: u32

832: push fp   
relsp -16
833: mov sp fp  
834: li rcx 
835: 8
836: mov fp rbx  
837: sub rbx rcx rbx 
838: memzero rbx rcx  
839: inc sp -8 
relsp -24
Return values:
 [0] : bool
enter GenerateBody
exit  GenerateBody
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push newMax
840: mov [fp+disp] eax 4 
841: 24
842: push rax   
relsp -32
enter GenerateExpression
exit  GenerateExpression
843: li eax 
844: 0
845: push rax   
relsp -40
846: pop rax   
relsp -32
847: pop rcx   
relsp -24
848: eq ecx eax ecx 
849: push rcx   
relsp -32
850: pop rax   
relsp -24
851: jne eax   
852: 0
enter GenerateBody
exit  GenerateBody
enter BODY (statement)
exit  BODY (statement)
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(Slice<char>)
853: inc sp -24 
relsp -48
enter GenerateExpression
exit  GenerateExpression
854: li rax 
855: 1
856: push rax   
relsp -56
857: dataptr rbx   
858: 3
859: push rbx   
relsp -64
860: mov sp rbx  
move return value member ptr
move return value
861: pop rax   
relsp -56
862: mov rax [rbx+disp] 8 
863: 16
move return value member len
move return value
864: pop rax   
relsp -48
865: mov rax [rbx+disp] 8 
866: 24
867: call none betcall 
868: 999999999
pop arguments
869: inc sp 24 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(char)
870: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
871: li al 
872: 32
873: push rax   
relsp -40
874: mov sp rbx  
move return value
875: pop rax   
relsp -32
876: mov al [rbx+disp] 1 
877: 8
878: call none betcall 
879: 999999999
pop arguments
880: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(i64)
881: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push ptr
882: mov [fp+disp] rbx 8 
883: 16
884: mov [rbx] rax 8 
885: push rax   
relsp -40
886: pop rax   
relsp -32
887: cast u->s rax rax 
888: push rax   
relsp -40
889: mov sp rbx  
move return value
890: pop rax   
relsp -32
891: mov rax [rbx+disp] 8 
892: 8
893: call none betcall 
894: 999999999
pop arguments
895: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(char)
896: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
897: li al 
898: 32
899: push rax   
relsp -40
900: mov sp rbx  
move return value
901: pop rax   
relsp -32
902: mov al [rbx+disp] 1 
903: 8
904: call none betcall 
905: 999999999
pop arguments
906: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(i64)
907: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
 expr var push max
908: mov [fp+disp] rbx 8 
909: 16
910: mov [rbx+disp] eax 4 
911: 8
912: push rax   
relsp -40
913: pop rax   
relsp -32
914: cast u->s eax rax 
915: push rax   
relsp -40
916: mov sp rbx  
move return value
917: pop rax   
relsp -32
918: mov rax [rbx+disp] 8 
919: 8
920: call none betcall 
921: 999999999
pop arguments
922: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(char)
923: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
924: li al 
925: 32
926: push rax   
relsp -40
927: mov sp rbx  
move return value
928: pop rax   
relsp -32
929: mov al [rbx+disp] 1 
930: 8
931: call none betcall 
932: 999999999
pop arguments
933: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(i64)
934: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
 expr var push len
935: mov [fp+disp] rbx 8 
936: 16
937: mov [rbx+disp] eax 4 
938: 12
939: push rax   
relsp -40
940: pop rax   
relsp -32
941: cast u->s eax rax 
942: push rax   
relsp -40
943: mov sp rbx  
move return value
944: pop rax   
relsp -32
945: mov rax [rbx+disp] 8 
946: 8
947: call none betcall 
948: 999999999
pop arguments
949: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(char)
950: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
951: li al 
952: 32
953: push rax   
relsp -40
954: mov sp rbx  
move return value
955: pop rax   
relsp -32
956: mov al [rbx+disp] 1 
957: 8
958: call none betcall 
959: 999999999
pop arguments
960: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(Slice<char>)
961: inc sp -24 
relsp -48
enter GenerateExpression
exit  GenerateExpression
962: li rax 
963: 1
964: push rax   
relsp -56
965: dataptr rbx   
966: 9
967: push rbx   
relsp -64
968: mov sp rbx  
move return value member ptr
move return value
969: pop rax   
relsp -56
970: mov rax [rbx+disp] 8 
971: 16
move return value member len
move return value
972: pop rax   
relsp -48
973: mov rax [rbx+disp] 8 
974: 24
975: call none betcall 
976: 999999999
pop arguments
977: inc sp 24 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(char)
978: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
979: li al 
980: 32
981: push rax   
relsp -40
982: mov sp rbx  
move return value
983: pop rax   
relsp -32
984: mov al [rbx+disp] 1 
985: 8
986: call none betcall 
987: 999999999
pop arguments
988: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(i64)
989: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
 expr var push newMax
990: mov [fp+disp] eax 4 
991: 24
992: push rax   
relsp -40
993: pop rax   
relsp -32
994: cast u->s eax rax 
995: push rax   
relsp -40
996: mov sp rbx  
move return value
997: pop rax   
relsp -32
998: mov rax [rbx+disp] 8 
999: 8
1000: call none betcall 
1001: 999999999
pop arguments
1002: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(char)
1003: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
1004: li al 
1005: 10
1006: push rax   
relsp -40
1007: mov sp rbx  
move return value
1008: pop rax   
relsp -32
1009: mov al [rbx+disp] 1 
1010: 8
1011: call none betcall 
1012: 999999999
pop arguments
1013: inc sp 8 
relsp -24
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push max
1014: mov [fp+disp] rbx 8 
1015: 16
1016: mov [rbx+disp] eax 4 
1017: 8
1018: push rax   
relsp -32
enter GenerateExpression
exit  GenerateExpression
1019: li eax 
1020: 0
1021: push rax   
relsp -40
1022: pop rax   
relsp -32
1023: pop rcx   
relsp -24
1024: neq ecx eax ecx 
1025: push rcx   
relsp -32
1026: pop rax   
relsp -24
1027: jne eax   
1028: 0
enter GenerateBody
exit  GenerateBody
enter BODY (statement)
exit  BODY (statement)
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(Slice<char>)
1029: inc sp -24 
relsp -48
enter GenerateExpression
exit  GenerateExpression
1030: li rax 
1031: 2
1032: push rax   
relsp -56
1033: dataptr rbx   
1034: 0
1035: push rbx   
relsp -64
1036: mov sp rbx  
move return value member ptr
move return value
1037: pop rax   
relsp -56
1038: mov rax [rbx+disp] 8 
1039: 16
move return value member len
move return value
1040: pop rax   
relsp -48
1041: mov rax [rbx+disp] 8 
1042: 24
1043: call none betcall 
1044: 999999999
pop arguments
1045: inc sp 24 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(char)
1046: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
1047: li al 
1048: 10
1049: push rax   
relsp -40
1050: mov sp rbx  
move return value
1051: pop rax   
relsp -32
1052: mov al [rbx+disp] 1 
1053: 8
1054: call none betcall 
1055: 999999999
pop arguments
1056: inc sp 8 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: Free(void*, u64)
1057: inc sp -40 
relsp -64
enter GenerateExpression
exit  GenerateExpression
 expr var push ptr
1058: mov [fp+disp] rbx 8 
1059: 16
1060: mov [rbx] rax 8 
1061: push rax   
relsp -72
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push max 
1062: mov [fp+disp] rbx 8 
1063: 16
1064: mov [rbx+disp] eax 4 
1065: 8
1066: push rax   
relsp -80
enter GenerateExpression
exit  GenerateExpression
1067: li eax 
1068: 4
1069: push rax   
relsp -88
1070: pop rax   
relsp -80
1071: pop rdx   
relsp -72
1072: mul  edx eax 
1073: push rax   
relsp -80
1074: pop rax   
relsp -72
1075: cast s->u eax rax 
1076: push rax   
relsp -80
1077: pop rdx   
relsp -72
1078: pop rcx   
relsp -64
1079: call import stdcall 
1080: 0
1081: inc sp 40 
relsp -24
enter BODY (statement)
exit  BODY (statement)
enter GenerateBody
exit  GenerateBody
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(Slice<char>)
1082: inc sp -24 
relsp -48
enter GenerateExpression
exit  GenerateExpression
1083: li rax 
1084: 3
1085: push rax   
relsp -56
1086: dataptr rbx   
1087: 5
1088: push rbx   
relsp -64
1089: mov sp rbx  
move return value member ptr
move return value
1090: pop rax   
relsp -56
1091: mov rax [rbx+disp] 8 
1092: 16
move return value member len
move return value
1093: pop rax   
relsp -48
1094: mov rax [rbx+disp] 8 
1095: 24
1096: call none betcall 
1097: 999999999
pop arguments
1098: inc sp 24 
relsp -24
enter EXPRESSION
exit  EXPRESSION
enter GenerateExpression
exit  GenerateExpression
Overload: _print(char)
1099: inc sp -8 
relsp -32
enter GenerateExpression
exit  GenerateExpression
1100: li al 
1101: 10
1102: push rax   
relsp -40
1103: mov sp rbx  
move return value
1104: pop rax   
relsp -32
1105: mov al [rbx+disp] 1 
1106: 8
1107: call none betcall 
1108: 999999999
pop arguments
1109: inc sp 8 
relsp -24
enter ASSIGN
exit  ASSIGN
 ptr  : i32*
enter GenerateExpression
exit  GenerateExpression
1110: li rax 
1111: 0
1112: push rax   
relsp -32
assign pop void*
1113: mov [fp+disp] rbx 8 
1114: 16
move return value
1115: pop rax   
relsp -24
1116: mov rax [rbx] 8 
enter ASSIGN
exit  ASSIGN
 max  : u32
enter GenerateExpression
exit  GenerateExpression
1117: li eax 
1118: 0
1119: push rax   
relsp -32
assign pop i32
1120: pop rax   
relsp -24
1121: cast s->u eax eax 
1122: push rax   
relsp -32
1123: mov [fp+disp] rbx 8 
1124: 16
move return value
1125: pop rax   
relsp -24
1126: mov eax [rbx+disp] 4 
1127: 8
enter ASSIGN
exit  ASSIGN
 len  : u32
enter GenerateExpression
exit  GenerateExpression
1128: li eax 
1129: 0
1130: push rax   
relsp -32
assign pop i32
1131: pop rax   
relsp -24
1132: cast s->u eax eax 
1133: push rax   
relsp -32
1134: mov [fp+disp] rbx 8 
1135: 16
move return value
1136: pop rax   
relsp -24
1137: mov eax [rbx+disp] 4 
1138: 12
enter RETURN
exit  RETURN
enter GenerateExpression
exit  GenerateExpression
1139: li al 
1140: 1
1141: push rax   
relsp -32
move return value
1142: pop rax   
relsp -24
1143: mov al [fp+disp] 1 
1144: -8
1145: inc sp 8 
relsp (temp) -16
1146: pop fp   
1147: ret    
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push ptr 
1148: mov [fp+disp] rbx 8 
1149: 16
1150: mov [rbx] rax 8 
1151: push rax   
relsp -32
1152: pop rax   
relsp -24
1153: not rax rax  
1154: push rax   
relsp -32
1155: pop rax   
relsp -24
1156: jne al   
1157: 0
enter GenerateBody
exit  GenerateBody
enter ASSIGN
exit  ASSIGN
 ptr  : i32*
enter GenerateExpression
exit  GenerateExpression
Overload: Allocate(u64)
1158: inc sp -40 
relsp -64
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push newMax 
1159: mov [fp+disp] eax 4 
1160: 24
1161: push rax   
relsp -72
enter GenerateExpression
exit  GenerateExpression
1162: li eax 
1163: 4
1164: push rax   
relsp -80
1165: pop rax   
relsp -72
1166: pop rdx   
relsp -64
1167: mul  edx eax 
1168: push rax   
relsp -72
1169: pop rax   
relsp -64
1170: cast s->u eax rax 
1171: push rax   
relsp -72
1172: pop rcx   
relsp -64
1173: call import stdcall 
1174: 1
1175: inc sp 40 
relsp -24
1176: push rax   
relsp -32
assign pop void*
1177: mov [fp+disp] rbx 8 
1178: 16
move return value
1179: pop rax   
relsp -24
1180: mov rax [rbx] 8 
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push ptr

1181: mov [fp+disp] rbx 8 
1182: 16
1183: mov [rbx] rax 8 
1184: push rax   
relsp -32
1185: pop rax   
relsp -24
1186: not rax rax  
1187: push rax   
relsp -32
1188: pop rax   
relsp -24
1189: jne al   
1190: 0
enter GenerateBody
exit  GenerateBody
enter RETURN
exit  RETURN
enter GenerateExpression
exit  GenerateExpression
1191: li al 
1192: 0
1193: push rax   
relsp -32
move return value
1194: pop rax   
relsp -24
1195: mov al [fp+disp] 1 
1196: -8
1197: inc sp 8 
relsp (temp) -16
1198: pop fp   
1199: ret    
enter ASSIGN
exit  ASSIGN
 len  : u32
enter GenerateExpression
exit  GenerateExpression
1200: li eax 
1201: 0
1202: push rax   
relsp -32
assign pop i32
1203: pop rax   
relsp -24
1204: cast s->u eax eax 
1205: push rax   
relsp -32
1206: mov [fp+disp] rbx 8 
1207: 16
move return value
1208: pop rax   
relsp -24
1209: mov eax [rbx+disp] 4 
1210: 12
enter ASSIGN
exit  ASSIGN
 max  : u32
enter GenerateExpression
exit  GenerateExpression
 expr var push newMax
1211: mov [fp+disp] eax 4 
1212: 24
1213: push rax   
relsp -32
assign pop u32
1214: mov [fp+disp] rbx 8 
1215: 16
move return value
1216: pop rax   
relsp -24
1217: mov eax [rbx+disp] 4 
1218: 8
enter RETURN
exit  RETURN
enter GenerateExpression
exit  GenerateExpression
1219: li al 
1220: 1
1221: push rax   
relsp -32
move return value
1222: pop rax   
relsp -24
1223: mov al [fp+disp] 1 
1224: -8
1225: inc sp 8 
relsp (temp) -16
1226: pop fp   
1227: ret    
1228: jmp    
1229: 0
enter GenerateBody
exit  GenerateBody
enter ASSIGN
exit  ASSIGN
1230: inc sp -8 
relsp -32
declare newPtr at -16
 newPtr : i32*
enter GenerateExpression
exit  GenerateExpression
Overload: Reallocate(void*, u64, u64)
1231: inc sp -32 
relsp -64
enter GenerateExpression
exit  GenerateExpression
 expr var push ptr
1232: mov [fp+disp] rbx 8 
1233: 16
1234: mov [rbx] rax 8 
1235: push rax   
relsp -72
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push max 
1236: mov [fp+disp] rbx 8 
1237: 16
1238: mov [rbx+disp] eax 4 
1239: 8
1240: push rax   
relsp -80
enter GenerateExpression
exit  GenerateExpression
1241: li eax 
1242: 4
1243: push rax   
relsp -88
1244: pop rax   
relsp -80
1245: pop rdx   
relsp -72
1246: mul  edx eax 
1247: push rax   
relsp -80
1248: pop rax   
relsp -72
1249: cast s->u eax rax 
1250: push rax   
relsp -80
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push newMax 
1251: mov [fp+disp] eax 4 
1252: 24
1253: push rax   
relsp -88
enter GenerateExpression
exit  GenerateExpression
1254: li eax 
1255: 4
1256: push rax   
relsp -96
1257: pop rax   
relsp -88
1258: pop rdx   
relsp -80
1259: mul  edx eax 
1260: push rax   
relsp -88
1261: pop rax   
relsp -80
1262: cast s->u eax rax 
1263: push rax   
relsp -88
1264: pop r8   
relsp -80
1265: pop rdx   
relsp -72
1266: pop rcx   
relsp -64
1267: call import stdcall 
1268: 2
1269: inc sp 32 
relsp -32
1270: push rax   
relsp -40
assign pop void*
move return value
1271: pop rax   
relsp -32
1272: mov rax [fp+disp] 8 
1273: -16
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push newPtr

1274: mov [fp+disp] rax 8 
1275: -16
1276: push rax   
relsp -40
1277: pop rax   
relsp -32
1278: not rax rax  
1279: push rax   
relsp -40
1280: pop rax   
relsp -32
1281: jne al   
1282: 0
enter GenerateBody
exit  GenerateBody
enter RETURN
exit  RETURN
enter GenerateExpression
exit  GenerateExpression
1283: li al 
1284: 0
1285: push rax   
relsp -40
move return value
1286: pop rax   
relsp -32
1287: mov al [fp+disp] 1 
1288: -8
1289: inc sp 16 
relsp (temp) -16
1290: pop fp   
1291: ret    
enter ASSIGN
exit  ASSIGN
 ptr  : i32*
enter GenerateExpression
exit  GenerateExpression
 expr var push newPtr
1292: mov [fp+disp] rax 8 
1293: -16
1294: push rax   
relsp -40
assign pop i32*
1295: mov [fp+disp] rbx 8 
1296: 16
move return value
1297: pop rax   
relsp -32
1298: mov rax [rbx] 8 
enter ASSIGN
exit  ASSIGN
 max  : u32
enter GenerateExpression
exit  GenerateExpression
 expr var push newMax
1299: mov [fp+disp] eax 4 
1300: 24
1301: push rax   
relsp -40
assign pop u32
1302: mov [fp+disp] rbx 8 
1303: 16
move return value
1304: pop rax   
relsp -32
1305: mov eax [rbx+disp] 4 
1306: 8
enter IF
exit  IF
enter GenerateExpression
exit  GenerateExpression
enter GenerateExpression
exit  GenerateExpression
 expr var push len 
1307: mov [fp+disp] rbx 8 
1308: 16
1309: mov [rbx+disp] eax 4 
1310: 12
1311: push rax   
relsp -40
enter GenerateExpression
exit  GenerateExpression
 expr var push newMax 
1312: mov [fp+disp] eax 4 
1313: 24
1314: push rax   
relsp -48
1315: pop rcx   
relsp -40
1316: pop rax   
relsp -32
1317: gt u-u eax ecx 
1318: push rcx   
relsp -40
1319: pop rax   
relsp -32
1320: jne al   
1321: 0
enter GenerateBody
exit  GenerateBody
enter ASSIGN
exit  ASSIGN
 len  : u32
enter GenerateExpression
exit  GenerateExpression
 expr var push newMax
1322: mov [fp+disp] eax 4 
1323: 24
1324: push rax   
relsp -40
assign pop u32
1325: mov [fp+disp] rbx 8 
1326: 16
move return value
1327: pop rax   
relsp -32
1328: mov eax [rbx+disp] 4 
1329: 12
enter RETURN
exit  RETURN
enter GenerateExpression
exit  GenerateExpression
1330: li al 
1331: 1
1332: push rax   
relsp -40
move return value
1333: pop rax   
relsp -32
1334: mov al [fp+disp] 1 
1335: -8
1336: inc sp 16 
relsp (temp) -16
1337: pop fp   
1338: ret    
relsp -24
enter RETURN
exit  RETURN
enter GenerateExpression
exit  GenerateExpression
1339: li al 
1340: 0
1341: push rax   
relsp -32
move return value
1342: pop rax   
relsp -24
1343: mov al [fp+disp] 1 
1344: -8
1345: inc sp 8 
relsp (temp) -16
1346: pop fp   
1347: ret    
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
enter GenerateFunctions
exit  GenerateFunctions
enter GenerateFunction
exit  GenerateFunction
C:/Users/datao/Desktop/Backup/CodeProjects/BetterThanBatch/src/BetBat/Generator.cpp:5520
Invalid function address for instruction[97]
C:/Users/datao/Desktop/Backup/CodeProjects/BetterThanBatch/src/BetBat/Generator.cpp:5520
Invalid function address for instruction[116]
Invalid function resolutions:
 cleanup: 2 bad address(es)
Compiler failed with 4 error(s) (44.47 ms, 456 line(s), 10.26 K lines/s)
