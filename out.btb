## modules/os.btb ##
fn @intrinsic memcpy(dst: void*, src: void*, len: u64);
fn @intrinsic memzero(dst: void*, len: u64);
fn @intrinsic strlen(ptr: char*) -> u32;
fn @intrinsic rdtsc() -> u64;
fn @intrinsic compare_swap(ptr: i32*, old: i32, new: i32) -> bool;
fn @intrinsic atomic_add(ptr: i32*, value: i32);
fn @import @stdcall Allocate(size: u64) -> void*;
fn @import @stdcall Reallocate(ptr: void*, oldSize: u64, newSize: u64) -> void* ;
fn @import @stdcall Free(ptr: void*, size: u64) ;
enum @specified FileOpenFlags {
FILE_READ_ONLY = 0x1,
 FILE_CLEAR_AND_WRITE = 0x2,
FILE_READ_AND_WRITE = 0x4,
}
fn @import @stdcall FileOpen(path: Slice<char>*, flags: FileOpenFlags, outFileSize: u64* = null) -> u64;
fn @import @stdcall FileRead(file: u64, buffer: void*, readBytes: u64) -> u64;
fn @import @stdcall FileWrite(file: u64, buffer: void*, writeBytes: u64) -> u64;
fn @import @stdcall FileClose(file: u64);
fn FileExist(path: Slice<char>, is_dir: bool* = null, is_file: bool* = null) -> bool {
}
fn @native CurrentWorkingDirectory() -> char[];
 fn @import @stdcall StartMeasure() -> u64;
fn @import @stdcall StopMeasure(timePoint: u64) -> f32;
 fn @import @stdcall DiffMeasure(endSubStart: u64) -> f32;
 fn @import @stdcall NativeSleep(seconds: f32);
fn @import CmdLineArgs() -> Slice<Slice<char>>*;
fn @import GetClockSpeed() -> u64;
fn @import ExecuteCommand(path: Slice<char>*, asynchronous: bool = false, exitCode: i32* = null) -> bool;
struct DirectoryIteratorData {
name: char[];
 fileSize: u64;
lastWriteSeconds: f32;
isDirectory: bool;
}
struct DirectoryIterator {
_handle: u64;
rootPath: char[];
 result: DirectoryIteratorData;
fn next() -> DirectoryIteratorData* {
return DirectoryIteratorNext(this);
}
fn skip() {
DirectoryIteratorSkip(this);
}
}
