/*
    This script prepares a release of the compiler.

    The release contains these things:
    - Executable
    - Docs
    - Examples
    - Libs (C libs)
    - Modules

    We prepare a release for Windows and Linux
*/

#import "File"
#import "Array"
#import "Logger"
#import "String"
#import "OS"

fn main() {

    // ###############
    //      Config
    // #################

    // btb-win-x64-2024-06
    // btb-linux-x64-2024-06a // a = revision

    path_release: StringBuilder
    path_release.append("bin/")
    path_release.append("btb-win_x64-")
    path_release.append(substring(#date, 0,7))

    path_exe        := "bin/btb.exe"
    path_docs       := "docs"
    path_examples   := "examples"
    path_libs       := "libs"
    path_modules    := "modules"

    // #################
    //      Code
    // #################


    // compile compiler

    log(path_release)

    DirectoryCreate(path_release.sliced())

    cmd: StringBuilder
    cmd.append("build.bat release ")
    cmd.append(path_release)
    cmd.append("/btb.exe")
    // log(cmd)
    // ExecuteCommand(cmd.sliced(), null, true)

    fn DirectoryCopy(src: char[], dst: char[]) {
        cmd: StringBuilder
        // Y = don't prompt when overwiting files
        // Q = don't display copied files
        // S = recursive copy
        // D = only copy newer files
        cmd.append("xcopy /Y /Q /S /D ")
        start_index := cmd.len

        cmd.append(src)
        if src[src.len-1] != '/'
            cmd.append("/") // path should have a trailing slash to indicate that it's a directory and not a file, xcopy will prompt the user otherwise
        cmd.append(" ")
        cmd.append(dst)
        if dst[dst.len-1] != '/'
            cmd.append("/")

        // xcopy requires backslash in file name
        for start_index..cmd.len
            if cmd.ptr[nr] == '/'
                cmd.ptr[nr] = '\\'
        
        // log(cmd)

        // TODO: redirect stdout to nul
        ExecuteCommand(cmd.sliced(), null, true)
    }

    #macro COPY_DIR(path)
    {
        tmp := path_release.copy()
        tmp.append("/" ## path)
        DirectoryCopy(path,tmp.sliced());
    }
    #endmacro

    COPY_DIR("docs")
    COPY_DIR("examples")
    COPY_DIR("modules")
    COPY_DIR("libs")
    COPY_DIR("assets") // not strictly necessary but there are some examples that rely on fonts
}