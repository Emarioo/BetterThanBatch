/*
    This script prepares a release of the compiler.

    The release contains these things:
    - Executable
    - Docs
    - Examples
    - Libs (C libs)
    - Modules

    We prepare a release for Windows and Linux
*/

#import "File"
#import "Array"
#import "Logger"
#import "String"
#import "OS"

fn main() {

    // ###############
    //      Config
    // #################

    // btb-win-x64-2024-06
    // btb-linux-x64-2024-06a // a = revision

    path_release: StringBuilder
    path_release.append("bin/")
    #if OS_WINDOWS
        path_release.append("btb-win_x64-")
        path_exe        := "bin/btb.exe"
    #else
        path_release.append("btb-linux_x64-")
        path_exe        := "bin/btb"
    #endif
    path_release.append(substring(#date, 0,7))

    path_docs       := "docs"
    path_examples   := "examples"
    path_libs       := "libs"
    path_modules    := "modules"

    // #################
    //      Code
    // #################


    // compile compiler

    // log(path_release)

    DirectoryCreate(path_release.sliced())

    cmd: StringBuilder
    #if OS_WINDOWS
        cmd.append("python build.py msvc use_optimizations output=")
        cmd.append(path_release)
        cmd.append("/btb.exe")
    #else
        cmd.append("python3 build.py gcc use_optimizations output=")
        cmd.append(path_release)
        cmd.append("/btb")
    #endif
    // log(cmd)
    ExecuteCommand(cmd.sliced(), null, true)

    #macro COPY_DIR(path)
    {
        tmp := path_release.copy()
        tmp.append("/" ## path)
        DirectoryCopy(path,tmp.sliced());
    }
    #endmacro

    COPY_DIR("docs")
    COPY_DIR("examples")
    COPY_DIR("modules")
    COPY_DIR("libs")
    COPY_DIR("assets") // not strictly necessary but there are some examples that rely on fonts

    readme := @strbeg
Hello curious programmer!

This is the 0.2.0 version of the compiler. Read guide and examples provided with the release to begin using the language and compiler!

**DISCLAIMER**: This version is not very stable. You will most likely run in to bugs and problems. You can report any bugs you find on the github repository `www.github.com/Emarioo/BetterThanBatch`

The standard library is very experimental, functions interacting with the operating system does not handle errors very well and so on.
    @strend

    {
        tmp := path_release.copy()
        tmp.append("/README.md")
        // log(tmp)
        file := FileOpen(tmp.sliced(), FILE_CLEAR_AND_WRITE, null)
        // log(name_of_error(HandleToInternal(file)))
        err := FileWrite(file, readme.ptr, readme.len)
        // log(name_of_error(err))
        FileClose(file)
    }
}