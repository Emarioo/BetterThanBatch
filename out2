[DEVMODE]
Tokenize: <base-structs>
Parse: <base-structs>
Tokenize: ...rojects/BetterThanBatch/examples/dev.btb
Preprocess (imports): ...rojects/BetterThanBatch/examples/dev.btb
Tokenize: ...jects/BetterThanBatch/modules/Logger.btb
Preprocess (imports): ...jects/BetterThanBatch/modules/Logger.btb
Tokenize: ...eProjects/BetterThanBatch/modules/OS.btb
Preprocess (imports): ...eProjects/BetterThanBatch/modules/OS.btb
Preprocess: ...eProjects/BetterThanBatch/modules/OS.btb
Parse: ...eProjects/BetterThanBatch/modules/OS.btb
Preprocess: ...jects/BetterThanBatch/modules/Logger.btb
Parse: ...jects/BetterThanBatch/modules/Logger.btb
Preprocess: ...rojects/BetterThanBatch/examples/dev.btb
Parse: ...rojects/BetterThanBatch/examples/dev.btb
Type check:
Struct Range (size: 8, scope: 0)
 0: beg (4 bytes)
 4: end (4 bytes)
Struct Slice<char> (size: 16, poly. impl., scope: 0)
 0: ptr (8 bytes)
 8: len (8 bytes)
Struct DirectoryIteratorData (size: 32, scope: 0)
 0: name (16 bytes)
 16: fileSize (8 bytes)
 24: lastWriteSeconds (4 bytes)
 31: isDirectory (1 bytes)
Struct DirectoryIterator (size: 56, scope: 0)
 0: handle (8 bytes)
 8: rootPath (16 bytes)
 24: result (32 bytes)
Struct Slice<Slice<char>> (size: 16, poly. impl., scope: 0)
 0: ptr (8 bytes)
 8: len (8 bytes)
Generating code:
Compiled 78 lines (107 blanks, 4.75 KB in source files) in 3.35 ms
 (23.29 K lines/s)
Initializing native registry again (2 time(s) so far).
##   Interpreter   ##
FUNCTION SEGMENT
0: BC_JMP   , 421
GLOBAL CODE SEGMENT
dev.btb:17:1: str = "a.pp"
421: BC_INCR sp -16, 
422: BC_LI rcx  , -16
424: BC_ADDI rcx fp rcx, 1956128746752 = -16 + 1956128746768
425: BC_BXOR rax rax rax, 0 = 0 ^ 0
426: BC_MOV_RM rax fp 8, 0
427: BC_LI rcx  , -16
429: BC_ADDI rcx fp rcx, 1956128746752 = -16 + 1956128746768
430: BC_BXOR rax rax rax, 0 = 0 ^ 0
431: BC_MOV_RM rax fp 8, 0
432: BC_LI rax  , 4
434: BC_PUSH rax  , 4
435: BC_LI rbx  , 4
437: BC_ADDI dp rbx rbx, 1956128929108 = 1956128929104 + 4
438: BC_PUSH rbx  , 1956128929108
439: BC_POP rax  , 1956128929108
440: BC_LI rcx  , -16
442: BC_ADDI fp rcx rcx, 1956128746752 = 1956128746768 + -16
443: BC_MOV_RM rax rcx 8, 1956128929108
444: BC_POP rax  , 4
445: BC_LI rcx  , -8
447: BC_ADDI fp rcx rcx, 1956128746760 = 1956128746768 + -8
448: BC_MOV_RM rax rcx 8, 4
dev.btb:19:1: matchEnd(str,".cpp")
449: BC_INCR sp -32, 
450: BC_LI rcx  , -8
452: BC_ADDI fp rcx rcx, 1956128746760 = 1956128746768 + -8
453: BC_MOV_MR rcx rax 8, 4
454: BC_PUSH rax  , 4
455: BC_LI rcx  , -16
457: BC_ADDI fp rcx rcx, 1956128746752 = 1956128746768 + -16
458: BC_MOV_MR rcx rax 8, 1956128929108
459: BC_PUSH rax  , 1956128929108
460: BC_LI rax  , 4
462: BC_PUSH rax  , 4
463: BC_LI rbx  , 0
465: BC_ADDI dp rbx rbx, 1956128929104 = 1956128929104 + 0
466: BC_PUSH rbx  , 1956128929104
467: BC_LI rbx  , 32
469: BC_ADDI rbx sp rbx, 1956128746720 = 32 + 1956128746688
470: BC_POP rax  , 1956128929104
471: BC_MOV_RM rax rbx 8, 1956128929104
472: BC_POP rax  , 4
473: BC_LI rcx  , 8
475: BC_ADDI rbx rcx rcx, 1956128746728 = 1956128746720 + 8
476: BC_MOV_RM rax rcx 8, 4
477: BC_POP rax  , 1956128929108
478: BC_LI rcx  , 16
480: BC_ADDI rbx rcx rcx, 1956128746736 = 1956128746720 + 16
481: BC_MOV_RM rax rcx 8, 1956128929108
482: BC_POP rax  , 4
483: BC_LI rcx  , 24
485: BC_ADDI rbx rcx rcx, 1956128746744 = 1956128746720 + 24
486: BC_MOV_RM rax rcx 8, 4
487: BC_LI rax  , 137
489: BC_CALL rax  , 
dev.btb:32:1: fn matchEnd(str: char[], match: char[]) -> bool {
137: BC_LI rcx  , 1
139: BC_SUBI fp rcx rbx, 1956128746703 = 1956128746704 - 1
140: BC_MEMZERO rbx rcx ,  [0-1]
141: BC_INCR sp -1, 
dev.btb:33:8: if str.len < match.len
142: BC_LI rbx  , 32
144: BC_ADDI fp rbx rbx, 1956128746736 = 1956128746704 + 32
145: BC_INCR sp -7, 
146: BC_PUSH rbx  , 1956128746736
147: BC_POP rbx  , 1956128746736
148: BC_INCR sp 7, 
149: BC_LI eax  , 8
151: BC_ADDI rbx eax rbx, 1956128746744 = 1956128746736 + 8
152: BC_INCR sp -7, 
153: BC_PUSH rbx  , 1956128746744
154: BC_POP rbx  , 1956128746744
155: BC_INCR sp 7, 
156: BC_MOV_MR rbx rax 8, 4
157: BC_INCR sp -7, 
158: BC_PUSH rax  , 4
159: BC_LI rbx  , 16
161: BC_ADDI fp rbx rbx, 1956128746720 = 1956128746704 + 16
162: BC_PUSH rbx  , 1956128746720
163: BC_POP rbx  , 1956128746720
164: BC_LI eax  , 8
166: BC_ADDI rbx eax rbx, 1956128746728 = 1956128746720 + 8
167: BC_PUSH rbx  , 1956128746728
168: BC_POP rbx  , 1956128746728
169: BC_MOV_MR rbx rax 8, 4
170: BC_PUSH rax  , 4
171: BC_POP rcx  , 4
172: BC_POP rax  , 4
173: BC_INCR sp 7, 
174: BC_LT rax rcx rax, 0 = 4 < 4
175: BC_INCR sp -7, 
176: BC_PUSH rax  , 0
177: BC_POP rax  , 0
178: BC_INCR sp 7, 
179: BC_JNE rax  , testval: 0, jumpto: 192
dev.btb:36:5: for @reverse match {
192: BC_INCR sp -4, 
193: BC_LI rcx  , 24
195: BC_ADDI fp rcx rcx, 1956128746728 = 1956128746704 + 24
196: BC_MOV_MR rcx rax 8, 4
197: BC_INCR sp -3, 
198: BC_PUSH rax  , 4
199: BC_LI rcx  , 16
201: BC_ADDI fp rcx rcx, 1956128746720 = 1956128746704 + 16
202: BC_MOV_MR rcx rax 8, 1956128929104
203: BC_PUSH rax  , 1956128929104
204: BC_POP rax  , 1956128929104
205: BC_POP rax  , 4
206: BC_INCR sp 3, 
207: BC_CAST 3 rax eax, 
208: BC_INCR sp -3, 
209: BC_PUSH eax  , 4
210: BC_INCR sp -1, 
211: BC_LI rcx  , -9
213: BC_ADDI rcx fp rcx, 1956128746695 = -9 + 1956128746704
214: BC_BXOR rax rax rax, 0 = 4 ^ 4
215: BC_MOV_RM rax fp 1, 0
216: BC_LI rcx  , 24
218: BC_ADDI fp rcx rcx, 1956128746728 = 1956128746704 + 24
219: BC_MOV_MR rcx rax 8, 4
220: BC_INCR sp -7, 
221: BC_PUSH rax  , 4
222: BC_LI rcx  , 16
224: BC_ADDI fp rcx rcx, 1956128746720 = 1956128746704 + 16
225: BC_MOV_MR rcx rax 8, 1956128929104
226: BC_PUSH rax  , 1956128929104
227: BC_POP rbx  , 1956128929104
228: BC_POP rdx  , 4
229: BC_INCR sp 7, 
230: BC_LI rax  , -8
232: BC_ADDI fp rax rax, 1956128746696 = 1956128746704 + -8
233: BC_MOV_MR rax ecx 4, 4
234: BC_INCR ecx -1, 
235: BC_MOV_RM ecx rax 4, 3
236: BC_LI rdx  , -1
238: BC_GT ecx rdx eax, 1 = 3 > -1
239: BC_JNE eax  , testval: 1, jumpto: 357
241: BC_LI rdx  , 1
243: BC_MULI ecx rdx rax, 3 = 3 * 1
244: BC_ADDI rbx rax rbx, 1956128929107 = 1956128929104 + 3
245: BC_LI rax  , -9
247: BC_ADDI fp rax rcx, 1956128746695 = 1956128746704 + -9
248: BC_MEMCPY rcx rbx rdx, dev.btb:37:9: chr = str.ptr[nr + str.len - match.len];
249: BC_INCR sp -1, 
250: BC_LI rcx  , -10
252: BC_ADDI rcx fp rcx, 1956128746694 = -10 + 1956128746704
253: BC_BXOR rax rax rax, 0 = -9 ^ -9
254: BC_MOV_RM rax fp 1, 0
255: BC_LI rbx  , 32
257: BC_ADDI fp rbx rbx, 1956128746736 = 1956128746704 + 32
258: BC_INCR sp -6, 
259: BC_PUSH rbx  , 1956128746736
260: BC_POP rbx  , 1956128746736
261: BC_INCR sp 6, 
262: BC_INCR sp -6, 
263: BC_PUSH rbx  , 1956128746736
264: BC_POP rbx  , 1956128746736
265: BC_INCR sp 6, 
266: BC_MOV_MR rbx rax 8, 1956128929108
267: BC_INCR sp -6, 
268: BC_PUSH rax  , 1956128929108
269: BC_LI rcx  , -8
271: BC_ADDI fp rcx rcx, 1956128746696 = 1956128746704 + -8
272: BC_MOV_MR rcx eax 4, 3
273: BC_PUSH eax  , 3
274: BC_LI rbx  , 32
276: BC_ADDI fp rbx rbx, 1956128746736 = 1956128746704 + 32
277: BC_PUSH rbx  , 1956128746736
278: BC_POP rbx  , 1956128746736
279: BC_LI eax  , 8
281: BC_ADDI rbx eax rbx, 1956128746744 = 1956128746736 + 8
282: BC_PUSH rbx  , 1956128746744
283: BC_POP rbx  , 1956128746744
284: BC_MOV_MR rbx rax 8, 4
285: BC_PUSH rax  , 4
286: BC_LI rbx  , 16
288: BC_ADDI fp rbx rbx, 1956128746720 = 1956128746704 + 16
289: BC_PUSH rbx  , 1956128746720
290: BC_POP rbx  , 1956128746720
291: BC_LI eax  , 8
293: BC_ADDI rbx eax rbx, 1956128746728 = 1956128746720 + 8
294: BC_PUSH rbx  , 1956128746728
295: BC_POP rbx  , 1956128746728
296: BC_MOV_MR rbx rax 8, 4
297: BC_PUSH rax  , 4
298: BC_POP rcx  , 4
299: BC_POP rax  , 4
300: BC_SUBI rax rcx rax, 0 = 4 - 4
301: BC_PUSH rax  , 0
302: BC_POP rcx  , 0
303: BC_POP eax  , 3
304: BC_ADDI eax rcx eax, 3 = 3 + 0
305: BC_PUSH eax  , 3
306: BC_POP edx  , 3
307: BC_POP rbx  , 1956128929108
308: BC_INCR sp 6, 
309: BC_LI eax  , 1
311: BC_MULI edx eax edx, 3 = 3 * 1
312: BC_ADDI rbx edx rbx, 1956128929111 = 1956128929108 + 3
313: BC_MOV_MR rbx al 1, 112
314: BC_INCR sp -6, 
315: BC_PUSH al  , 112
316: BC_POP al  , 112
317: BC_INCR sp 6, 
318: BC_LI rcx  , -10
320: BC_ADDI fp rcx rcx, 1956128746694 = 1956128746704 + -10
321: BC_MOV_RM al rcx 1, 112
dev.btb:38:12: if it != chr
322: BC_LI rcx  , -9
324: BC_ADDI fp rcx rcx, 1956128746695 = 1956128746704 + -9
325: BC_MOV_MR rcx al 1, 112
326: BC_INCR sp -6, 
327: BC_PUSH al  , 112
328: BC_LI rcx  , -10
330: BC_ADDI fp rcx rcx, 1956128746694 = 1956128746704 + -10
331: BC_MOV_MR rcx al 1, 112
332: BC_PUSH al  , 112
333: BC_POP cl  , 112
334: BC_POP al  , 112
335: BC_INCR sp 6, 
336: BC_NEQ al cl cl, 0 = 112 != 112
337: BC_INCR sp -6, 
338: BC_PUSH cl  , 0
339: BC_POP al  , 0
340: BC_INCR sp 6, 
341: BC_JNE al  , testval: 0, jumpto: 354
dev.btb:37:9: chr = str.ptr[nr + str.len - match.len];
354: BC_INCR sp 1, 
dev.btb:36:5: for @reverse match {
355: BC_JMP   , 216
dev.btb:36:5: for @reverse match {
216: BC_LI rcx  , 24
218: BC_ADDI fp rcx rcx, 1956128746728 = 1956128746704 + 24
219: BC_MOV_MR rcx rax 8, 4
220: BC_INCR sp -7, 
221: BC_PUSH rax  , 4
222: BC_LI rcx  , 16
224: BC_ADDI fp rcx rcx, 1956128746720 = 1956128746704 + 16
225: BC_MOV_MR rcx rax 8, 1956128929104
226: BC_PUSH rax  , 1956128929104
227: BC_POP rbx  , 1956128929104
228: BC_POP rdx  , 4
229: BC_INCR sp 7, 
230: BC_LI rax  , -8
232: BC_ADDI fp rax rax, 1956128746696 = 1956128746704 + -8
233: BC_MOV_MR rax ecx 4, 3
234: BC_INCR ecx -1, 
235: BC_MOV_RM ecx rax 4, 2
236: BC_LI rdx  , -1
238: BC_GT ecx rdx eax, 1 = 2 > -1
239: BC_JNE eax  , testval: 1, jumpto: 357
241: BC_LI rdx  , 1
243: BC_MULI ecx rdx rax, 2 = 2 * 1
244: BC_ADDI rbx rax rbx, 1956128929106 = 1956128929104 + 2
245: BC_LI rax  , -9
247: BC_ADDI fp rax rcx, 1956128746695 = 1956128746704 + -9
248: BC_MEMCPY rcx rbx rdx, dev.btb:37:9: chr = str.ptr[nr + str.len - match.len];
249: BC_INCR sp -1, 
250: BC_LI rcx  , -10
252: BC_ADDI rcx fp rcx, 1956128746694 = -10 + 1956128746704
253: BC_BXOR rax rax rax, 0 = -9 ^ -9
254: BC_MOV_RM rax fp 1, 0
255: BC_LI rbx  , 32
257: BC_ADDI fp rbx rbx, 1956128746736 = 1956128746704 + 32
258: BC_INCR sp -6, 
259: BC_PUSH rbx  , 1956128746736
260: BC_POP rbx  , 1956128746736
261: BC_INCR sp 6, 
262: BC_INCR sp -6, 
263: BC_PUSH rbx  , 1956128746736
264: BC_POP rbx  , 1956128746736
265: BC_INCR sp 6, 
266: BC_MOV_MR rbx rax 8, 1956128929108
267: BC_INCR sp -6, 
268: BC_PUSH rax  , 1956128929108
269: BC_LI rcx  , -8
271: BC_ADDI fp rcx rcx, 1956128746696 = 1956128746704 + -8
272: BC_MOV_MR rcx eax 4, 2
273: BC_PUSH eax  , 2
274: BC_LI rbx  , 32
276: BC_ADDI fp rbx rbx, 1956128746736 = 1956128746704 + 32
277: BC_PUSH rbx  , 1956128746736
278: BC_POP rbx  , 1956128746736
279: BC_LI eax  , 8
281: BC_ADDI rbx eax rbx, 1956128746744 = 1956128746736 + 8
282: BC_PUSH rbx  , 1956128746744
283: BC_POP rbx  , 1956128746744
284: BC_MOV_MR rbx rax 8, 4
285: BC_PUSH rax  , 4
286: BC_LI rbx  , 16
288: BC_ADDI fp rbx rbx, 1956128746720 = 1956128746704 + 16
289: BC_PUSH rbx  , 1956128746720
290: BC_POP rbx  , 1956128746720
291: BC_LI eax  , 8
293: BC_ADDI rbx eax rbx, 1956128746728 = 1956128746720 + 8
294: BC_PUSH rbx  , 1956128746728
295: BC_POP rbx  , 1956128746728
296: BC_MOV_MR rbx rax 8, 4
297: BC_PUSH rax  , 4
298: BC_POP rcx  , 4
299: BC_POP rax  , 4
300: BC_SUBI rax rcx rax, 0 = 4 - 4
301: BC_PUSH rax  , 0
302: BC_POP rcx  , 0
303: BC_POP eax  , 2
304: BC_ADDI eax rcx eax, 2 = 2 + 0
305: BC_PUSH eax  , 2
306: BC_POP edx  , 2
307: BC_POP rbx  , 1956128929108
308: BC_INCR sp 6, 
309: BC_LI eax  , 1
311: BC_MULI edx eax edx, 2 = 2 * 1
312: BC_ADDI rbx edx rbx, 1956128929110 = 1956128929108 + 2
313: BC_MOV_MR rbx al 1, 112
314: BC_INCR sp -6, 
315: BC_PUSH al  , 112
316: BC_POP al  , 112
317: BC_INCR sp 6, 
318: BC_LI rcx  , -10
320: BC_ADDI fp rcx rcx, 1956128746694 = 1956128746704 + -10
321: BC_MOV_RM al rcx 1, 112
dev.btb:38:12: if it != chr
322: BC_LI rcx  , -9
324: BC_ADDI fp rcx rcx, 1956128746695 = 1956128746704 + -9
325: BC_MOV_MR rcx al 1, 112
326: BC_INCR sp -6, 
327: BC_PUSH al  , 112
328: BC_LI rcx  , -10
330: BC_ADDI fp rcx rcx, 1956128746694 = 1956128746704 + -10
331: BC_MOV_MR rcx al 1, 112
332: BC_PUSH al  , 112
333: BC_POP cl  , 112
334: BC_POP al  , 112
335: BC_INCR sp 6, 
336: BC_NEQ al cl cl, 0 = 112 != 112
337: B