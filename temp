[DEVMODE]
Tokenize: <base>
Preprocess (imports): <base>
Preprocess: <base>
Parse: <base>
Parsed struct Slice with 2 members
Parsed struct Range with 2 members
Tokenize: ...ts/BetterThanBatch/examples/x64_test.btb
Preprocess (imports): ...ts/BetterThanBatch/examples/x64_test.btb
Tokenize: ...ects/BetterThanBatch//modules/Logger.btb
Preprocess (imports): ...ects/BetterThanBatch//modules/Logger.btb
Preprocess: ...ects/BetterThanBatch//modules/Logger.btb
Parse: ...ects/BetterThanBatch//modules/Logger.btb
Preprocess: ...ts/BetterThanBatch/examples/x64_test.btb
Parse: ...ts/BetterThanBatch/examples/x64_test.btb
Final AST
  Body (scope: 0)
    Func printBits (scope: 17) 
      bits: u64
      Body (scope: 18)
        Statement for it
          Expr .. 
            Expr i32 0
            Expr i32 32
          Body (scope: 19)
            Statement if
              Expr & 
                Expr ast-id bits
                Expr << 
                  Expr cast u64
                    Expr i32 1
                  Expr ast-id nr
              Body (scope: 20)
                Statement expression
                  Expr ast-call _print args:
                    Expr char 1
              Body (scope: 19)
                Statement expression
                  Expr ast-call _print args:
                    Expr char 0
        Statement expression
          Expr ast-call _print args:
            Expr char 

    Statement expression
      Expr ast-call _print args:
        Expr i32 0
    Statement expression
      Expr ast-call _print args:
        Expr ast-string "\n"
Type check:
Struct Range (size: 8, scope: 0)
 0: beg (4 bytes)
 4: end (4 bytes)
Struct Slice<char> (size: 16, poly. impl., scope: 0)
 0: ptr (8 bytes)
 8: len (8 bytes)
Generating code:
Jump to skip functions
0: BC_JMP   
1: 0
enter GenerateFunctions
Native function prints
Native function printi
Native function printc
Native function printd
  enter GenerateFunctions
  exit  GenerateFunctions
  enter GenerateFunction
Function _print
set 1 args
 [16] t: i64

2: BC_PUSH fp  
relsp -8
3: BC_MOV_RR sp fp 
    enter GenerateBody
      enter IF
        enter GenerateExpression
          enter GenerateExpression
 expr var push t
4: BC_MOV_MR_DISP32 fp rax 8
5: 16
6: BC_PUSH rax  
relsp -16
          exit  GenerateExpression
          enter GenerateExpression
7: BC_LI eax  
8: 0
9: BC_PUSH eax  
relsp -24
          exit  GenerateExpression
relsp -16
9: BC_POP rcx  
relsp -8
10: BC_EQ rcx eax rcx
11: BC_PUSH rcx  
relsp -16
        exit  GenerateExpression
12: BC_POP rax  
relsp -8
13: BC_JNE rax  
14: 0
        enter GenerateBody
          enter EXPRESSION
            enter GenerateExpression
Overload: printc(char)
15: BC_INCR sp -8
relsp -16
              enter GenerateExpression
16: BC_LI al  
17: 48
18: BC_PUSH al  
relsp -24
              exit  GenerateExpression
19: BC_MOV_RR sp rbx 
move return value
20: BC_POP al  
relsp -16
21: BC_MOV_RM_DISP32 al rbx 1
22: 15
23: BC_CALL native betcall
24: 999999999
pop arguments
25: BC_INCR sp 8
relsp -8
            exit  GenerateExpression
          exit  EXPRESSION
          enter RETURN
26: BC_POP fp  
relsp 0
27: BC_RET   
          exit  RETURN
        exit  GenerateBody
      exit  IF
      enter ASSIGN
28: BC_INCR sp -24
relsp -24
29: BC_LI rdx  
30: 24
31: BC_MEMZERO sp rdx 
32: BC_INCR sp -16
relsp -40
33: BC_LI rdx  
34: 20
35: BC_PUSH rdx  
relsp -48
36: BC_LI rbx  
37: -24
38: BC_ADDI rbx fp rbx
39: BC_PUSH rbx  
relsp -56
move return value member ptr
move return value
40: BC_POP rax  
relsp -48
41: BC_MOV_RM_DISP32 rax fp 8
42: -40
move return value member len
move return value
43: BC_POP rax  
relsp -40
44: BC_MOV_RM_DISP32 rax fp 8
45: -32
declare str at -40
 str : Slice<char>
      exit  ASSIGN
      enter ASSIGN
46: BC_INCR sp -8
relsp -48
declare used at -48
 used : i32
        enter GenerateExpression
47: BC_LI eax  
48: 19
49: BC_PUSH eax  
relsp -56
        exit  GenerateExpression
assign pop i32
move return value
relsp -48
49: BC_MOV_RM_DISP32 eax fp 4
50: -48
      exit  ASSIGN
      enter WHILE
push loop
        enter GenerateExpression
          enter GenerateExpression
            enter GenerateExpression
 expr var push t
51: BC_MOV_MR_DISP32 fp rax 8
52: 16
53: BC_PUSH rax  
relsp -56
            exit  GenerateExpression
            enter GenerateExpression
54: BC_LI eax  
55: 0
56: BC_PUSH eax  
relsp -64
            exit  GenerateExpression
relsp -56
56: BC_POP rcx  
relsp -48
57: BC_GT rcx eax rcx
58: BC_PUSH rcx  
relsp -56
          exit  GenerateExpression
          enter GenerateExpression
            enter GenerateExpression
 expr var push used
59: BC_MOV_MR_DISP32 fp eax 4
60: -48
61: BC_PUSH eax  
relsp -64
            exit  GenerateExpression
            enter GenerateExpression
62: BC_LI eax  
63: 0
64: BC_PUSH eax  
relsp -72
            exit  GenerateExpression
relsp -64
64: BC_POP ecx  
relsp -56
65: BC_GT ecx eax ecx
66: BC_PUSH ecx  
relsp -64
          exit  GenerateExpression
67: BC_POP eax  
relsp -56
68: BC_POP rcx  
relsp -48
69: BC_ANDI rcx eax rcx
70: BC_PUSH rcx  
relsp -56
        exit  GenerateExpression
71: BC_POP rax  
relsp -48
72: BC_JNE rax  
73: 0
        enter GenerateBody
          enter ASSIGN
74: BC_INCR sp -8
relsp -56
declare num at -56
 num : i64
            enter GenerateExpression
              enter GenerateExpression
 expr var push t
75: BC_MOV_MR_DISP32 fp rax 8
76: 16
77: BC_PUSH rax  
relsp -64
              exit  GenerateExpression
              enter GenerateExpression
78: BC_LI eax  
79: 10
80: BC_PUSH eax  
relsp -72
              exit  GenerateExpression
81: BC_POP ecx  
relsp -64
82: BC_POP rax  
relsp -56
83: BC_MODI rax ecx rdx
84: BC_PUSH rdx  
relsp -64
            exit  GenerateExpression
assign pop i64
move return value
85: BC_POP rax  
relsp -56
86: BC_MOV_RM_DISP32 rax fp 8
87: -56
          exit  ASSIGN
          enter EXPRESSION
            enter GenerateExpression
              enter GenerateExpression
                enter GenerateExpression
 expr var push num
88: BC_MOV_MR_DISP32 fp rax 8
89: -56
90: BC_PUSH rax  
relsp -64
                exit  GenerateExpression
                enter GenerateExpression
91: BC_LI al  
92: 48
93: BC_PUSH al  
relsp -72
                exit  GenerateExpression
relsp -64
93: BC_POP rcx  
relsp -56
94: BC_ADDI rcx al rcx
95: BC_PUSH rcx  
relsp -64
              exit  GenerateExpression
              enter GenerateReference
 expr var push str
96: BC_LI rbx  
97: -40
98: BC_ADDI fp rbx rbx
99: BC_PUSH rbx  
relsp -72
                enter GenerateExpression
 expr var push used
100: BC_MOV_MR_DISP32 fp eax 4
101: -48
102: BC_PUSH eax  
relsp -80
                exit  GenerateExpression
103: BC_POP edx  
relsp -72
104: BC_POP rbx  
relsp -64
105: BC_MOV_MR rbx rcx 8
106: BC_LI eax  
107: 1
108: BC_MULI edx eax edx
109: BC_ADDI rcx edx rcx
110: BC_PUSH rcx  
relsp -72
              exit  GenerateReference
111: BC_POP rbx  
relsp -64
112: BC_POP rax  
relsp -56
113: BC_CAST 4 rax al
114: BC_PUSH al  
relsp -64
move return value
relsp -56
114: BC_MOV_RM al rbx 1
115: BC_MOV_MR rbx al 1
116: BC_PUSH al  
relsp -64
            exit  GenerateExpression
move return value
117: BC_POP rax  
relsp -56
          exit  EXPRESSION
          enter EXPRESSION
            enter GenerateExpression
              enter GenerateReference
 expr var push used
118: BC_LI rbx  
119: -48
120: BC_ADDI fp rbx rbx
121: BC_PUSH rbx  
relsp -64
              exit  GenerateReference
relsp -56
121: BC_MOV_MR rbx eax 4
122: BC_PUSH eax  
relsp -64
123: BC_INCR eax -1
124: BC_MOV_RM eax rbx 4
            exit  GenerateExpression
move return value
125: BC_POP eax  
relsp -56
          exit  EXPRESSION
          enter ASSIGN
 t : i64
            enter GenerateExpression
              enter GenerateExpression
 expr var push t
126: BC_MOV_MR_DISP32 fp rax 8
127: 16
128: BC_PUSH rax  
relsp -64
              exit  GenerateExpression
              enter GenerateExpression
129: BC_LI eax  
130: 10
131: BC_PUSH eax  
relsp -72
              exit  GenerateExpression
132: BC_POP ecx  
relsp -64
133: BC_POP rax  
relsp -56
134: BC_DIVI rax ecx rax
135: BC_PUSH rax  
relsp -64
      