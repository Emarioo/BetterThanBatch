/*
## Module for memory ##
    - Allocators
    - Memory copies, moves

*/

// TODO: import the right OS bindings
#import "Windows"

// temporary
#import "Logger"
#import "Map" // used for tracker
#import "Lang" // used for tracker

// source and destination should not overlap
fn @intrinsic memcpy(dst: void*, src: void*, len: i64);
fn @intrinsic memzero(dst: void*, len: i64);

fn Allocate(size: i64) -> void* {
    return AllocateHeap(size)
}
fn Reallocate(size: i64, ptr: void*, old_size: i64 = 0) -> void* {
    return AllocateHeap(size, ptr, old_size)
}
fn Free(ptr: void*, old_size: i64 = 0) {
    AllocateHeap(0, ptr, old_size)
}
//   alloc - AllocateHeap(64)
//    free - AllocateHeap(0, ptr, old_size = 64)
// realloc - AllocateHeap(128, ptr, old_size = 64)
fn AllocateHeap(size: i64, ptr: void* = null, old_size: i64 = 0) -> void* {
#if OS_WINDOWS
    // global mut: Mutex;
    // mut.lock()
    // defer mut.unlock()
    // std_print("enter heap\n")
    // defer std_print("leave heap\n")
    heap := GetProcessHeap()
    if !size {
        if ptr {
            HeapFree(heap, 0, ptr)
            // if type.index() == 0
                memory_tracker.remove(ptr, old_size)
            // else
            //     memory_tracker.remove(ptr, old_size, type)
        }
        return null
    }
    new_ptr: void*
    if !ptr {
        new_ptr = HeapAlloc(heap, 0, size)
        // if type.index() == 0
        #if ENABLED_STABLE_GLOBALS
            // hotreloading + stable globals requires allocation for stable globals
            // but to track stuff we require global data
            // so it's an infinite loop
            // this disables tracking if we use stable globals and if we 
            // dont have stable globals memory ready yet, scuffed and complicated but it works
            if stable_global_memory
        #endif
            memory_tracker.add(new_ptr, size)
        // else
        //     memory_tracker.add(new_ptr, size, type)
    } else {
        new_ptr = HeapReAlloc(heap, 0, ptr, size)
        // if type.index() == 0 {
            memory_tracker.remove(ptr, old_size) // we must remove first incase HeapReAlloc returns the same pointer
            // memory_tracker.add(new_ptr, size)
        // } else {
        //     memory_tracker.remove(ptr, old_size, type)
        //     memory_tracker.add(new_ptr, size, type)
        // }
    }
    if !new_ptr || new_ptr == STATUS_NO_MEMORY || new_ptr == STATUS_ACCESS_VIOLATION {
        return null
    }
    return new_ptr
#elif OS_LINUX

    // TODO: We might implement a custom heap allocator for Linux, or maybe not but
    //   we shall use libc's heap for now.

    #load "c" as libc
    fn @import(libc) malloc(size: i32) -> void*;
    fn @import(libc) realloc(ptr: void*, size: i32) -> void*;
    fn @import(libc) free(ptr: void*);

    if !size {
        if ptr {
            free(ptr)
            memory_tracker.remove(ptr, old_size)
        }
        return null
    }
    new_ptr: void*
    if !ptr {
        // malloc may crash if sp isn't aligned, bug in x64_gen if so
        new_ptr = malloc(size)
        memory_tracker.add(new_ptr, size)
    } else {
        new_ptr = realloc(ptr, size)
        memory_tracker.remove(ptr, old_size)
        memory_tracker.add(new_ptr, size)
    }
    return new_ptr
#endif
}


#macro LOG_TRACKER(...) log("Tracker: ",...)
// #macro LOG_TRACKER(...) #endmacro

// TODO: Debug locations
struct MemoryTracker_Item {
    type: lang_TypeId;
    count: i32;
    allocations: Map<void*, i32>;
}
fn hash(v: lang_TypeId) -> u32 {
    // Assert(4 == sizeof lang_TypeId)
    return *cast<u32*>&v
}
// NOTE: Remember to initialize tracker
struct MemoryTracker {
    allocations: Map<void*, i32>;
    map_types: Map<u32, MemoryTracker_Item>; // u32 is a hashed lang_TypeId
    initialized: bool;
    disabled: bool = true;
    fn init() {
        allocations.init(10000)
        map_types.init(200)
        initialized = true
    }
    fn add(ptr: void*, size: i32) {
        if !initialized || disabled
            return; 
        disabled = true
        defer disabled = false
        value_ptr := allocations.find(ptr)
        if value_ptr {
            if *value_ptr != 0 {
                LOG_TRACKER("Cannot add allocation ", ptr, ", pointer already exists.")
                return;
            }
        }
        allocations.set(ptr, size)
    }
    fn add(ptr: void*, size: i32, type: lang_TypeId) {
        if !initialized || disabled
            return;
        disabled = true
        defer disabled = false

        hashed_type := hash(type)
        item := map_types.find(hashed_type)
        if !item {
            item = map_types.set(hashed_type, MemoryTracker_Item{})
            if !item {
                log("Tracker: map_types.set() returned null")
                return;
            }
            item.type = type
            item.allocations.init(400)
        }

        value_ptr := item.allocations.find(ptr)

        if value_ptr {
            if *value_ptr != 0 {
                LOG_TRACKER("Cannot add allocation ", ptr, ", pointer already exists.")
                return;
            }
        }
        item.count += size / cast<i32>lang_typesize(type)
        item.allocations.set(ptr, size)
    }
    // you may not know the allocated size so you don't have to specifify it, however, if you do specify and the sizes don't match, more bugs may be caught.
    fn remove(ptr: void*, size: i32 = 0) {
        if !initialized || disabled
            return;
        disabled = true
        defer disabled = false
        value_ptr := allocations.find(ptr)
        if !value_ptr {
            LOG_TRACKER("Cannot remove allocation ", ptr, ", it doesn't exist.")
            return;
        }
        if *value_ptr == 0 {
            LOG_TRACKER("Cannot remove allocation ", ptr, ", it existed at one point but not anymore.")
            return;
        }
        if size != 0 && *value_ptr != size {
            LOG_TRACKER("When removing allocation ", ptr, ", expected size of allocation didn't match (",size,"!=",*value_ptr,").")
        }
        allocations.set(ptr, 0) // we set to 0 instead of removing because it's useful to know if pointer existed at one point in time
        // allocations.remove(ptr)
    }
   
    // you may not know the allocated size so you don't have to specifify it, however, if you do specify and the sizes don't match, more bugs may be caught.
    fn remove(ptr: void*, size: i32, type: lang_TypeId) {
        if !initialized || disabled
            return;
        disabled = true
        defer disabled = false

        hashed_type := hash(type)
        item := map_types.find(hashed_type)
        if !item {
            item = map_types.set(hashed_type, MemoryTracker_Item{})
            if !item {
                log("Tracker: map_types.set() returned null")
                return;
            }
            item.type = type
            item.allocations.init(400)
        }

        value_ptr := item.allocations.find(ptr)
        if !value_ptr {
            LOG_TRACKER("Cannot remove allocation ", ptr, ", it doesn't exist.")
            return;
        }
        if *value_ptr == 0 {
            LOG_TRACKER("Cannot remove allocation ", ptr, ", it existed at one point but not anymore.")
            return;
        }
        if size != 0 && *value_ptr != size {
            LOG_TRACKER("When removing allocation ", ptr, ", expected size of allocation didn't match (",size,"!=",*value_ptr,").")
        }
        item.count -= size / cast<i32>lang_typesize(type)
        item.allocations.set(ptr, 0) // we set to 0 instead of removing because it's useful to know if pointer existed at one point in time
        // allocations.remove(ptr)
    }

    fn print_memory() {
        disabled = true
        defer disabled = false
        {
            log("Allocations:")
            iter := allocations.create_iterator()
            logged := false
            while allocations.iterate(&iter) {
                if *iter.val == 0
                    continue

                log(" ",*iter.key," size: ", *iter.val)
                logged = true
            }
            if !logged   log(" none")
        }
        {
            log("Allocated types:")
            iter := map_types.create_iterator()
            logged := false
            // TODO: Colored printing
            while map_types.iterate(&iter) {
                item := iter.val
                if item.count == 0
                    continue

                log(" '",lang_typename(item.type), "' count: ", item.count)
                logged = true

                typesize := lang_typesize(item.type)

                iter := item.allocations.create_iterator()
                while item.allocations.iterate(&iter) {
                    count := *iter.val / cast<i32>typesize
                    if count == 0
                        continue

                    log("   ",*iter.key, " count: ", count)
                }
            }
            if !logged   log(" none")
        }
    }
}

global memory_tracker: MemoryTracker
