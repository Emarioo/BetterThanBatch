/*
    GLAD Wrapper
*/
#if OS_WINDOWS
    #load "OpenGL32.lib"
    #if LINKER_MSVC
        #load "libs/glad/lib-vc2022/glad.lib" as GLAD
        // #load "libs/glad/lib-vc2022/glad.dll" as GLAD
    #else
        // #load "libs/glad/lib-mingw-w64/glad.lib" as GLAD
        #load "libs/glad/lib-mingw-w64/glad.dll" as GLAD
    #endif
#else
    // #load "libs/glad/lib-ubuntu/libglad.a" as GLAD
    #load "libs/glad/lib-ubuntu/libglad.so" as GLAD
#endif

global glErrCode: bool = false;
// #macro GLCHECK glErrCode = glGetError(); if glErrCode { log("Error",#file,":",cast<i64>#line," code: "cast<i64>glErrCode,", ",glewGetErrorString(glErrCode)); }
#macro GLCHECK glErrCode = glGetError(); if glErrCode { log("Error ",#file,":",cast<i64>#line," code: ",cast<i64>glErrCode); }
#if !GLCHECK
    #macro GLCHECK #endmacro
#endif

#macro GLAD_IMPORT @import(GLAD)
#macro GLAD_VARIMPORT(X) @import(GLAD, alias = #quoted glad_##X) X

#macro GL_COLOR_BUFFER_BIT 0x00004000
#macro GL_STATIC_DRAW 0x88E4
#macro GL_DYNAMIC_DRAW 0x88E8
#macro GL_ARRAY_BUFFER 0x8892
#macro GL_ELEMENT_ARRAY_BUFFER 0x8893

#macro GL_COMPILE_STATUS 0x8B81
#macro GL_LINK_STATUS 0x8B82
#macro GL_FRAGMENT_SHADER 0x8B30
#macro GL_VERTEX_SHADER 0x8B31

#macro GL_BYTE 0x1400
#macro GL_UNSIGNED_BYTE 0x1401
#macro GL_SHORT 0x1402
#macro GL_UNSIGNED_SHORT 0x1403
#macro GL_INT 0x1404
#macro GL_UNSIGNED_INT 0x1405
#macro GL_FLOAT 0x1406

#macro GL_FALSE 0
#macro GL_TRUE 1
#macro GL_TRIANGLES 0x0004
#macro GL_CULL_FACE 0x0B44

#macro GL_DEPTH_TEST 0x0B71

#macro GL_BLEND 0x0BE2
#macro GL_SRC_COLOR 0x0300
#macro GL_ONE_MINUS_SRC_COLOR 0x0301
#macro GL_SRC_ALPHA 0x0302
#macro GL_ONE_MINUS_SRC_ALPHA 0x0303
#macro GL_DST_ALPHA 0x0304
#macro GL_ONE_MINUS_DST_ALPHA 0x0305
#macro GL_DST_COLOR 0x0306
#macro GL_ONE_MINUS_DST_COLOR 0x0307

#macro GL_TEXTURE_2D 0x0DE1
#macro GL_TEXTURE0 0x84C0

#macro GL_NEAREST 0x2600
#macro GL_LINEAR 0x2601
#macro GL_NEAREST_MIPMAP_NEAREST 0x2700
#macro GL_LINEAR_MIPMAP_NEAREST 0x2701
#macro GL_NEAREST_MIPMAP_LINEAR 0x2702
#macro GL_LINEAR_MIPMAP_LINEAR 0x2703
#macro GL_TEXTURE_MAG_FILTER 0x2800
#macro GL_TEXTURE_MIN_FILTER 0x2801
#macro GL_TEXTURE_WRAP_S 0x2802
#macro GL_TEXTURE_WRAP_T 0x2803
#macro GL_REPEAT 0x2901
#macro GL_CLAMP_TO_EDGE 0x812F

#macro GL_TEXTURE 0x1702
#macro GL_COLOR 0x1800
#macro GL_DEPTH 0x1801
#macro GL_STENCIL 0x1802
#macro GL_STENCIL_INDEX 0x1901
#macro GL_DEPTH_COMPONENT 0x1902
#macro GL_RED 0x1903
#macro GL_GREEN 0x1904
#macro GL_BLUE 0x1905
#macro GL_ALPHA 0x1906
#macro GL_RGB 0x1907
#macro GL_RGBA 0x1908

fn GLAD_IMPORT gladLoadGL() -> i32;
fn GLAD_IMPORT gladLoadGLLoader(func: fn()) -> i32;

#macro DEF_GLAD_VAR(X) global GLAD_VARIMPORT(X): fn @oscall /* args go here */
// #macro DEF_GLAD_VAR(X) fn @oscall GLAD_VARIMPORT(X) /* args go here */
d
DEF_GLAD_VAR(glClear)(mask: u32); d
DEF_GLAD_VAR(glClearColor)(red: f32, green: f32, blue: f32, alpha: f32);
DEF_GLAD_VAR(glViewport)(x: i32, y: i32, w: i32, h: i32);
// global @import(GLAD, alias="__imp_glad_glViewport") glViewport: fn@oscall(x: i32, y: i32, w: i32, h: i32);

DEF_GLAD_VAR(glGenBuffers)(size: i32, buffers: u32*);
DEF_GLAD_VAR(glDeleteBuffers)(size: i32, buffers: u32*);
DEF_GLAD_VAR(glBindBuffer)(target: u32, buffer: u32);
DEF_GLAD_VAR(glBufferData)(target: u32, size: u64, data: void*, usage: u32);
DEF_GLAD_VAR(glBufferSubData)(target: u32, offset: i64, size: i64, data: void*);

DEF_GLAD_VAR(glCreateShader)(type: u32) -> u32;
DEF_GLAD_VAR(glShaderSource)(shader: u32, count: i32, string: char**, length: i32*);
DEF_GLAD_VAR(glCompileShader)(shader: u32);
DEF_GLAD_VAR(glGetShaderiv)(shader: u32, pname: u32, param: i32*);
DEF_GLAD_VAR(glGetShaderInfoLog)(shader: u32, bufSize: i32, length: i32*, infoLog: char*);
DEF_GLAD_VAR(glCreateProgram)() -> u32;
DEF_GLAD_VAR(glAttachShader)(program: u32, shader: u32);
DEF_GLAD_VAR(glLinkProgram)(program: u32);
DEF_GLAD_VAR(glUseProgram)(program: u32);
DEF_GLAD_VAR(glGetProgramiv)(program: u32, pname: u32, param: i32*);
DEF_GLAD_VAR(glGetProgramInfoLog)(program: u32, bufSize: i32, length: i32*, infoLog: char*);
DEF_GLAD_VAR(glDeleteShader)(shader: u32);
DEF_GLAD_VAR(glGetUniformLocation)(program: u32, name: char*) -> u32;

DEF_GLAD_VAR(glUniform1i)(location: i32, v0: i32);
DEF_GLAD_VAR(glUniform2i)(location: i32, v0: i32, v1: i32);
DEF_GLAD_VAR(glUniform3i)(location: i32, v0: i32, v1: i32, v2: i32);
DEF_GLAD_VAR(glUniform4i)(location: i32, v0: i32, v1: i32, v2: i32, v3: i32);
DEF_GLAD_VAR(glUniform1f)(location: i32, v0: f32);
DEF_GLAD_VAR(glUniform2f)(location: i32, v0: f32, v1: f32);
DEF_GLAD_VAR(glUniform3f)(location: i32, v0: f32, v1: f32, v2: f32);
DEF_GLAD_VAR(glUniform4f)(location: i32, v0: f32, v1: f32, v2: f32, v3: f32);

DEF_GLAD_VAR(glVertexAttribPointer)(index: u32, size: i32, type: u32, normalized: bool, stride: i32, pointer: void*);
DEF_GLAD_VAR(glEnableVertexAttribArray)(index: u32);
DEF_GLAD_VAR(glGenVertexArrays)(b: i32, arrays: u32*);
DEF_GLAD_VAR(glBindVertexArray)(array: u32);
DEF_GLAD_VAR(glDeleteVertexArrays)(n: i32, arrays: u32*);

DEF_GLAD_VAR(glDrawArrays)(mode: u32, first: i32, count: i32);
DEF_GLAD_VAR(glDrawElements)(mode: u32, count: i32, type: u32, indices: void*);
// TODO: Add glPolygonMode, GL_FRONT_AND_BACK, GL_LINE, GL_FILL

DEF_GLAD_VAR(glActiveTexture)(texture: i32)
DEF_GLAD_VAR(glBindTexture)(target: u32, texture: u32)
DEF_GLAD_VAR(glGenTextures)(n: i32, textures: u32*);
DEF_GLAD_VAR(glDeleteTextures)(n: i32, textures: u32*);
DEF_GLAD_VAR(glTexParameteri)(target: u32, pname: i32, param: i32);
DEF_GLAD_VAR(glTexImage2D)(target: u32, level: i32, internalformat: i32, width: i32, height: i32, border: i32, format: u32, type: u32, pixels: void*);

DEF_GLAD_VAR(glEnable)(cap: u32);
DEF_GLAD_VAR(glDisable)(cap: u32);
DEF_GLAD_VAR(glBlendFunc)(sfactor: u32, dfactor: u32);

DEF_GLAD_VAR(glGetError)() -> u32;
