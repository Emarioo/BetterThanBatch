


/*
    OpenGL related code using GLFW and GLEW
*/
// #link "gdi32.lib user32.lib OpenGL32.lib"
// #link "libs/glew-2.1.0/lib/glew32s.lib"
// #link "/NODEFAULTLIB:MSVCRT"
// #link "/DEFAULTLIB:LIBCMT"
// #link "/NODEFAULTLIB:LIBCMT"

/*
    Imports
*/

#macro GL_COLOR_BUFFER_BIT 0x00004000
#macro GLEW_VERSION 1
#macro GL_STATIC_DRAW 0x88E4
#macro GL_DYNAMIC_DRAW 0x88E8
#macro GL_ARRAY_BUFFER 0x8892
#macro GL_ELEMENT_ARRAY_BUFFER 0x8893

#macro GL_COMPILE_STATUS 0x8B81
#macro GL_LINK_STATUS 0x8B82
#macro GL_FRAGMENT_SHADER 0x8B30
#macro GL_VERTEX_SHADER 0x8B31

#macro GL_FLOAT 0x1406
#macro GL_UNSIGNED_INT 0x1405
#macro GL_FALSE 0
#macro GL_TRUE 1
#macro GL_TRIANGLES 0x0004
#macro GL_CULL_FACE 0x0B44

#macro GL_BLEND 0x0BE2
#macro GL_SRC_COLOR 0x0300
#macro GL_ONE_MINUS_SRC_COLOR 0x0301
#macro GL_SRC_ALPHA 0x0302
#macro GL_ONE_MINUS_SRC_ALPHA 0x0303
#macro GL_DST_ALPHA 0x0304
#macro GL_ONE_MINUS_DST_ALPHA 0x0305
#macro GL_DST_COLOR 0x0306
#macro GL_ONE_MINUS_DST_COLOR 0x0307

fn @import glewInit() -> i32;

fn @import glClear(mask: u32);
fn @import glClearColor(red: f32, green: f32, blue: f32, alpha: f32);
fn @import glViewport(x: i32, y: i32, w: i32, h: i32);

#macro glGenBuffers(...) __glewGenBuffers(...)
fn @varimport __glewGenBuffers(size: i32, buffers: u32*);
#macro glDeleteBuffers(...) __glewDeleteBuffers(...)
fn @varimport __glewDeleteBuffers(size: i32, buffers: u32*);
#macro glBindBuffer(...) __glewBindBuffer(...)
fn @varimport __glewBindBuffer(target: u32, buffer: u32);
#macro glBufferData(...) __glewBufferData(...)
fn @varimport __glewBufferData(target: u32, size: u64, data: void*, usage: u32);
#macro glCreateShader(...) __glewCreateShader(...)
fn @varimport __glewCreateShader(type: u32) -> u32;
#macro glShaderSource(...) __glewShaderSource(...)
fn @varimport __glewShaderSource(shader: u32, count: i32, string: char**, length: i32*);
#macro glCompileShader(...) __glewCompileShader(...)
fn @varimport __glewCompileShader(shader: u32);
#macro glGetShaderiv(...) __glewGetShaderiv(...)
fn @varimport __glewGetShaderiv(shader: u32, pname: u32, param: i32*);
#macro glGetShaderInfoLog(...) __glewGetShaderInfoLog(...)
fn @varimport __glewGetShaderInfoLog(shader: u32, bufSize: i32, length: i32*, infoLog: char*);
#macro glCreateProgram(...) __glewCreateProgram(...)
fn @varimport __glewCreateProgram() -> u32;
#macro glAttachShader(...) __glewAttachShader(...)
fn @varimport __glewAttachShader(program: u32, shader: u32);
#macro glLinkProgram(...) __glewLinkProgram(...)
fn @varimport __glewLinkProgram(program: u32);
#macro glUseProgram(...) __glewUseProgram(...)
fn @varimport __glewUseProgram(program: u32);
#macro glGetProgramiv(...) __glewGetProgramiv(...)
fn @varimport __glewGetProgramiv(program: u32, pname: u32, param: i32*);
#macro glGetProgramInfoLog(...) __glewGetProgramInfoLog(...)
fn @varimport __glewGetProgramInfoLog(program: u32, bufSize: i32, length: i32*, infoLog: char*);

#macro glDeleteShader(...) __glewDeleteShader(...)
fn @varimport __glewDeleteShader(shader: u32);

#macro glVertexAttribPointer(...) __glewVertexAttribPointer(...)
fn @varimport __glewVertexAttribPointer(index: u32, size: i32, type: u32, normalized: bool, stride: i32, pointer: void*);

#macro glEnableVertexAttribArray(...) __glewEnableVertexAttribArray(...)
fn @varimport __glewEnableVertexAttribArray(index: u32);
#macro glGenVertexArrays(...) __glewGenVertexArrays(...)
fn @varimport __glewGenVertexArrays(b: i32, arrays: u32*);
#macro glBindVertexArray(...) __glewBindVertexArray(...)
fn @varimport __glewBindVertexArray(array: u32);
#macro glDeleteVertexArrays(...) __glewDeleteVertexArrays(...)
fn @varimport __glewDeleteVertexArrays(n: i32, arrays: u32*);

#macro glBufferSubData(...) __glewBufferSubData(...)
fn @varimport __glewBufferSubData(target: u32, offset: i64, size: i64, data: void*);

fn @import glDrawArrays(mode: u32, first: i32, count: i32);
fn @import glDrawElements(mode: u32, count: i32, type: u32, indices: void*);
// TODO: Add glPolygonMode, GL_FRONT_AND_BACK, GL_LINE, GL_FILL

#macro glGetUniformLocation(...) __glewGetUniformLocation(...)
fn @varimport __glewGetUniformLocation(program: u32, name: char*);

fn @import glEnable(cap: u32);
fn @import glDisable(cap: u32);
fn @import glBlendFunc(sfactor: u32, dfactor: u32);

#macro glUniform1i(...) __glewUniform1i(...)
#macro glUniform2i(...) __glewUniform2i(...)
#macro glUniform3i(...) __glewUniform3i(...)
#macro glUniform4i(...) __glewUniform4i(...)
#macro glUniform1f(...) __glewUniform1f(...)
#macro glUniform2f(...) __glewUniform2f(...)
#macro glUniform3f(...) __glewUniform3f(...)
#macro glUniform4f(...) __glewUniform4f(...)
fn @varimport __glewUniform1i(location: i32, v0: i32);
fn @varimport __glewUniform2i(location: i32, v0: i32, v1: i32);
fn @varimport __glewUniform3i(location: i32, v0: i32, v1: i32, v2: i32);
fn @varimport __glewUniform4i(location: i32, v0: i32, v1: i32, v2: i32, v3: i32);
fn @varimport __glewUniform1f(location: i32, v0: f32);
fn @varimport __glewUniform2f(location: i32, v0: f32, v1: f32);
fn @varimport __glewUniform3f(location: i32, v0: f32, v1: f32, v2: f32);
fn @varimport __glewUniform4f(location: i32, v0: f32, v1: f32, v2: f32, v3: f32);


fn @import glewGetErrorString(error: u32) -> char*;
fn @import glewGetString(name: u32) -> char*;
fn @import glGetError() -> u32;
