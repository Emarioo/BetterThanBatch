// Use native functions instead
fn equal(a: char[], b: char[]) -> i32 {
    if a.len != b.len
        return false
    return !memcmp(a.ptr, b.ptr, a.len);
}

// #import "Logger"
// Test: matchEnd("__add.cpp__","++.cpp++");
fn matchEnd(str: char[], match: char[]) -> bool {
    // log("lens",str.len, match.len)
    if str.len < match.len || match.len == 0
        return false;
    for @reverse match {
        // log("nr:",nr)
        // thing = match.ptr[nr];
        // log("i:",nr + str.len - match.len)
        chr = str.ptr[nr + str.len - match.len];
        // log("i2:",nr + str.len - match.len)
        if it != chr {
            // log("ret1")
            return false;
        }
        // log("cont")
    }
    // log("ret2")
    return true;
}
fn findString(str: char[], match: char[]) -> bool {
    return findStringAt(str, match) != -1;
}
// returns -1 if not found
// returns index of the first character of the first found matched string
fn findStringAt(str: char[], match: char[]) -> u32 {
    if str.len < match.len || match.len == 0
        return false;
    correct = 0;
    foundIndex = -1;
    for str {
        if it == match.ptr[correct] {
            correct++;
            if correct == match.len {
                foundIndex = nr - match.len + 1;
                break;
            }
        } else {
            correct = 0;
            foundIndex = -1;
        }
    }

    return foundIndex;
}
// Look at Utility.cpp
// fn FormatTime() {
    
// }

fn printData<T>(t: T*) {
    at = 0;
    while at < sizeof T {
        byte: u8 = *(cast<u8*>cast<void*>t + at);
        if at % 8 == 0 {
            print('\n',at,": ");
        }
        print(byte, ' ')
        at++
    }
}