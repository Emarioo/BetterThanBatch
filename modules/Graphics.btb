/*
    A module for rendering things independent on the platform/operating system.
    
    DISCLAIMER: Currently only works on Windows (I don't have an Apple or Linux computer)
*/

// only OpenGL for now
#import "GLFW"
#import "GLAD"
#import "STB"
// #import "GLEW"

#import "Logger"
#import "Lang"
#import "Array"
#import "Memory"
#import "OS"

/* #####################################################
    GRAPHICS LIBRARY (depends on GLAD, GLFW, OPENGL)
    1. management
##################################################### */

struct WindowContext {
    glfw_window: void*;
    width: f32; // read only
    height: f32;
    running: bool = true;
    schedule_close: bool;
    delta: f32;
    prev_timestamp: u64;

    fn close() {
        schedule_close = true
    }
    
    camera_zoom: f32 = 1.0; // modifiable
    camera_x: f32 = 0.0; // modifiable
    camera_y: f32 = 0.0; // modifiable
    
    base_shader: u32;
    font: Font*;
    fn defaultFont() -> Font* {
        return font
    }
    
    vbo: u32;
    vao: u32;
    ibo: u32;
    
    enable_ui_space: bool = true;
    fn enableUISpace(yes: bool) {
        enable_ui_space = yes
    }
    fn toggleUISpace() {
        enable_ui_space = !enable_ui_space
    }
    
    // ## user input events ##
    
    fn getMouseX() -> f32 { return m_mouseX; }
    fn getMouseY() -> f32 { return m_mouseY; }
    // raw input from first person
    // float getRawMouseX() const;
    // float getRawMouseY() const;
    fn setMouseX(x: f32) { m_mouseX=x; }
    fn setMouseY(y: f32) { m_mouseY=y; }
    fn getScrollX() -> f32 {
        return m_tickScrollX;
	}
    fn getScrollY() -> f32 {
        return m_tickScrollY;
    }
    fn setScrollX(x: f32) { m_frameScrollX += x; m_tickScrollX += x;}
    fn setScrollY(y: f32) { m_frameScrollY += y; m_tickScrollY += y; }

    // This function is available to the user because they might want to simulate
    // a player's input and test the gameplay.
    fn setInput(code: i32, down: bool) {
        index: i32 = -1;
		for @ptr inp: m_inputs.sliced() {
			if (inp.code == code) {
				index = nr;
				break;
			}
		}
        input: KeyInput*;
		if index==-1 {
			index = m_inputs.size();
			m_inputs.add(KeyInput{});
            input = m_inputs.get_unsafe(index)
            input.code = code;
		} else {
            input = m_inputs.get_unsafe(index)
        }
		if (down) {
			if (!input.down) {
				// printf("PRESSED %c (%d)\n",(char)code,code);
				// log::out << "PRESSED "<<(char)code << " ("<<code << ")\n";
				input.down = true;
				input.tickPressed++;
				input.framePressed++;
			}
		}else{
			// log::out << "RELEASED "<<(char)code << " ("<<code << ")\n";
			// printf("RELEASED %c (%d)\n",(char)code,code);
            if (input.down) {
                input.down = false;
                input.tickReleased++;
                input.frameReleased++;
            }
		}
    }

    typed_characters: i32[20];
    typed_characters_start: i32;
    typed_characters_end: i32;
    fn pollChar() -> i32 {
        if typed_characters_start >= typed_characters_end {
            return 0;
        }
        chr := typed_characters[typed_characters_start]
        typed_characters_start++
        return chr
    }
    fn resetPollChar() {
        typed_characters_end = 0
        typed_characters_start = 0
    }
    // std::string pollPathDrop();

    fn isKeyDown(code: i32) -> bool {
        for @ptr inp: m_inputs.sliced_unsafe() {
			if (inp.code == code)
				return inp.down;
		}
		return false;
    }
    fn isKeyPressed(code: i32) -> bool {
        for @ptr inp: m_inputs.sliced_unsafe() {
			if (inp.code == code) {
				// log::out << "IS "<<(char)code<<"\n";
				// if (m_parent->isRenderingWindow()) {
				// 	if (m_inputs[i].framePressed > 0) {
				// 		return true;
				// 	}
				// } else {
					if (inp.tickPressed > 0) {
						// log::out << " Done\n";
						return true;
					}
				// }
				return false;
			}
		}
		return false;
    }
    fn isKeyReleased(code: i32) -> bool {
        for @ptr inp: m_inputs.sliced_unsafe() {
			if (inp.code == code) {
				// if (m_parent->isRenderingWindow()) {
				// 	if (m_inputs[i].frameReleased > 0) {
				// 		return true;
				// 	}
				// }
				// else {
					if (inp.tickReleased > 0) {
						return true;
					}
				// }
				return false;
			}
		}
		return false;
    }
    
    // void enableFirstPerson(bool yes);
    // bool isFirstPerson() const { return m_enabledFirstPerson; }
    
    // std::string pollClipboard();
    // void setClipboard(const std::string& str);

    // // If true, the cursor will be made visible.
    // void setCursorVisible(bool visible);
    // // Whether the cursor is locked to the window.
    // bool isCursorLocked() const { return m_cursorLocked;}
    // // If true, the cursor will be made invisible and locked to the window. Use this when you want the player to lock around.
    // void lockCursor(bool locked);

    fn resetEvents(resetFrameInput: bool) {
        resetFrameInput = false;
        if (resetFrameInput) {
            m_frameScrollX = 0;
            m_frameScrollY = 0;
            // m_frameRawMouseX = 0;
            // m_frameRawMouseY = 0;
            for @ptr inp: m_inputs.sliced_unsafe() {
                inp.framePressed = 0;
                inp.frameReleased = 0;
            }
        } else {
            m_tickScrollX = 0;
            m_tickScrollY = 0;
            // m_tickRawMouseX = 0;
            // m_tickRawMouseY = 0;
            for @ptr inp: m_inputs.sliced_unsafe() {
                if(inp.tickPressed!=0){
                    code := inp.code;
                    // log::out << "RESET "<<(char)code << " ("<<code << ")\n";
                    // printf("RESET %c (%d)\n",(char)code,code);
                }
                inp.tickPressed = 0;
                inp.tickReleased = 0;
            }
        }
    }
    
    m_inputs: Array<KeyInput>;
    m_mouseX: f32 = 0;
    m_mouseY:  f32 = 0;
    m_lastMouseX: f32 = -1;
    m_lastMouseY: f32 = -1;
    // float m_tickRawMouseX = 0, m_tickRawMouseY = 0, m_frameRawMouseX = 0, m_frameRawMouseY = 0;
    m_tickScrollX: f32 =0;
    m_tickScrollY: f32 = 0;
    m_frameScrollX: f32 = 0;
    m_frameScrollY: f32 = 0;
}
struct KeyInput { // also mouse
    code: i32 = 0;
    down: bool = false;
    tickPressed: i8 = 0;
    framePressed: i8 = 0;
    tickReleased: i8 = 0;
    frameReleased: i8 = 0;
};
struct Texture {
    id: u32;
    width: i32;
    height: i32;
    
    // temporary?
    data: u8*;
    data_len: i32;
}
struct Font {
    id: u32;
    width:  i32;
    height: i32;
    
    char_width: i32;
    cell_w: i32;
    cell_h: i32;
    
    // temporary?
    data: u8*;
    data_len: i32;
    
    fn get_uvwh(chr: char) -> f32, f32, f32, f32 {
        return 
            cast<f32> cell_w * (cast<i32> chr % 16) / cast<f32> width,
            cast<f32> cell_h * (cast<i32> chr / 16) / cast<f32> height,
            cast<f32> cell_w * (cast<i32> chr % 16) / cast<f32> width + cast<f32>char_width / width,
            cast<f32> cell_h * (cast<i32> chr / 16) / cast<f32> height + cast<f32>cell_h / height;
    }
    fn width_of_text(text: char[], text_height: f32) -> f32 {
        w,h := size_of_text(text, text_height)
        return w
    }
    fn height_of_text(text: char[], text_height: f32) -> f32 {
        w,h := size_of_text(text, text_height)
        return h
    }
    fn size_of_text(text: char[], text_height: f32) -> f32, f32 {
        max_tw := 0
        tw := 0
        th := 1
        for text {
            if it == '\n' {
                tw=0
                th++
                continue
            }
            tw++
            if tw > max_tw
                max_tw = tw
        }
        return max_tw * cast<f32> char_width/cast<f32>cell_h * text_height, th * text_height
    }
}

fn DestroyWindow(window: WindowContext*) {
    // TODO: Anything else to destroy? glfwTerminate if we only have one window left?
    
    glfwDestroyWindow(window.glfw_window)
    Free(window)
}
fn CreateWindow(width: i32, height: i32, title: char[] = "The beginning of something new") -> WindowContext* {
    yes := glfwInit();
    if !yes {
        log("glfwInit failed");
        return null;
    }
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    // Borderless fullscreen
    // monitor := glfwGetPrimaryMonitor()
    // mode := glfwGetVideoMode(monitor)
    // if mode {
    //     // log(mode)
    //     width =  mode.width
    //     height = mode.height
    //     glfwWindowHint(GLFW_DECORATED, GLFW_FALSE);
    // }

    glfw_window := glfwCreateWindow(width, height, title.ptr, null, null);
    if !glfw_window {
        log("window failed");
        glfwTerminate();
        return null
    }

    glfwSetWindowPos(glfw_window, 0, 0)

    glfwMakeContextCurrent(glfw_window)

    glfwSetInputMode(glfw_window, GLFW_LOCK_KEY_MODS, true)

    yes = gladLoadGL()
    // yes = gladLoadGLLoader(glfwGetProcAddress)
    if !yes {
        log("gladLoadGL failed")
        glfwTerminate()
        return null;
    }

    glViewport(0, 0, width, height)
    GLCHECK

    glEnable(GL_BLEND)
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    // glEnable(GL_CULL)

    window: WindowContext* = Allocate(sizeof WindowContext);
    *window = WindowContext{}
    window.glfw_window = glfw_window
    window.width = width
    window.height = height
    
    MapWindowContext(window)
    
    glfwSetKeyCallback(glfw_window, KeyCallback);
    glfwSetMouseButtonCallback(glfw_window, MouseCallback);
    glfwSetCursorPosCallback(glfw_window, CursorPosCallback);
    glfwSetScrollCallback(glfw_window, ScrollCallback);
    
    glfwSetWindowSizeCallback(glfw_window, ResizeCallback);
    // glfwSetWindowFocusCallback(window, FocusCallback);
    // glfwSetWindowCloseCallback(window, CloseCallback);
    // glfwSetWindowPosCallback(window, PosCallback);
    // log("char callback ", cast_unsafe<void*>CharCallback)
    glfwSetCharCallback(glfw_window, CharCallback);
    // glfwSetDropCallback(window, DropCallback);
    // err := glfwGetError(null)
    // log(err)
    
    vshader := @strbeg
        #version 330 core
        layout(location = 0) in vec2 vPos;
        layout(location = 1) in vec2 vUV;
        layout(location = 2) in vec4 vColor;
        layout(location = 3) in float vTexture;

        uniform vec2 uWindow;

        out vec2 fUV;
        out vec4 fColor;
        flat out int fTexture;

        void main() {	
            fUV=vUV;
            fColor=vColor;
            fTexture=int(vTexture);

            gl_Position = vec4((vPos.x)/uWindow.x*2.0-1.0, 1.0-(vPos.y)/uWindow.y*2.0, 0, 1);
            // gl_Position = vec4(vPos.x,vPos.y, 0, 1);
        };
        @strend;
    fshader := @strbeg
        #version 330 core
        layout(location = 0) out vec4 oColor;

        in vec2 fUV;
        in vec4 fColor;
        flat in int fTexture;

        // uniform sampler2D uSampler;
        uniform sampler2D uSampler[8];

        void main() {
            // oColor = vec4(1,1,1,1);
            // oColor = fColor;
            if (fTexture==-1){
                oColor = fColor;
            } else {
                oColor = fColor * texture(uSampler[fTexture], fUV);
            }
            // Text font needs to be white. Text color will be limited to some colors otherwise.
        };

        @strend
    
    window.base_shader = CreateShaderProgram(vshader, fshader)
    
    VBO: u32;
    VAO: u32;
    IBO: u32;

    glGenVertexArrays(1, &VAO);
    GLCHECK
    glGenBuffers(1, &VBO);
    GLCHECK
    glGenBuffers(1, &IBO);
    GLCHECK

    window.vao = VAO
    window.vbo = VBO
    window.ibo = IBO

    glBindVertexArray(VAO);
    GLCHECK
    
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    GLCHECK
    #macro BASE_SHADER_MAX_RECT 50
    #macro BASE_SHADER_MAX_VERTEX (4*BASE_SHADER_MAX_RECT)
    // #macro BASE_SHADER_VERTEX_STRIDE 2
    #macro BASE_SHADER_VERTEX_STRIDE 9
    glBufferData(GL_ARRAY_BUFFER, BASE_SHADER_MAX_VERTEX * BASE_SHADER_VERTEX_STRIDE * sizeof f32 , null, GL_DYNAMIC_DRAW);
    GLCHECK

    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, BASE_SHADER_VERTEX_STRIDE * sizeof f32, cast<void*>cast<u64>(0 * sizeof f32));
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, BASE_SHADER_VERTEX_STRIDE * sizeof f32, cast<void*>cast<u64>(2 * sizeof f32));
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE, BASE_SHADER_VERTEX_STRIDE * sizeof f32, cast<void*>cast<u64>(4 * sizeof f32));
    glEnableVertexAttribArray(2);
    glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE, BASE_SHADER_VERTEX_STRIDE * sizeof f32, cast<void*>cast<u64>(8 * sizeof f32));
    glEnableVertexAttribArray(3);
    
    indices: u32* = Allocate(6*BASE_SHADER_MAX_RECT * sizeof u32);
    defer Free(indices)
    for i: 0..BASE_SHADER_MAX_RECT {
        indices[i * 6] = i * 4 + 0;
        indices[i * 6 + 1] = i * 4 + 1;
        indices[i * 6 + 2] = i * 4 + 2;
        indices[i * 6 + 3] = i * 4 + 2;
        indices[i * 6 + 4] = i * 4 + 3;
        indices[i * 6 + 5] = i * 4 + 0;
    }
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6*BASE_SHADER_MAX_RECT*sizeof u32, indices, GL_STATIC_DRAW);
    
    // TODO: Don't hardcode font path
    window.font = CreateFont("assets/fonts/consolas42.png")

    return window;
}
// refresh screen buffer, poll events
fn RefreshWindow(window: WindowContext*) {
    
    // prev_timestamp 
    timestamp := StartMeasure()
    if window.prev_timestamp != 0
        window.delta = DiffMeasure(timestamp - window.prev_timestamp)
    else
        window.delta = 1./60.
    window.prev_timestamp = timestamp
    
    window.resetEvents(false)
    window.resetPollChar()
    
    glfwSwapBuffers(window.glfw_window);
    glfwPollEvents();

    window.running = !glfwWindowShouldClose(window.glfw_window) && !window.schedule_close

    // temporary
    ProcessSleep(0.001) // don't use up CPU resources
    // ProcessSleep(0.5) // don't use up CPU resources
    
    glViewport(0, 0, window.width, window.height)
    
    // user may not always want this
    // glClearColor(0.2, 0.2, 0.2, 1);
    // glClear(GL_COLOR_BUFFER_BIT);
}

/* ##################################
    Graphics library
    2. rendering functions
################################## */

struct Color {
    r: f32;
    g: f32;
    b: f32;
    a: f32 = 1.0;
}
struct Box {
    x: f32;
    y: f32;
    w: f32;
    h: f32;

    fn inside(mx: f32, my: f32) -> bool {
        return mx >= x && mx < x + w &&
            my >= y && my < y + h
    }
    fn inside(box: Box) -> bool {
        return box.x + box.w > x && box.x < x + w &&
            box.y + box.h > y && box.y < y + h
    }
}

fn FillColor(window: WindowContext*, color: Color) {
    glClearColor(color.r, color.g, color.b, color.a);
    glClear(GL_COLOR_BUFFER_BIT);
}
#macro CAM_VALUES
    bx := x
    by := y
    ox := 0.
    oy := 0.
    zoom := 1.
    if !window.enable_ui_space {
        zoom = window.camera_zoom
        bx -= window.camera_x
        by = -(by - window.camera_y) - h
        ox += window.width/2
        oy = (oy + window.height/2)
    }
#endmacro
fn FillRect(window: WindowContext*, box: Box, color: Color) {
    FillRect(window, box.x, box.y, box.w, box.h, color)
}
fn FillRect(window: WindowContext*, x: f32, y: f32, w: f32, h: f32, color: Color) {
    // @dumpbc
    glUseProgram(window.base_shader);
    
    glDisable(GL_DEPTH_TEST)
    glEnable(GL_BLEND)
    
    // glDisable(GL_CULL)
    
    // TODO: Store location in a map
    loc := glGetUniformLocation(window.base_shader, "uWindow".ptr)
    
    glUniform2f(loc,window.width,window.height);
    
    CAM_VALUES
    
    vertices: f32[] {
        // x ,y, uv.x, uv.y, color.rgba, texture
        (bx) *      zoom + ox, (by) *       zoom + oy, 0, 0, color.r, color.g, color.b, color.a, -1,
        (bx) *      zoom + ox, (by + h) *   zoom + oy, 0, 1, color.r, color.g, color.b, color.a, -1,
        (bx + w) *  zoom + ox, (by + h) *   zoom + oy, 1, 1, color.r, color.g, color.b, color.a, -1,
        (bx + w) *  zoom + ox, (by) *       zoom + oy, 1, 0, color.r, color.g, color.b, color.a, -1,
    }
    glBindBuffer(GL_ARRAY_BUFFER, window.vbo);
    glBufferSubData(GL_ARRAY_BUFFER, 0, 4 * BASE_SHADER_VERTEX_STRIDE * sizeof f32, vertices.ptr);
    glBindVertexArray(window.vao);
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, window.ibo);
    glDrawElements(GL_TRIANGLES, 6 * 1, GL_UNSIGNED_INT, null)
    
    // glDrawArrays(GL_TRIANGLES, 0, 3);
}
fn DrawSquare(window: WindowContext*, x: f32, y: f32, w: f32, h: f32, color: Color, thickness: f32 = 2.0) {
    // window.toggleUISpace()
    FillRect(window, x, y, w, thickness, color) // top
    FillRect(window, x, y + h - thickness, w, thickness, color) // down
    
    FillRect(window, x, y, thickness, h, color) // left
    FillRect(window, x + w - thickness, y, thickness, h, color) // right
    // window.toggleUISpace()
}
fn DrawTexture(window: WindowContext*, box: Box, texture: Texture*) {
    DrawTexture(window, box.x, box.y, box.w, box.h, texture)
}
fn DrawTexture(window: WindowContext*, x: f32, y: f32, w: f32, h: f32, texture: Texture*) {
    glUseProgram(window.base_shader);
    
    glDisable(GL_DEPTH_TEST)
    glEnable(GL_BLEND)
    
    // glDisable(GL_CULL)
    
    strbuf: StringBuilder
    strbuf.append("uSampler[0]")
    loc_sample := glGetUniformLocation(window.base_shader, strbuf.ptr)
    sample_index := 0
    glUniform1i(loc_sample, sample_index);
    
    glActiveTexture(GL_TEXTURE0+0);
    glBindTexture(GL_TEXTURE_2D, texture.id);
    
    // TODO: Store location in a map
    loc := glGetUniformLocation(window.base_shader, "uWindow".ptr)
    
    glUniform2f(loc,window.width,window.height);
    
    color := Color{1,1,1}
     
    CAM_VALUES
    
    vertices: f32[] {
        // x ,y, uv.x, uv.y, color.rgba, texture
        (bx) *     zoom + ox, (by) *     zoom + oy, 0, 0, color.r, color.g, color.b, color.a, texture.id,
        (bx) *     zoom + ox, (by + h) * zoom + oy, 0, 1, color.r, color.g, color.b, color.a, texture.id,
        (bx + w) * zoom + ox, (by + h) * zoom + oy, 1, 1, color.r, color.g, color.b, color.a, texture.id,
        (bx + w) * zoom + ox, (by) *     zoom + oy, 1, 0, color.r, color.g, color.b, color.a, texture.id,
    }
    glBindBuffer(GL_ARRAY_BUFFER, window.vbo);
    glBufferSubData(GL_ARRAY_BUFFER, 0, 4 * BASE_SHADER_VERTEX_STRIDE * sizeof f32, vertices.ptr);
    glBindVertexArray(window.vao);
    
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, window.ibo);
    glDrawElements(GL_TRIANGLES, 6 * 1, GL_UNSIGNED_INT, null)
}
// returns true if a change was made
fn EditText(window: WindowContext*, text: StringBuilder*, cursor: i32*) -> bool {
    // text->editing = true;
    // TODO: Selection feature? shift + arrow right
    length := text.size()
    if (*cursor < 0 || *cursor > length) {
        *cursor = length;
    }
    change := false
    if (window.isKeyDown(GLFW_KEY_LEFT_CONTROL) && window.isKeyPressed(GLFW_KEY_V)) {
        // TODO: Copy paste
        // std::string tmp = PollClipboard();
        // //str.insert(str.begin() + at, tmp);
        // text->text.insert(*cursor, tmp);
        // *cursor += (int)tmp.length();
        return true;
    }
    while {
        chr: i32 = window.pollChar()
        if chr == 0 {
            break
        }
        change = true
        length = text.size() // update size
        if (chr == GLFW_KEY_BACKSPACE) {
            if (length > 0 && *cursor > 0) {
                text.removeAt(*cursor - 1);
                // text->text = text->text.substr(0, *cursor - 1) + text->text.substr(*cursor);
                (*cursor)--;
            }
        } else if (chr == GLFW_KEY_ENTER) {
            // if (stopEditWithEnter) {
            //     text->editing = false;
            // } else {
            //     text->text.insert(text->text.begin() + *cursor, '\n');
            //     *cursor++;
            // }
        } else if (chr == GLFW_KEY_DELETE) {
            if (length > *cursor) {
                text.removeAt(*cursor)
                // text->text = text->text.substr(0, *cursor) + text->text.substr(*cursor + 1);
            }
        } else if (chr == GLFW_KEY_LEFT) {
            if (*cursor > 0) {
                (*cursor)--;
            }
        } else if (chr == GLFW_KEY_RIGHT) {
            if (*cursor < text.len + 1) {
                (*cursor)++;
            }
        } else if (chr == GLFW_KEY_HOME) {
            *cursor = 0
        } else if (chr == GLFW_KEY_END) {
            *cursor = text.len
        } else {
            text.insert(*cursor, chr);
            // text->text.insert(text->text.begin() + *cursor, chr);
            (*cursor)++;
        }
    }
    return change;
}
struct DrawTextInfo {
    drawn_lines: i32;
    drawn_height: i32; // includes lines
}
fn DrawText(window: WindowContext*, box: Box, text: char[], color: Color = Color{1,1,1}, cursor: i32 = -1, out_info: DrawTextInfo* = null) {
    DrawText(window, box.x, box.y, box.h, text, color, cursor, out_info)
}
// TODO: Font* argument?
// cursor is optional, -1 for no cursor
// DrawTextInfo if non-null, is filled with useful information about how much was drawn
fn DrawText(window: WindowContext*, x: f32, y: f32, h: f32, text: char[], color: Color = Color{1,1,1}, cursor: i32 = -1, out_info: DrawTextInfo* = null) {
    glUseProgram(window.base_shader);
    
    glDisable(GL_DEPTH_TEST)
    glEnable(GL_BLEND)
    
    // glDisable(GL_CULL)
    
    strbuf: StringBuilder
    strbuf.append("uSampler[0]")
    loc_sample := glGetUniformLocation(window.base_shader, strbuf.ptr)
    sample_index := 0
    glUniform1i(loc_sample, sample_index);
    
    font := window.font // force the font
    
    glActiveTexture(GL_TEXTURE0+0);
    glBindTexture(GL_TEXTURE_2D, font.id);
    
    // TODO: Store location in a map
    loc := glGetUniformLocation(window.base_shader, "uWindow".ptr)
    
    glUniform2f(loc,window.width,window.height);
    
    // color := Color{1,1,1}
    
    CAM_VALUES

    
    // TODO: Batch draw calls
    cursor
    off_x: f32 = 0
    off_y: f32 = 0
    cur_x: f32 = 0
    cur_y: f32 = 0
    lines := 1 // always one
    for text {
        // log(it)
        if it == '\n' {
            lines++
            if !window.enable_ui_space
                off_y -= h
            else
                off_y += h
            off_x = 0
            if nr == cursor
                cur_y = off_y
            continue
        }

        u, v, uw, vh := font.get_uvwh(it)
        
        defer off_x += cast<f32> (font.char_width) / font.cell_h * h
        if nr == cursor
            cur_x = off_x
        w := cast<f32> font.char_width / font.cell_w * h
        
        // log(it," ", off," ", w, " ", font.char_width)
        // log(it," ",u," ",v," ",uw," ",vh)
        
        vertices: f32[] {
            // x ,y, uv.x, uv.y, color.rgba, texture
            (bx + off_x) *     zoom + ox, (by + off_y) *     zoom + oy,     u,  v, color.r, color.b, color.g, color.a,  font.id,
            (bx + off_x) *     zoom + ox, (by + off_y + h) * zoom + oy, u,  vh, color.r, color.b, color.g, color.a, font.id,
            (bx + off_x + w) * zoom + ox, (by + off_y + h) * zoom + oy, uw, vh, color.r, color.b, color.g, color.a, font.id,
            (bx + off_x + w) * zoom + ox, (by + off_y) *     zoom + oy,     uw, v, color.r, color.b, color.g, color.a,  font.id,
        }
        glBindBuffer(GL_ARRAY_BUFFER, window.vbo);
        glBufferSubData(GL_ARRAY_BUFFER, 0, 4 * BASE_SHADER_VERTEX_STRIDE * sizeof f32, vertices.ptr);
        glBindVertexArray(window.vao);
        
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, window.ibo);
        glDrawElements(GL_TRIANGLES, 6 * 1, GL_UNSIGNED_INT, null)
    }
    if cursor != -1 {
        thick := 2
        if cursor == text.len {
            FillRect(window, x + off_x, y + off_y, thick, h, color)
        } else {
            FillRect(window, x + cur_x, y + cur_y, thick, h, color)
        }
    }
    if out_info {
        out_info.drawn_lines = lines
        out_info.drawn_height = off_y + h
    }
}

/* ################
    USER INPUT
################# */


/*###########################
    INTERNAL (user input)
###########################*/

#macro GLFW_CALLBACK_API @stdcall

// Useful with hotreloading
fn SaveGraphicsGlobals() -> void* {
    return g_window_context
}
fn RestoreGraphicsGlobals(data: void*) {
    g_window_context = data
}

global g_window_context: WindowContext*;
fn MapWindowContext(window: WindowContext*) {
    Assert(!g_window_context)
    // TODO: Do an actual mapping
    g_window_context = window;
} 
fn GetWindowContextByGLFWWindow(glfw_window: void*) -> WindowContext* {
    // TODO: Do an actual mapping
    return g_window_context;
}
// #macro LOG_GLFW_CALLBACK(...) log(...)
#macro LOG_GLFW_CALLBACK(...) #endmacro

fn GLFW_CALLBACK_API KeyCallback(window: void*, key: i32, scancode: i32, action: i32, mods: i32) {
    context := GetWindowContextByGLFWWindow(window);
    Assert(context)

    context.setInput(key, action != 0); // if not 0 means if pressed or repeating
    LOG_GLFW_CALLBACK("key ",cast<char>key, ",", key, " ", scancode, " ", mods, " ",action)

    // log("key ", key, " mods ", mods)
    // Assert(glfwGetInputMode(window, GLFW_LOCK_KEY_MODS) == true) // make sure LOCK_KEY_MODS is enabled

    if mods & GLFW_MOD_NUM_LOCK == 0 { // we should use special actions if num lock is zero, if not zero then normal numbers from the numpad should be used
        // These are the special actions on my numpad, TUF GAMING laptop
        // All the numpads I have seen have the same actions on the same keys,
        // But if you home, end, delete key isn't working on the numpad, this code my be why.
        // (GLFW doesn't handle this as of yet, https://github.com/glfw/glfw/issues/946)
        if key == GLFW_KEY_KP_DECIMAL {
            if action != GLFW_RELEASE
                CharCallback(window, GLFW_KEY_DELETE);
        } else if key == GLFW_KEY_KP_7 {
            if action != GLFW_RELEASE
                CharCallback(window, GLFW_KEY_HOME);
        } else if key == GLFW_KEY_KP_1 {
            if action != GLFW_RELEASE
                CharCallback(window, GLFW_KEY_END);
        } else if key == GLFW_KEY_KP_9 {
            // page up
            // if action != GLFW_RELEASE
            //     CharCallback(window, GLFW_KEY_PAGE_UP);
        } else if key == GLFW_KEY_KP_3 {
            // page down
            // if action != GLFW_RELEASE
            //     CharCallback(window, GLFW_KEY_PAGE_DOWN);
        }
        context.setInput(key, action != 0); // if not 0 means if pressed or repeating
    } else {
        context.setInput(key, action != 0); // if not 0 means if pressed or repeating
    }

    if action != 0 && (key == GLFW_KEY_BACKSPACE || key == GLFW_KEY_DELETE || key == GLFW_KEY_ENTER || key == GLFW_KEY_LEFT || key == GLFW_KEY_RIGHT || key == GLFW_KEY_HOME || key == GLFW_KEY_END) {
        CharCallback(window, key);
    }
}
fn GLFW_CALLBACK_API MouseCallback(window: void*, button: i32, action: i32, mods: i32) {
    context := GetWindowContextByGLFWWindow(window);
    Assert(context)
    
    context.setInput(button, action != 0);
    LOG_GLFW_CALLBACK("click ", button, " ", action)
}
fn GLFW_CALLBACK_API CursorPosCallback(window: void*, mx: f64, my: f64) {
    context := GetWindowContextByGLFWWindow(window);
    Assert(context)
    context.setMouseX(cast<f32>mx);
    context.setMouseY(cast<f32>my);
    LOG_GLFW_CALLBACK("cursor ", mx," ", my)
}
fn GLFW_CALLBACK_API ScrollCallback(window: void*, xoffset: f64, yoffset: f64) {
    context := GetWindowContextByGLFWWindow(window);
    Assert(context)
    
    context.setScrollX(cast<f32>xoffset);
    context.setScrollY(cast<f32>yoffset);

    LOG_GLFW_CALLBACK("scroll ",xoffset, " ", yoffset)
}
fn GLFW_CALLBACK_API ResizeCallback(window: void*, width: i32, height: i32) {
    context := GetWindowContextByGLFWWindow(window);
    Assert(context)
    
    context.width = width
    context.height = height

    LOG_GLFW_CALLBACK("resize ",width, " ", height)
}
fn GLFW_CALLBACK_API CharCallback(window: void*, chr: u32) {
    context := GetWindowContextByGLFWWindow(window);
    Assert(context)

    // log("val ",chr)

    // TODO: DELETE THIS CODE!
    // if context.typed_characters_end > 0 {
    //     // Specific to my numpad, TUF GAMING laptop
    //     last := context.typed_characters[context.typed_characters_end-1]
    //     if (chr == '1' && last == GLFW_KEY_END) ||
    //     (chr == '7' && last == GLFW_KEY_HOME) ||
    //     (chr == ',' && last == GLFW_KEY_DELETE) {
    //         return;
    //     }
    // }
    
    if context.typed_characters_end < context.typed_characters.len {
        // we ignore characters that don't fit in the buffer
        // as long as the user doesn't type more than the max characters per frame (every time you poll characters), things should be fine.
        context.typed_characters[context.typed_characters_end] = chr
        context.typed_characters_end++
    }

    LOG_GLFW_CALLBACK("char ",cast<char>chr, ", codepoint ", chr)
}
/*##############################
    SOME USEFUL FUNCTIONS
############################*/


// returns GLFWwindow*
fn InitGLFWAndCreateWindow(width: i32, height: i32) -> void* {
    yes := glfwInit();
    if !yes {
        log("glfwInit failed");
        return null;
    }
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    title := @cstr "Yes sir"
    window := glfwCreateWindow(width, height, title, null, null);
    if !window {
        log("window failed");
        glfwTerminate();
        return null;
    }

    glfwMakeContextCurrent(window);

    // err := glewInit();
    // if err {
        // msg := glewGetErrorString(err);
        // log("glew failed",msg)
        // glfwTerminate();
        // return null;
    // }
    yes = gladLoadGLLoader(glfwGetProcAddress);
    if !yes {
        log("gladLoadGL failed")
        glfwTerminate();
        return null;
    }

    glViewport(0, 0, width, height);
    GLCHECK

    glEnable(GL_BLEND)
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    // glEnable(GL_CULL)

    return window;
}
// returns program id which can be passes to glUseProgram
fn CreateShaderProgram(vshader: char[], fshader: char[]) -> u32 {
    vertexShader := glCreateShader(GL_VERTEX_SHADER);
    GLCHECK
    glShaderSource(vertexShader, 1, &vshader.ptr, null);
    GLCHECK
    glCompileShader(vertexShader);
    GLCHECK

    success: i32; // reused further down
    infoLog: char[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if !success {
        glGetShaderInfoLog(vertexShader, 512, null, infoLog.ptr);
        log("Vertex shader error: ",infoLog);
    }

    fragmentShader := glCreateShader(GL_FRAGMENT_SHADER);
    GLCHECK
    glShaderSource(fragmentShader, 1, &fshader.ptr, null);
    GLCHECK
    glCompileShader(fragmentShader);
    GLCHECK

    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    GLCHECK
    if !success {
        glGetShaderInfoLog(fragmentShader, 512, null, infoLog.ptr);
        GLCHECK
        log("Fragment shader error: ",infoLog);
    }

    shaderProgram := glCreateProgram();
    GLCHECK
    glAttachShader(shaderProgram, vertexShader);
    GLCHECK
    glAttachShader(shaderProgram, fragmentShader);
    GLCHECK
    glLinkProgram(shaderProgram);
    GLCHECK

    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    GLCHECK
    if !success {
        glGetProgramInfoLog(shaderProgram, 512, null, infoLog.ptr);
        GLCHECK
        log("Fragment shader error: ",infoLog);
    }
    
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);  

    return shaderProgram;
}
fn CreateTexture(path: char[]) -> Texture* {
    texture: Texture* = Allocate(sizeof Texture);
    *texture = Texture{}
    
    channels: i32
    stbi_set_flip_vertically_on_load(false);
    texture.data = stbi_load(path.ptr,&texture.width,&texture.height,&channels,4); // 4 = rgba
    texture.data_len = 4 * texture.width * texture.height
    
    if !texture.data {
        log("Cannot find ",path)
        return null
    }

    glGenTextures(1, &texture.id);
    glBindTexture(GL_TEXTURE_2D,texture.id);
    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, texture.width, texture.height, 0, GL_RGBA, GL_UNSIGNED_BYTE, texture.data);
    GLCHECK
    glBindTexture(GL_TEXTURE_2D,0);
    GLCHECK
    
    return texture
}
fn CreateFont(path: char[]) -> Font* {
    font: Font* = Allocate(sizeof Font);
    *font = Font{}
    
    channels: i32
    stbi_set_flip_vertically_on_load(false);
    font.data = stbi_load(path.ptr,&font.width,&font.height,&channels,4); // 4 = rgba
    font.data_len = 4 * font.width * font.height
    
    if !font.data {
        log("Cannot find ",path)
        return null
    }

    glGenTextures(1, &font.id);
    glBindTexture(GL_TEXTURE_2D,font.id);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    // glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, font.width, font.height, 0, GL_RGBA, GL_UNSIGNED_BYTE, font.data);
    GLCHECK
    glBindTexture(GL_TEXTURE_2D,0);
    GLCHECK
    
    // hardcoded for consolas42.png
    font.char_width = 35;
    font.cell_w = font.width/16; // 16*16 = 256 characters
    font.cell_h = font.height/16;
    
    return font
}
fn DestroyTexture(texture: Texture*) {
    // TODO: destroy texture in OpenGL
        
    stbi_image_free(texture.data)
    Free(texture)
}   