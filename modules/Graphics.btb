#import "Logger"

#import "GLFW"
#import "GLAD"
// #import "GLEW"

fn @import Sleep(ms: i32); // windows sleep, remove this later

global glErrCode: bool = false;
// #macro GLCHECK glErrCode = glGetError(); if glErrCode { log("Error",cast<i64>#line,cast<i64>glErrCode,":",glewGetErrorString(glErrCode)); }
#macro GLCHECK glErrCode = glGetError(); if glErrCode { log("Error",cast<i64>#line,cast<i64>glErrCode,":?"); }
#ifndef GLCHECK
#macro GLCHECK
#endif

// returns GLFWwindow*
fn InitGLFWAndCreateWindow(width: i32, height: i32) -> void* {
    yes := glfwInit();
    if !yes {
        log("glfwInit failed");
        return null;
    }
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    title := @cstr "Yes sir"
    window := glfwCreateWindow(width, height, title, null, null);
    if !window {
        log("window failed");
        glfwTerminate();
        return null;
    }

    glfwMakeContextCurrent(window);

    // err := glewInit();
    // if err {
        // msg := glewGetErrorString(err);
        // log("glew failed",msg)
        // glfwTerminate();
        // return null;
    // }
    yes = gladLoadGL();
    if !yes {
        log("gladLoadGL failed")
        glfwTerminate();
        return null;
    }

    glViewport(0, 0, width, height);
    GLCHECK

    glEnable(GL_BLEND)
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    // glEnable(GL_CULL)

    return window;
}
// returns program id which can be passes to glUseProgram
fn CreateShaderProgram(vshader: char[], fshader: char[]) -> u32 {
    vertexShader := glCreateShader(GL_VERTEX_SHADER);
    GLCHECK
    glShaderSource(vertexShader, 1, &vshader.ptr, null);
    GLCHECK
    glCompileShader(vertexShader);
    GLCHECK

    success: i32; // reused further down
    infoLog: char[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if !success {
        glGetShaderInfoLog(vertexShader, 512, null, infoLog.ptr);
        log("Vertex shader error: ",infoLog);
    }

    fragmentShader := glCreateShader(GL_FRAGMENT_SHADER);
    GLCHECK
    glShaderSource(fragmentShader, 1, &fshader.ptr, null);
    GLCHECK
    glCompileShader(fragmentShader);
    GLCHECK

    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    GLCHECK
    if !success {
        glGetShaderInfoLog(fragmentShader, 512, null, infoLog.ptr);
        GLCHECK
        log("Fragment shader error: ",infoLog);
    }

    shaderProgram := glCreateProgram();
    GLCHECK
    glAttachShader(shaderProgram, vertexShader);
    GLCHECK
    glAttachShader(shaderProgram, fragmentShader);
    GLCHECK
    glLinkProgram(shaderProgram);
    GLCHECK

    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    GLCHECK
    if !success {
        glGetProgramInfoLog(shaderProgram, 512, null, infoLog.ptr);
        GLCHECK
        log("Fragment shader error: ",infoLog);
    }
    
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);  

    return shaderProgram;
}
struct UIColor{
    r: f32;
    g: f32;
    b: f32;
    a: f32;
}
struct UIBox {
    x: f32;
    y: f32;
    w: f32;
    h: f32;
    color: UIColor;
    textureId: i32 = -1;
};
struct UIText {
    x: f32;
    y: f32;
    h: f32;
    length: u32 = 0;
    string: char* = null;
    // std::string text;
    color: UIColor;
    fontId: i32 = 0;
    
    editing: bool = false;
    cursorIndex: i32 = -1;
};

struct UIModule {
     /* ... */ 
    fn makeBox(id: u64 = 0) -> UIBox* {
        return MakeBox(this, id);
    }
    fn makeText(id: u64 = 0) -> UIText* {
        return MakeText(this, id);
    }
    fn getWidthOfText(text: UIText*) -> f32 {
        return GetWidthOfText(this, text);
    }
}
fn @import CreateUIModule() -> UIModule*;
fn @import DestroyUIModule(ptr: UIModule*);
fn @import RenderUIModule(ptr: UIModule*, width: f32, height: f32);
fn @import GetWidthOfText(ptr: UIModule*, text: UIText*) -> f32;
fn @import MakeBox(ptr: UIModule*, id: u64 = 0) -> UIBox*;
fn @import MakeText(ptr: UIModule*, id: u64 = 0) -> UIText*;