/*
    Networking with server and client

    There is server/client user data
    and connection user data.

    TODO: It would be convenient if Server and Client was one struct.
      A game that can be a client or server could call the same functions on one struct without
      having to switch between calling server.send and client.send depending whether the game started
      as a server or client.
      The reason this is troublesome is because when a server sends a message, we have to specify which connection
      while the client only has one connection. So we kind of need a switch even if we have one struct.

    TODO: Tests for various events. Test for start, close, wait, disconnect. 
    
    TODO: Don't ignore host/network order bytes
*/

#import "Array"
#import "Memory"
#import "String"
#import "Threads"
#import "Sockets"
#import "OS" // we need Assert from OS, altough Assert should be moved to somewhere else

#if OS_WINDOWS
    #import "Windows"
#elif OS_LINUX
    #import "Linux"
#endif

enum EventType {
	EVENT_START_LISTENING, // server starts listening, client will not receive this event
	EVENT_STOP_LISTENING, // server stops listening, client will not receive this event
	EVENT_RECEIVE, // server/client received data
	EVENT_CONNECT, // server/client started connection
	EVENT_DISCONNECT, // server/client closes connection
}
enum NetHandlerResponse {
    NET_HANDLER_ACCEPT,
    NET_HANDLER_SOME_MORE_BYTES,
    NET_HANDLER_EXACT_MORE_BYTES,
}
// Every connection has their own NetEvent structure that is passed by pointer
// to callbacks.
struct NetEvent {
	type: EventType;
	who: ConnectionID; // only server
	bytes: char[];
    handler_response: NetHandlerResponse;
    handler_byte_count: i32; // used with NET_HANDLER_EXACT_MORE_BYTES to tell Server/Client that exactly this much data is needed
                             // if user specified NET_HANDLER_EXACT_MORE_BYTES or NET_HANDLER_SOME_MORE_BYTES then Server/Client
                             // would set this to how many bytes has been put into the buffer excluding the current event.
                             // bytes.len would contain the real total count.
                             // When user ACCEPTS the received data they need to set handlar_byte_count
    user_data: void*; // stays the same per connection, not touched by the Server/Client
}
enum NetError {
    NET_SUCCESS,
    NET_FAILURE, // general failure
    NET_BAD_IP,
    NET_SOCKET_API_ERROR,
}
enum NetProtocol {
    NET_NONE = 0,
    
    NET_PROTOCOL_MASK = 0x1,
    NET_TCP = 0x0,
    NET_UDP = 0x1, // not implemented

    // Protocols and behaviour relevant to the networking library. They have nothing to do with tcp/ip.
    NET_HANDLER_TYPE_MASK = 0x2,
    NET_HANDLER_STREAM    = 0x0, // library lets you handle the logic for separating messages, use this when implementing HTTP or other protocols
    NET_HANDLER_MESSAGE   = 0x2, // library sends distinct messages that are length prefixed, use this when implementing custom protocols for multiplayer games (or other applications)
    
    // backwards compatibility
    NET_PROTO_STREAM = 0x0,
    NET_PROTO_MESSAGE = 0x2,
}
#macro ConnectionID i32
#macro EventCallback fn(e: NetEvent*, user_data: void*)

struct Connection {
    receiver_thread: Thread;
    message_data: char*;
    message_max: i32;
    socket: Socket;
    server: Server*;
    conn_id: ConnectionID; // index into server.m_connections, -1 means invalid connection
    in_use: bool;
    event: NetEvent;
}
struct MessageHeader {
    length: i32;
}
// TODO: What if the client suddenly closes and the user wants to connect again as soon as possible.
//   This can't be done in the event callback because it's in the connection thread. The user must first
//   do client.close() to join the thread, then client.start(). Should we do something do make this more convenient?
//   Maybe the user can do client.start() where the connection is closed and thread joined if it exists?
// TODO: ConnectionID currently represents an index into an array but it may be a good
//   idea to keep ids unique. That way, the user can easily tell if a connection is new or not.
//   They don't have to worry about reused connection ids.
//   However, the user may have their own array to store things where it is useful to have
//   an index for each connection in use instead of a unique integer which can't index into a small array.
struct Server {
    fn cleanup() {
        close() // make sure connection is closed
    }

	fn start(port: u32, protocol: NetProtocol = NET_TCP | NET_PROTO_STREAM, message_byte_limit: i32 = 0x100_000) -> NetError {
        if m_is_initialized
            return NET_FAILURE // already started, call close() first

        if !m_event_callback {
            log("You forgot to set the net callback for server")
        }
        m_port = port
        m_protocol = protocol
        m_message_byte_limit = message_byte_limit;

        m_socket = create_socket(AF_INET, SOCK_STREAM, 0)
        if !m_socket.valid() {
            log("socket failed")
            return NET_FAILURE
        }
        
        addr: sockaddr_in
        addr.sin_family = AF_INET
        addr.sin_port = htons(m_port)
        addr.sin_addr = 0
        // addr.sin_addr = htonl(0x7F_00_00_01) // 127.0.0.1
        
        // TODO: SO_REUSEADDR should prevent ports from being in a waiting state.
        
        err := m_socket.bind(cast<sockaddr*>&addr, sizeof(addr))
        if err != SOCKET_SUCCESS {
            log("bind failed")
            return NET_BAD_IP
        }
        
        err = m_socket.listen(SOMAXCONN) // TODO: Option to specify connection limit
        if err != SOCKET_SUCCESS {
            log("listen failed")
            return NET_FAILURE
        }

        m_is_initialized = true

        m_listener_thread = ThreadCreate(listener_func, this)
        fn @oscall listener_func(arg: void*) -> i32 {
            server: Server* = arg

            if server.m_event_callback {
                e: NetEvent
                e.type = EVENT_START_LISTENING
                e.who = 0
                // NOTE: If user sets server.m_event_callback to null at a bad timing then we may crash here
                server.m_event_callback(&e, server.m_user_data)
            }
            while {
                // log("#waiting")
                client_socket := server.m_socket.accept(null, null)
                // log("ACCEPT")
                if !client_socket.valid() {
                    // TODO: Handle error, normally accept fails because socket was closed but
                    //   There may have been an error which we should report.
                    // log("accept failed")
                    break
                }

                // Try to reuse connection
                connection: Connection* = null
                
                server.mutex.lock()

                for server.m_connections.sliced() {
                    Assert(it)
                    if !it.in_use {
                        connection = it
                    }
                }
                if !connection {
                    // Otherwise create a new connection structure
                    connection = Allocate(sizeof Connection)
                    memzero(connection, sizeof Connection)
                    connection.message_max = 0x100000 // 1 MB
                    connection.message_data = Allocate(connection.message_max)
                    connection.server = server
                    connection.conn_id = server.m_connections.size()
                    server.m_connections.add(connection)
                } else {
                    // server, conn_id have already been set since we reuse a previous connection
                    // message_data can also be reused, no need to free and allocate again.
                }
                connection.socket = client_socket
                if connection.receiver_thread.valid()
                    connection.receiver_thread.join()
                connection.receiver_thread = ThreadCreate(receiver_func2, connection)
                connection.in_use = true

                server.mutex.unlock()

                fn @oscall receiver_func2(arg: void*) -> i32 {
                    connection: Connection* = arg
                    server := connection.server
                    protocol: NetProtocol = connection.server.m_protocol

                    // NOTE: We cannot lock server.mutex because the listener thread may join
                    //  client connections and when it does, it iterates through all connections and locks server.mutex, if we try to lock it then we end up in a deadlock

                    construct(&connection.event)
                    
                    if server.m_event_callback {
                        connection.event.type = EVENT_CONNECT
                        connection.event.who = connection.conn_id
                        connection.event.handler_response = NET_HANDLER_ACCEPT
                        server.m_event_callback(&connection.event, server.m_user_data)
                    }
                    
                    requested_byte_count: i32;
                    byte_offset: i32; // this is used if user request more bytes for their packet/message
                    while {
                        bytes: i32
                        if protocol & NET_PROTO_MESSAGE {
                            header: MessageHeader

                            bytes = connection.socket.recv(cast<void*>&header, sizeof header, 0)

                            if bytes == 0 {
                                break // graceful shutdown
                            }
                            if bytes < 0 {
                                // if server.m_event_callback {
                                //     break // forced shutdown
                                // }

                                if connection.socket.valid()
                                    connection.socket.close()

                                // TODO: Handle error, some errors are okay like connection was forced to
                                //   shutdown from the client side. Other errors should be reported to the user.

                                #if OS_WINDOWS
                                    err := WSAGetLastError()
                                    if err == WSAECONNRESET
                                        break
                                #endif

                                // log("recv failed")
                                break
                            }
                            server.m_received_bytes += sizeof header
                            if bytes != sizeof header {
                                log("recv should have read 4 bytes for message length but instead read ", bytes)
                                break
                            }

                            if header.length > server.m_message_byte_limit {
                                log("recv read ",header.length," as header length which is suspiciously large, was something corrupted?")
                                break
                            }

                            if connection.message_max < header.length {
                                new_max := connection.message_max * 1.5 + header.length + 16
                                new_data := Reallocate(new_max, connection.message_data)
                                // Assert(new_data)
                                connection.message_data = new_data
                                connection.message_max = new_max
                            }
                            total_bytes := 0
                            while total_bytes != header.length {
                                bytes = connection.socket.recv(connection.message_data + total_bytes, header.length - total_bytes, 0)
                                if bytes <= 0
                                    break
                                total_bytes += bytes
                                server.m_received_bytes += bytes
                            }
                        } else {
                            
                            // TODO: resize message buffer if message_max - byte_offset is to small. Like less than 25% of the original.
                            if byte_offset >= connection.message_max / 2 {
                                new_max := connection.message_max * 2
                                new_ptr := Reallocate(new_max, connection.message_data)
                                Assert(new_ptr)
                                connection.message_data = new_ptr
                                connection.message_max= new_max
                            }
                            
                            size := requested_byte_count
                            if size == 0 {
                                size = connection.message_max - byte_offset
                            }
                            // log("recv..")
                            bytes = connection.socket.recv(connection.message_data + byte_offset, size, 0)

                            if bytes > 0
                                server.m_received_bytes += bytes
                        }
                        
                        // handle error or shutdown
                        if bytes == 0 {
                            break
                        } else if bytes < 0 {
                            if connection.socket.valid()
                                connection.socket.close()
                            
                            // TODO: Handle/report error
                            #if OS_WINDOWS
                                err := WSAGetLastError()
                                if err == WSAECONNRESET
                                    break
                            #endif

                            // log("recv failed")
                            break
                        }
                        
                        if bytes < requested_byte_count && requested_byte_count != 0 {
                            requested_byte_count -= bytes
                            byte_offset += bytes
                            continue
                        }

                        if connection.server.m_event_callback {
                            connection.event.type = EVENT_RECEIVE
                            connection.event.who = connection.conn_id
                            connection.event.bytes = Slice<char>{connection.message_data, byte_offset + bytes}
                            connection.event.handler_response = NET_HANDLER_ACCEPT
                            connection.event.handler_byte_count = byte_offset
                            
                            // global mutex: Mutex;
                            // global counter: i32;
                            // mutex.lock();
                            // counter++;
                            // log("handling ", counter)
                            // mutex.unlock()
                            server.m_event_callback(&connection.event, server.m_user_data)
                            // mutex.lock();
                            // counter--;
                            // log("done handling ", counter)
                            // mutex.unlock()
                            
                            if cast<i32>(protocol & NET_PROTO_MESSAGE) == 0 {
                                if(connection.event.handler_response == NET_HANDLER_ACCEPT) {
                                    if !(connection.event.handler_byte_count != byte_offset) {
                                        // user of library didn't specify how many bytes were consumed.
                                        // This is only necessary if user previosuly requested more bytes.
                                        Assert(false)
                                    }
                                    consumed_bytes := connection.event.handler_byte_count
                                    remaining_bytes := byte_offset + bytes - consumed_bytes
                                    
                                    dst_offset := 0
                                    src_offset := consumed_bytes
                                    
                                    while remaining_bytes > 0 {
                                        size := remaining_bytes
                                        // We need this if memcpy can't handle overlapping memory.
                                        // Current implementation can but we never know in the future.
                                        if dst_offset + size > src_offset {
                                            size = src_offset - dst_offset
                                        }
                                        memcpy(connection.message_data + dst_offset, connection.message_data + src_offset, size)
                                        dst_offset += size
                                        src_offset += size
                                        remaining_bytes -= remaining_bytes
                                    }
                                    byte_offset = 0
                                    requested_byte_count = 0
                                } else if (connection.event.handler_response == NET_HANDLER_SOME_MORE_BYTES) {
                                    // user wants more bytes
                                    byte_offset += bytes
                                } else if(connection.event.handler_response == NET_HANDLER_EXACT_MORE_BYTES) {
                                    byte_offset += bytes
                                    requested_byte_count = connection.event.handler_byte_count
                                }
                            }
                        }
                        // std_prints("[READ ", bytes,"]")
                        // std_print(buffer.ptr, bytes)
                    }

                    if server.m_event_callback {
                        connection.event.type = EVENT_DISCONNECT
                        connection.event.who = connection.conn_id
                        server.m_event_callback(&connection.event, server.m_user_data)
                        
                        destruct(&connection.event)
                    }

                    // We can't destroy Connection here because it stores data for thread
                    // and we can't join the thread if we are in that thread.
                    
                    connection.socket.close() // we should close the connection though
                    connection.in_use = false // indicates that connection can be destoyed and reused

                    return 0
                }
            }
            server.m_socket.close()
            // global mut: Mutex
            // mut.lock()
            // log(server.m_connections[0])
            // log(server.m_connections[1])
            // log(server.m_connections[2])
            // mut.unlock()

            // Create temporary array of connections so we don't have to keep
            // locking the server.mutex.
            // Perhaps a callback wants to access information of a connection
            // before disconnecting and destroying connection.
            server.mutex.lock()
            cons := server.m_connections.copy()
            server.mutex.unlock()

            // Close connections first, triggering disconnect events.
            for cons.sliced() {
                Assert(it)
                if it.in_use {
                    if it.socket.valid() {
                        it.socket.close()
                    }
                    if it.receiver_thread.valid() {
                        it.receiver_thread.join()
                    }
                }
                Assert(it.message_data)
                Free(it.message_data)
                Free(it)
            }
            cons.cleanup()

            server.mutex.lock()
            server.m_connections.cleanup()
            server.mutex.unlock()

            // Then trigger close event. We don't want the close event to trigger and then have stray disconnect events appear.
            if server.m_event_callback {
                e: NetEvent
                e.type = EVENT_STOP_LISTENING
                server.m_event_callback(&e, server.m_user_data)
            }

            // We may have closed all connections and the thread may have terminated but
            // thread still needs to be joined. The user must therefore call server.close()
            // to completely cleanup the server.

            return 0
        }

        return NET_SUCCESS
    }
	fn close() {
        // Close listener socket and thread
        if m_socket.valid() {
            m_socket.close()
        }

        if m_listener_thread.valid() && m_listener_thread.id != ThreadSelfId() {
            m_listener_thread.join()
        }

        // NOTE: Connections are closed before listener_thread exits, no need to check it here.

        m_is_initialized = false
    }
    fn wait() {
        if m_listener_thread.valid() && m_listener_thread.id != ThreadSelfId() {
            m_listener_thread.join()
        }
        Assert(!m_socket.valid())
        m_is_initialized = false
    }
    fn is_active() -> bool {
        return m_socket.valid()
    }
	fn disconnect(who: ConnectionID) -> NetError {
        connection: Connection*
        {
            mutex.lock()
            defer mutex.unlock()
            if who < 0 || who >= m_connections.size() {
                return NET_FAILURE // invalid connection
            }
            connection = m_connections.get(who)
        }

        if !connection.in_use
            return NET_FAILURE // invalid connection

        if connection.socket.valid()
            connection.socket.close()
        
        if connection.receiver_thread.valid() && connection.receiver_thread.id != ThreadSelfId()
            connection.receiver_thread.join()
        return NET_SUCCESS
    }
    // -1 as connection id to send to all connections
	// fn send(bytes: char[], connection_id: ConnectionID = -1) -> NetError {
	fn send<T>(bytes: T[], who: ConnectionID = -1, all_except: ConnectionID = -1) -> NetError {
        Assert(!(who != -1 && all_except != -1)) // user can't specify who and all_except

        // TODO: Decrease the amount of locking, it's expensive
        if who == -1 {
            mutex.lock()
            for m_connections.sliced() {
                mutex.unlock()
                send(bytes, it.conn_id)
                mutex.lock()
            }
            mutex.unlock()
            return NET_SUCCESS
        }
        mutex.lock()
        if who >= m_connections.size() || all_except >= m_connections.size() {
            mutex.unlock()
            return NET_FAILURE
        }
        if all_except != -1 {
            for m_connections.sliced() {
                if it.conn_id != all_except {
                    mutex.unlock()
                    send(bytes, it.conn_id)
                    mutex.lock()
                }
            }
            mutex.unlock()
            return NET_SUCCESS
        }

        connection := m_connections.get(who)
        mutex.unlock()

        if !connection.in_use
            return NET_FAILURE // invalid connection

        size := bytes.len * sizeof (*bytes.ptr)
        if m_protocol & NET_PROTO_MESSAGE {
            m_send_mutex.lock() // Ensure that only one thread sends header and body at once.
                                // Two thread may send headers first and then bodies which will result in the receiver reading two headers which is strange
            defer m_send_mutex.unlock()

            header: MessageHeader
            header.length = bytes.len * sizeof (*bytes.ptr)
            err := connection.socket.send(cast<void*>&header, sizeof header, 0)
            if err < 0 {
                log("server send header failed")
                return NET_FAILURE
            }
            m_sent_bytes += sizeof header
            err = connection.socket.send(cast<void*>bytes.ptr, header.length, 0)
            if err < 0 {
                log("server send body failed")
                return NET_FAILURE
            }
            m_sent_bytes += header.length
        } else {
            err := connection.socket.send(cast<void*>bytes.ptr, size, 0)
            if err < 0 {
                log("server send stream failed")
                return NET_FAILURE
            }
            m_sent_bytes += size
        }
        return NET_SUCCESS
    }
    fn set_callback(func: EventCallback, user_data: void*) {
        m_event_callback = func
        m_user_data = user_data
    }
	// fn pollEvents(blocking: bool) -> NetEvent[] { }
	
	m_port: u32;
    m_protocol: NetProtocol;

    m_is_initialized: bool; // false if the server is in a fresh state where server.start() can be called, true means that the server is running or was terminated but not yet cleaned up, server.close() can be called if so. Use is_active() to check if the server is running.
    m_socket: Socket;
    m_listener_thread: Thread;

	m_connections: Array<Connection*>;

    m_event_callback: EventCallback;
    m_user_data: void*;
    
    fn get_number_connections() -> i32 {
        mutex.lock()
        n := 0
        for m_connections.sliced() {
            if it.in_use
                n++
        }
        mutex.unlock()
        return n
    }
    
    m_received_bytes: i32;
    m_sent_bytes: i32;
    
    m_message_byte_limit: i32 = 0x100_000;

	mutex: Mutex;
	m_send_mutex: Mutex;
}
struct Client {
    fn cleanup() {
        close() // make sure connection is closed

        if m_message_data {
            Free(m_message_data)
            m_message_data = null
            m_message_max = 0
        }
    }

	fn start(ip: char[], port: u32, protocol: NetProtocol = NET_TCP | NET_PROTO_STREAM, message_byte_limit: i32 = 0x100_000) -> NetError {
        if m_is_initialized
            return NET_FAILURE // already started

        if !m_event_callback {
            log("You forgot to set the net callback for client.")
        }
        m_ip.clear()
        m_ip.append(ip)
        m_port = port
        m_protocol = protocol
        m_message_byte_limit = message_byte_limit;

        m_socket = create_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
        if !m_socket.valid() {
            log("socket failed")
            return NET_SOCKET_API_ERROR
        }
        // defer closesocket(client)
        
        result: addrinfo*;
        hints: addrinfo
        hints.ai_family = AF_INET
        hints.ai_socktype = SOCK_STREAM
        hints.ai_protocol  = IPPROTO_TCP

        string_port: StringBuilder
        string_port.append(port)
        
        addr_err := getaddrinfo(ip.ptr, string_port.ptr, &hints, &result)
        if addr_err != 0 {
            log("getaddrinfo failed")
            return NET_BAD_IP
        }
        err := m_socket.connect(result.ai_addr, sizeof (*result.ai_addr))

        // addr: sockaddr_in
        // addr.sin_family = AF_INET
        // addr.sin_port = htons(8080)
        // addr.sin_addr = htonl(0x7F_00_00_01) // 127.0.0.1
        // err := connect(client, cast<sockaddr*>&addr, sizeof addr)
        
        if err == SOCKET_FAILURE {
            log("connect failed")
            return NET_BAD_IP
        }

        m_message_max = 0x10000 // 10 KB
        m_message_data = Allocate(m_message_max)

        m_receiver_thread = ThreadCreate(receiver_func, this)

        m_is_initialized = true // at this point, client should be fully up and running

        fn @oscall receiver_func(arg: void*) -> i32 {
            client: Client* = arg

            if client.m_event_callback {
                e: NetEvent
                e.type = EVENT_CONNECT
                e.who = 0
                client.m_event_callback(e, client.m_user_data)
            }

            while {
                read_bytes: i32
                if client.m_protocol & NET_PROTO_MESSAGE {
                    header: MessageHeader

                    bytes := client.m_socket.recv(cast<void*>&header, sizeof header, 0)

                    if bytes == 0 {
                        break // graceful shutdown
                    }
                    if bytes < 0 {
                        if client.m_socket.valid()
                            client.m_socket.close()

                        // TODO: Handle error
                        #if OS_WINDOWS
                            err := WSAGetLastError()
                            if err == WSAECONNRESET
                                break
                        #endif

                        // log("recv failed")
                        break
                    }
                    client.m_received_bytes += sizeof header
                    
                    if bytes != sizeof header {
                        log("recv should have read 4 bytes for message length but instead read ", bytes)
                        break
                    }

                    if header.length > client.m_message_byte_limit {
                        log("recv read ",header.length," as header length which is suspiciously large, was something corrupted?")
                        break
                    }

                    if client.m_message_max < header.length {
                        new_max := client.m_message_max * 1.5 + header.length + 16
                        new_data := Reallocate(new_max, client.m_message_data)
                        // Assert(new_data)
                        client.m_message_data = new_data
                        client.m_message_max = new_max
                    }
                    read_bytes = 0
                    while header.length != read_bytes {
                        // log("read ",read_bytes," len ",header.length)
                        bytes = client.m_socket.recv(client.m_message_data + read_bytes, header.length - read_bytes, 0)
                        // log("bytes ",bytes, " read ", read_bytes," len ",header.length)
                        if bytes <= 0
                            break
                        read_bytes += bytes
                        client.m_received_bytes += bytes

                        if header.length == read_bytes
                            break
                        // log("extra read again ", bytes, " read ",read_bytes, "len ",header.length)
                    }
                } else {
                    read_bytes = client.m_socket.recv(client.m_message_data, client.m_message_max, 0)
                    if read_bytes > 0
                        client.m_received_bytes += read_bytes
                }
                
                // handle error or shutdown
                if read_bytes == 0 {
                    break
                } else if read_bytes < 0 {

                    if client.m_socket.valid()
                        client.m_socket.close()
                    // TODO: Report error
                    #if OS_WINDOWS
                        err := WSAGetLastError()
                        if err == WSAECONNRESET
                            break
                    #endif

                    // log("recv failed")
                    break
                }

                if client.m_event_callback {
                    e: NetEvent
                    e.type = EVENT_RECEIVE
                    e.who = 0
                    e.bytes = Slice<char>{client.m_message_data,read_bytes}
                    client.m_event_callback(e, client.m_user_data)
                }
                // std_prints("[READ ", read_bytes,"]")
                // std_print(buffer.ptr, read_bytes)
            }

            client.m_socket.close()

            if client.m_event_callback {
                e: NetEvent
                e.type = EVENT_DISCONNECT
                e.who = 0
                client.m_event_callback(e, client.m_user_data)
            }

            return 0
        }

        return NET_SUCCESS
    }
	fn close() {
        if m_socket.valid()
            m_socket.close()

        if m_receiver_thread.valid() {
            m_receiver_thread.join()
        }

        m_is_initialized = false // set last when client is truly closed and ready to be started again
    }
    fn wait() {
        if m_receiver_thread.valid() {
            m_receiver_thread.join()
        }
        if m_socket.valid() // should already be closed
            m_socket.close()
        m_is_initialized = false
    }
    fn is_active() -> bool {
        return m_socket.valid()
    }

	// fn send(bytes: char[]) -> NetError {
	fn send<T>(bytes: T[]) -> NetError {
        size := bytes.len * sizeof (*bytes.ptr)
        if m_protocol & NET_PROTO_MESSAGE {
            m_send_mutex.lock() // Ensure that only one thread sends header and body at once.
                                // Two thread may send headers first and then bodies which will result in the receiver reading two headers which is strange
            defer m_send_mutex.unlock()

            header: MessageHeader
            header.length = size
            err := m_socket.send(cast<void*>&header, sizeof header, 0)
            if err < 0 {
                // log("send header failed1")
                return NET_FAILURE
            }
            m_sent_bytes += sizeof header
            err = m_socket.send(cast<void*>bytes.ptr, header.length, 0)
            if err < 0 {
                // log("send body failed2")
                return NET_FAILURE
            }
            m_sent_bytes += header.length
        } else {
            err := m_socket.send(cast<void*>bytes.ptr, size, 0)
            if err < 0 {
                // log("send stream failed")
                return NET_FAILURE
            }
            m_sent_bytes += size
        }
        return NET_SUCCESS
    }

    fn set_callback(func: EventCallback, user_data: void*) {
        m_event_callback = func
        m_user_data = user_data
    }

    // fn pollEvents(blocking: bool) -> NetEvent[] { }
    
    /*######################
        Members
    #####################*/

	m_ip: StringBuilder;
	m_port: u32;
    m_protocol: NetProtocol;

    m_is_initialized: bool;
    m_socket: Socket;

    m_receiver_thread: Thread;
    m_event_callback: EventCallback;
    m_user_data: void*;

    m_send_mutex: Mutex;

    m_message_data: char*;
    m_message_max: i32;
    
    m_received_bytes: i32;
    m_sent_bytes: i32;
    m_message_byte_limit: i32;

    /*######################
        Internal functions
    #####################*/
}

/*#######################
    CODE FOR TESTING
######################*/

// #import "Threads"
// #import "Logger"
// #macro DEFAULT_IP 0x01_00_00_7F
// #macro DEFAULT_PORT 4000
// fn TestServerAndClient() {

//     server_thread := ThreadCreate(TestServer, null)

//     client: Client
//     err := client.start(DEFAULT_IP,DEFAULT_PORT)

//     ThreadJoin(server_thread)

//     log("Running")
// }
// fn TestServer() {
//     server: Server
//     err := server.start(DEFAULT_PORT)

//     // while {
//     //     events := server.pollEvents(true)
//     //     for events {
//     //         if it.type == Start
//     //     }
//     // }
// }


fn TestNetEvents() {
    server: Server
    client: Client
    client1: Client
    client2: Client

    server.set_callback(s_callback, null)
    client.set_callback(c_callback, null)
    client1.set_callback(c_callback, null)
    client2.set_callback(c_callback, null)
    global mutex: Mutex
    fn s_callback(e: NetEvent, ud: void*) {
        mutex.lock()
        log("Server:")
        std_print_any(&e, true) log()
        // log(&e)
        mutex.unlock()
    }
    fn c_callback(e: NetEvent, ud: void*) {
        mutex.lock()
        log("Client")
        std_print_any(&e, true) log()
        // log(&e)
        mutex.unlock()
    }
    // check start, close event
    // check receive event
    // check connect, disconnect event

    server.start(4000, NET_PROTO_MESSAGE)
    client.start("127.0.0.1",4000, NET_PROTO_MESSAGE)
    client1.start("127.0.0.1",4000, NET_PROTO_MESSAGE)
    
    ProcessSleep(0.5)
    server.disconnect(0)

    client2.start("127.0.0.1",4000, NET_PROTO_MESSAGE)

    // ProcessSleep(0.5)

    server.close()

    // if program doesn't freeze and we get events in this order then the event stuff works to some degree:
        // server start, client start
        // server disconnect
        // client close, server close

    // TODO: Improve testing
}