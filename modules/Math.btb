
// log2
// log10
// loge
// sin
// cos
// tan
// asin,acos,atan2?

#import "OS"

fn @intrinsic sqrt(v: f32) -> f32;
fn @intrinsic round(v: f32) -> f32;
// TODO: Intrinsics for min and max


// TODO: Pseudo random generator with seeds
fn random64() -> u64 {
    num: u64;
#if OS_WINDOWS       
    // NTSTATUS BCryptGenRandom(
    // [in, out] BCRYPT_ALG_HANDLE hAlgorithm,
    // [in, out] PUCHAR            pbBuffer,
    // [in]      ULONG             cbBuffer,
    // [in]      ULONG             dwFlags
    // );
    #load "Bcrypt.lib" as bcrypt
    fn @import(bcrypt) BCryptGenRandom(_: void*, buf: void*, len: u32, flags: u32) -> i32;
    #macro BCRYPT_USE_SYSTEM_PREFERRED_RNG cast<u32>0x00000002
    
    status := BCryptGenRandom(null, &num, sizeof num, BCRYPT_USE_SYSTEM_PREFERRED_RNG);
    if status < 0;
        *cast<u32*>null;
        // TODO: Assert
    
#elif OS_UNIX
    fn @import @unixcall getrandom(buf: void*, len: u64, flags: u32) -> i64;
    bytes := getrandom(&num, sizeof num, 0);
    if bytes != 8 {
        *cast<u32*>null;
        // TODO: Assert
    }
#else
    missing_impl
#endif
    return num;
}
// random between 0.0 and 1.0
fn random_f32() -> f32 {
    // x64 generator can't convert u64 to f32 so we do i64 instead.
    // BUT, we don't want any negative numbers to we mask off the signed bit.
    mask: i64 = 0x7FFF_FFFF_FFFF_FFFF;
    return cast<f32>(cast<i64>random64() & mask) / cast<f32>(0xFFFF_FFFF_FFFF_FFFF & mask);
}

// TODO: Test it
struct RandomGenerator {
    seed: u64;
    _state32: u32;
    _state64: u64;
    fn rand32() -> u32 {
        // https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
        state: u32 = _state32;
        _state32 = _state32 * 747796405u + 2891336453u;
        word: u32 = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
        return (word >> 22u) ^ word;
    }
    fn rand64() -> u64 {
        // https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
        // https://en.wikipedia.org/wiki/Permuted_congruential_generator#Variants
        // https://github.com/imneme/pcg-c/blob/master/include/pcg_variants.h#L276
        state: u64 = _state64;
        _state64 = _state64 * 6364136223846793005u + 1442695040888963407u;
        word: u64 = ((state >> ((state >> 59u) + 5u)) ^ state) * 12605985483714917081u;
        return (word >> 43u) ^ word;
    }
}
fn create_random_generator(seed: u64 = StartMeasure()) -> RandomGenerator {
    return RandomGenerator{seed = seed, _state32 = seed, _state64 = seed};
}


// From NativeLayer
// fn @import sine(f: f32) -> f32;

// These come from the C standard library
// fn @import sinf(f: f32) -> f32;
// fn @import cosf(f: f32) -> f32;
// fn @import tanf(f: f32) -> f32;
// fn @import log10f(f: f32) -> f32;
// fn @import log2f(f: f32) -> f32;
// fn @import logf(f: f32) -> f32;

// Not tested yet
// fn exp(x: f32, y: i32) -> f32{
//     if y < 0 {
//         out = 1;
//         for 0..y {
//             out /= x;
//         }
//     } else {
//         out = 1;
//         for 0..y {
//             out *= x;
//         }
//     }
// }

// TODO: Move elsewhere?
// TODO: Not tested
// TODO: Optimize
// Assumes the slice/array to be sorted
// returns the index of the item. -1 if not found
// fn binary_search<T>(arr: T[], item: T) -> i32 {
//     left: u32 = 0
//     right: u32 = arr.len // bad, casting u64 to u32
//     while {
//         mid := (left + right)/2 // integer overflow?
//         elem := arr.ptr[mid]
//         if item < elem {
//             right = mid - 1
//         } else item > elem {
//             left = mid + 1
//         } else {
//             return mid;
//         }

//     }
// }