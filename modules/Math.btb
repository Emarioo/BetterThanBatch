
// log2
// log10
// loge
// sin
// cos
// tan
// asin,acos,atan2?

#import "OS"

fn @intrinsic sqrt(v: f32) -> f32;
fn @intrinsic round(v: f32) -> f32;
// TODO: Intrinsics for min and max


// TODO: Pseudo random generator with seeds
fn random64() -> u64 {
    num: u64;
#ifdef OS_WINDOWS       
    // NTSTATUS BCryptGenRandom(
    // [in, out] BCRYPT_ALG_HANDLE hAlgorithm,
    // [in, out] PUCHAR            pbBuffer,
    // [in]      ULONG             cbBuffer,
    // [in]      ULONG             dwFlags
    // );
    // MSVC linker
    // #link "Bcrypt.lib"
    // g++ linker
    #link "-lBcrypt"
    fn @dllimport @stdcall BCryptGenRandom(_: void*, buf: void*, len: u32, flags: u32) -> i32;
    #macro BCRYPT_USE_SYSTEM_PREFERRED_RNG cast<u32>0x00000002
    
    status := BCryptGenRandom(null, &num, sizeof num, BCRYPT_USE_SYSTEM_PREFERRED_RNG);
    if status < 0;
        *cast<u32*>null;
        // TODO: Assert
    
#elif OS_UNIX
    fn @import @unixcall getrandom(buf: void*, len: u64, flags: u32) -> i64;
    bytes := getrandom(&num, sizeof num, 0);
    if bytes != 8 {
        *cast<u32*>null;
        // TODO: Assert
    }
#else
    missing_impl
#endif
    return num;
}
// random between 0.0 and 1.0
fn random_f32() -> f32 {
    return cast<f32>random64() / cast<f32>0xFFFF_FFFF_FFFF_FFFF;
}

// TODO: Test it
struct RandomGenerator {
    seed: u64;
    _state32: u32;
    _state64: u64;
    fn rand32() -> u32 {
        // https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
        state: u32 = _state32;
        _state32 = _state32 * 747796405u + 2891336453u;
        word: u32 = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
        return (word >> 22u) ^ word;
    }
    fn rand64() -> u64 {
        // https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
        // https://en.wikipedia.org/wiki/Permuted_congruential_generator#Variants
        // https://github.com/imneme/pcg-c/blob/master/include/pcg_variants.h#L276
        state: u64 = _state64;
        _state64 = _state64 * 6364136223846793005u + 1442695040888963407u;
        word: u64 = ((state >> ((state >> 59u) + 5u)) ^ state) * 12605985483714917081u;
        return (word >> 43u) ^ word;
    }
}
fn create_random_generator(seed: u64 = StartMeasure()) -> RandomGenerator {
    return RandomGenerator{seed = seed, _state32 = seed, _state64 = seed};
}



// From NativeLayer
// fn @import sine(f: f32) -> f32;

// These come from the C standard library
// fn @import sinf(f: f32) -> f32;
// fn @import cosf(f: f32) -> f32;
// fn @import tanf(f: f32) -> f32;
// fn @import log10f(f: f32) -> f32;
// fn @import log2f(f: f32) -> f32;
// fn @import logf(f: f32) -> f32;

// Not tested yet
// fn exp(x: f32, y: i32) -> f32{
//     if y < 0 {
//         out = 1;
//         for 0..y {
//             out /= x;
//         }
//     } else {
//         out = 1;
//         for 0..y {
//             out *= x;
//         }
//     }
// }


// ###########################################
//        CRYPTOGRAPHY STUFF?
//   (move this to it's own crypto.btb file)
// ##########################################

/*
    Requirements:
        out_degest.len == 20
    Warnings:
        Do not use SHA-1 for security.
*/
fn hash_sha1(message: Slice<char>, out_digest: Slice<u8>*) {
    // https://en.wikipedia.org/wiki/SHA-1
    
    h0: u32 = 0x67452301
    h1: u32 = 0xEFCDAB89
    h2: u32 = 0x98BADCFE
    h3: u32 = 0x10325476
    h4: u32 = 0xC3D2E1F0

    ml: u64 = message.len * 8u // message length in bits

    // ##########################################
    //  Pre-processing of chunk and data length
    // ##########################################
    
    data_size := message.len
    data_size += 1 // wiki: "append the bit '1' to the message"
    mod := data_size % 64u // wiki: "append 0 ≤ k < 512 bits '0', such that the resulting message length in bits is congruent to −64 ≡ 448 (mod 512)"
    if mod < 56u {
        data_size += 56 - mod
    } else if mod > 56u {
        data_size += 56 + 64 - mod
    }
    data_size += 8 // wiki: "append ml, the original message length in bits"
    Assert(data_size % 64 == 0)

    // TODO: It would be nice if we didn't need to allocate this memory
    data: u32* = cast<u32*>Allocate(data_size)
    defer Free(data, data_size)
    memzero(data, data_size) // some bits at the end should be zero, might as well zero everything (you could speed things up by just zeroing the last 512-1024 bits or so)

    
    // ###########################################
    // Fill data with message and additional data
    // #########################################
    memcpy(data, message.ptr, message.len)

    (cast<u8*>cast<void*>data)[message.len] = 0x80 // wiki: "append the bit '1' to the message"
    for 0..8 {
        (cast<u8*>cast<void*>data)[data_size - 8 + nr] = *(cast<u8*>cast<void*>&ml + (7 - nr)) // wiki: append ml, the original message length in bits, as a 64-bit big-endian integer. Thus, the total length is a multiple of 512 bits.
    }
    // log("msg_len: ", message.len," data_size: ", data_size," mod: ", mod)
    // std_print_hex(data, data_size, false) log()

    // #####################
    //   Utility functions
    // #####################
    fn leftrotate(x: u32, n: u32) -> u32 {
        // n <= 32
        return (x << n) | (x >> (32u - n))
    }
    fn to_le(x: u32) -> u32 {
        // return x
        return (x >> 24u) |
            ((x >>  8u) & cast<u32>0xFF00) |
            ((x <<  8u) & cast<u32>0xFF0000) |
            ((x << 24u) & cast<u32>0xFF000000)
    }
    fn to_be(x: u32) -> u32 {
        return to_le(x)
    }

    // ##################
    //   Process chunks
    // ##################
    words: u32[80]; // words
    w := words.ptr
    chunk_index: u32 = 0 // 512-bit chunk
    while chunk_index < data_size / 64u { // data_size (bytes) / 64 (512 bits)
        defer chunk_index++

        // TODO: Optimize with SIMD, there is also an alternative
        //   where you don't need 80 words.

        // Load chunk data into words and switch endian?
        for 0..16 {
            w[nr] = to_le(data[chunk_index * 16u + nr])
        }
        for 16..80 {
            i := nr
            tmp: u32 = (w[i-3] ^ w[i-8] ^ w[i-14] ^ w[i-16])
            w[i] = leftrotate(tmp, 1)
        }

        a := h0
        b := h1
        c := h2
        d := h3
        e := h4
        f: u32 = 0
        k: u32 = 0

        // computation
        for 0..80 {
            if 0 <= nr && nr <= 19 {
                f = (b & c) | ((~b) & d)
                k = 0x5A827999
            } else if 20 <= nr && nr <= 39 {
                f = b ^ c ^ d
                k = 0x6ED9EBA1
            } else if 40 <= nr && nr <= 59 {
                f = (b & c) | (b & d) | (c & d) 
                k = 0x8F1BBCDC
            } else if 60 <= nr && nr <= 79 {
                f = b ^ c ^ d
                k = 0xCA62C1D6
            }

            temp := leftrotate(a, 5) + f + e + (k) + (w[nr])
            e = d   
            d = c
            c = leftrotate(b, 30)
            b = a
            a = temp
        }

        h0 = (h0) + (a)
        h1 = (h1) + (b)
        h2 = (h2) + (c)
        h3 = (h3) + (d)
        h4 = (h4) + (e)
    }

    out: u32* = cast<u32*>cast<void*>out_digest.ptr
    Assert(out_digest.len == 20)

    // finalize output
    out[0] = to_be(h0);
    out[1] = to_be(h1);
    out[2] = to_be(h2);
    out[3] = to_be(h3);
    out[4] = to_be(h4);
}