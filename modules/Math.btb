
// log2
// log10
// loge
// sin
// cos
// tan
// asin,acos,atan2?

#if OS_WINDOWS
#import "Windows"
#elif OS_LINUX
#import "Linux"
#endif

fn @intrinsic sqrt(v: f32) -> f32;
fn @intrinsic round(v: f32) -> f32;
fn floor(v: f32) -> f32 { // TODO: Intrinsic
    return cast<f32>cast<i64>v
}
fn ceil(v: f32) -> f32 { // TODO: Intrinsic
    num := cast<f32>cast<i64>v
    if v < 0 {
        if v < num && v > num - 1 {
            return num - 1
        }
    } else {
        if v > num && v < num + 1 {
            return num + 1
        }
    }
    return v
}
// TODO: Intrinsics for pow, min, and max
//   There is pow in inline assembly but is the implementation good?


fn random64() -> u64 {
#if OS_WINDOWS
    num: u64;
    #load "Bcrypt.lib" as bcrypt
    fn @import(bcrypt) BCryptGenRandom(_: void*, buf: void*, len: u32, flags: u32) -> i32;
    #macro BCRYPT_USE_SYSTEM_PREFERRED_RNG cast<u32>0x00000002
    
    status := BCryptGenRandom(null, &num, sizeof num, BCRYPT_USE_SYSTEM_PREFERRED_RNG);
    if status < 0 {
        // TODO: Assert
        *cast<u32*>null;
    }
    return num;
#elif OS_LINUX
    num: u64;
    bytes := getrandom(&num, sizeof num, 0);
    if bytes != 8 {
        // TODO: Assert
        *cast<u32*>null;
    }
    return num;
#endif
}
// random between 0.0 and 1.0
fn random_f32() -> f32 {
    // x64 generator can't convert u64 to f32 so we do i64 instead.
    // BUT, we don't want any negative numbers to we mask off the signed bit.
    mask: i64 = 0x7FFF_FFFF_FFFF_FFFF;
    return cast<f32>(cast<i64>random64() & mask) / cast<f32>(0xFFFF_FFFF_FFFF_FFFF & mask);
}

// TODO: Test it
struct RandomGenerator {
    seed: u64;
    _state32: u32;
    _state64: u64;
    fn rand32() -> u32 {
        // https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
        state: u32 = _state32;
        _state32 = _state32 * 747796405u + 2891336453u;
        word: u32 = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
        return (word >> 22u) ^ word;
    }
    fn rand64() -> u64 {
        // https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/
        // https://en.wikipedia.org/wiki/Permuted_congruential_generator#Variants
        // https://github.com/imneme/pcg-c/blob/master/include/pcg_variants.h#L276
        state: u64 = _state64;
        _state64 = _state64 * 6364136223846793005u + 1442695040888963407u;
        word: u64 = ((state >> ((state >> 59u) + 5u)) ^ state) * 12605985483714917081u;
        return (word >> 43u) ^ word;
    }
}
fn create_random_generator(seed: u64 = rdtsc()) -> RandomGenerator {
    return RandomGenerator{seed = seed, _state32 = seed, _state64 = seed};
}



// From NativeLayer
// fn @import sine(f: f32) -> f32;

// These come from the C standard library
// fn @import sinf(f: f32) -> f32;
// fn @import cosf(f: f32) -> f32;
// fn @import tanf(f: f32) -> f32;
// fn @import log10f(f: f32) -> f32;
// fn @import log2f(f: f32) -> f32;
// fn @import logf(f: f32) -> f32;

// Not tested yet
// fn exp(x: f32, y: i32) -> f32{
//     if y < 0 {
//         out = 1;
//         for 0..y {
//             out /= x;
//         }
//     } else {
//         out = 1;
//         for 0..y {
//             out *= x;
//         }
//     }
// }


// ###########################################
//        CRYPTOGRAPHY STUFF?
//   (move this to it's own crypto.btb file)
// ##########################################

/*
    Requirements:
        out_degest.len == 20
    Warnings:
        Do not use SHA-1 for security.
*/
fn hash_sha1(message: Slice<char>, out_digest: Slice<u8>*) {
    // https://en.wikipedia.org/wiki/SHA-1
    
    h0: u32 = 0x67452301
    h1: u32 = 0xEFCDAB89
    h2: u32 = 0x98BADCFE
    h3: u32 = 0x10325476
    h4: u32 = 0xC3D2E1F0

    ml: u64 = message.len * 8u // message length in bits

    // ##########################################
    //  Pre-processing of chunk and data length
    // ##########################################
    
    data_size := message.len
    data_size += 1 // wiki: "append the bit '1' to the message"
    mod := data_size % 64u // wiki: "append 0 ≤ k < 512 bits '0', such that the resulting message length in bits is congruent to −64 ≡ 448 (mod 512)"
    if mod < 56u {
        data_size += 56 - mod
    } else if mod > 56u {
        data_size += 56 + 64 - mod
    }
    data_size += 8 // wiki: "append ml, the original message length in bits"
    Assert(data_size % 64 == 0)

    // TODO: It would be nice if we didn't need to allocate this memory
    data: u32* = cast<u32*>Allocate(data_size)
    defer Free(data, data_size)
    memzero(data, data_size) // some bits at the end should be zero, might as well zero everything (you could speed things up by just zeroing the last 512-1024 bits or so)

    
    // ###########################################
    // Fill data with message and additional data
    // #########################################
    memcpy(data, message.ptr, message.len)

    (cast<u8*>cast<void*>data)[message.len] = 0x80 // wiki: "append the bit '1' to the message"
    for 0..8 {
        (cast<u8*>cast<void*>data)[data_size - 8 + nr] = *(cast<u8*>cast<void*>&ml + (7 - nr)) // wiki: append ml, the original message length in bits, as a 64-bit big-endian integer. Thus, the total length is a multiple of 512 bits.
    }
    // log("msg_len: ", message.len," data_size: ", data_size," mod: ", mod)
    // std_print_hex(data, data_size, false) log()

    // #####################
    //   Utility functions
    // #####################
    fn leftrotate(x: u32, n: u32) -> u32 {
        // n <= 32
        return (x << n) | (x >> (32u - n))
    }
    fn to_le(x: u32) -> u32 {
        // return x
        return (x >> 24u) |
            ((x >>  8u) & cast<u32>0xFF00) |
            ((x <<  8u) & cast<u32>0xFF0000) |
            ((x << 24u) & cast<u32>0xFF000000)
    }
    fn to_be(x: u32) -> u32 {
        return to_le(x)
    }

    // ##################
    //   Process chunks
    // ##################
    words: u32[80]; // words
    w := words.ptr
    chunk_index: u32 = 0 // 512-bit chunk
    while chunk_index < data_size / 64u { // data_size (bytes) / 64 (512 bits)
        defer chunk_index++

        // TODO: Optimize with SIMD, there is also an alternative
        //   where you don't need 80 words.

        // Load chunk data into words and switch endian?
        for 0..16 {
            w[nr] = to_le(data[chunk_index * 16u + nr])
        }
        for 16..80 {
            i := nr
            tmp: u32 = (w[i-3] ^ w[i-8] ^ w[i-14] ^ w[i-16])
            w[i] = leftrotate(tmp, 1)
        }

        a := h0
        b := h1
        c := h2
        d := h3
        e := h4
        f: u32 = 0
        k: u32 = 0

        // computation
        for 0..80 {
            if 0 <= nr && nr <= 19 {
                f = (b & c) | ((~b) & d)
                k = 0x5A827999
            } else if 20 <= nr && nr <= 39 {
                f = b ^ c ^ d
                k = 0x6ED9EBA1
            } else if 40 <= nr && nr <= 59 {
                f = (b & c) | (b & d) | (c & d) 
                k = 0x8F1BBCDC
            } else if 60 <= nr && nr <= 79 {
                f = b ^ c ^ d
                k = 0xCA62C1D6
            }

            temp := leftrotate(a, 5) + f + e + (k) + (w[nr])
            e = d   
            d = c
            c = leftrotate(b, 30)
            b = a
            a = temp
        }

        h0 = (h0) + (a)
        h1 = (h1) + (b)
        h2 = (h2) + (c)
        h3 = (h3) + (d)
        h4 = (h4) + (e)
    }

    out: u32* = cast<u32*>cast<void*>out_digest.ptr
    Assert(out_digest.len == 20)

    // finalize output
    out[0] = to_be(h0);
    out[1] = to_be(h1);
    out[2] = to_be(h2);
    out[3] = to_be(h3);
    out[4] = to_be(h4);
}

// TODO: Move elsewhere?
// TODO: Not tested
// TODO: Optimize
// Assumes the slice/array to be sorted
// returns the index of the item. -1 if not found
// fn binary_search<T>(arr: T[], item: T) -> i32 {
//     left: u32 = 0
//     right: u32 = arr.len // bad, casting u64 to u32
//     while {
//         mid := (left + right)/2 // integer overflow?
//         elem := arr.ptr[mid]
//         if item < elem {
//             right = mid - 1
//         } else item > elem {
//             left = mid + 1
//         } else {
//             return mid;
//         }

//     }
// }

struct f16 {
    bits: u16;
    fn sign() -> i32 { return cast<u32>(bits >> 15) & 0x1u }
    fn exp() -> i32 { return cast<u32>(bits >> 10) & 0x1Fu }
    fn mantissa() -> i32 { return cast<u32>(bits >> 0) & 0x3FFu }
}
fn make_f16(f: f32) -> f16 {
    tmp: i32 = cast_unsafe<i32>f
    sign := tmp >> 31
    exp := tmp >> 23
    if exp & 0x80
        exp = ((exp -127) & 0xf) + 15
    else
        exp = exp & 0xF
    mantissa := (tmp >> 13) & 0x3FF
    return make_f16(sign, exp, mantissa)
}
fn make_f16(sign: i32, exp: i32, mantissa: i32) -> f16 {
    return f16{((sign&1)<<15) | ((exp & 0x1F) << 10) | (mantissa & 0x3FF) }
}

fn add(a: f16, b: f16) -> f16 {
    sign := (a.bits >> 15)  ^ (b.bits >> 15)
    
    a_exp := a.exp()
    b_exp := b.exp()
    
    exp: i32
    mant: i32
    diff := a_exp - b_exp
    if diff > 0 {
        mant = (a.mantissa() | 0x400) << diff + (b.mantissa() | 0x400)
        if mant & (0x400 << diff) { // overflow of mantissa
            exp = a_exp + 1
            mant = mant >> (diff + 1)
        } else {
            exp = a_exp
            mant = mant >> (diff)
        }
    } else if diff < 0 {
        mant = (a.mantissa() | 0x400) + (b.mantissa() | 0x400) << -diff
        if mant & (0x400 << -diff) { // overflow of mantissa
            exp = b_exp + 1
            mant = mant >> (-diff + 1)
        } else {
            exp = b_exp
            mant = mant >> (-diff)
        }
    } else {
        mant = a.mantissa() + b.mantissa()
        exp = a_exp + 1
        mant = mant >> 1
    }
    return make_f16(sign, exp, mant)
}
fn sub(a: f16, b: f16) -> f16 {
    return add(a, cast_unsafe<f16>(cast<u16>0x8000^b.bits))
}
operator +(a: f16, b: f16) -> f16 { return add(a, b) }
operator -(a: f16, b: f16) -> f16 { return sub(a, b) }

// function overloading is broken?
// fn std_print(f: f16) {
//     bits: u32 = cast_unsafe<u16>f;
    
//     sign := (bits >> 15u) & 1u;
//     exp := (bits >> 10u) & 0x1Fu;
//     mantissa: u64 = 0x400u | (bits & 0x3FFu)

//     if sign
//         std_print('-');
        
//     intPart: u64 = 0;
//     decimalBits: i32 = 10 - (exp-15);

//     if decimalBits < 1 {
//         intPart = (mantissa) << (0-decimalBits);
//         if intPart == 0 {
//             printc('0')
//         } else {
//             str: char[23];
//             used := 22;
//             while intPart > 0u && used > 0 {
//                 digit: u8 = intPart % 10u;
//                 // log("i",intPart);
//                 // log("d",digit);
//                 str.ptr[used] = digit + '0';
//                 used--;
//                 intPart = intPart / 10u;
//             }
//             str.ptr += used + 1;
//             str.len -= used + 1;
//             prints(str);
//         }
//         // std_print(intPart);
//         std_print('.');
//         std_print('0');
//     } else {
//         if exp >= 15u
//             intPart = (mantissa) >> decimalBits;
//         std_print(cast<i64>intPart);
//         std_print('.');

//         decimals: char[24];

//         acc: u64 = 0;
//         mul: u64 = 1;
//         // std_print(decimalBits); std_print('\n')
//         precision := 19; // digits u64 can contain (18446744073709551615)
//         minBits :i32= decimalBits - precision;
//         if minBits < 0 {
//             minBits = 0;
//         }
//         // log(minBits, decimalBits)
//         for @rev minBits..decimalBits {
//             mul *= 5u;
//             acc = acc*10u
//             // log("nr", nr)
//             if nr < 24 {
//                 bit := cast<u64>1 & (mantissa >> nr)
//                 if bit {
//                     acc += mul;
//                 }
//                 // std_print(acc); std_print('\n')
//             }
//         }
//         // std_print(acc);
//         if acc == 0
//             std_print('0');
//         blank := true;
//         lastZero := 0
//         limit := precision;
//         if decimalBits < precision;
//             limit = decimalBits;
//         for @rev 0..limit {
//             digit := acc % 10u;
//             acc = acc / 10u;
//             if !blank || digit != 0 {
//                 decimals.ptr[nr] = digit + '0';
//                 if blank
//                     lastZero = nr+1
//                 blank = false;
//             }
//         }
//         decimals.len = lastZero;
//         std_print(decimals)
//     }
// }

// better than O(n) for larger n (y) at least
fn pow(x: i64, y: i64) -> i64 {
    if y < 0
        return 0
    if y == 1
        return x

    // keep the code version in case inline assembly breaks
    // res: i64 = x
    // y--
    // n := 0
    // while y {
    //     // log("res ",res,", n ",n,", y ",y)
    //     if y >= n * 2 && y & cast<i64>1 == 0 {
    //         res *= res
    //         y /= 2
    //         n *= 2
    //     } else {
    //         res *= x
    //         y--
    //         n++
    //     }
    // }
    // assembly version
    res := asm<i64>(x,y-1) {
        mov rdi, 0   // n
        pop rsi      // y
        pop rdx      // x
        mov rax, rdx // accumulator

    while_loop:
        mov rcx, rdi
        shl rcx, 1
        cmp rsi, rcx
        jl else
        test rsi, 1
        jnz else
    // if:
        imul rax, rax

        shr rsi, 1
        shl rdi, 1
        jmp end
    else:
        imul rax, rdx

        dec rsi
        inc rdi
    end:

        cmp rsi, 0
        jnz while_loop

        push rax
    }

    return res
}

struct vec2 {
    x: f32;
    y: f32;

    // methods don't work on pushed values
    // fn length() {}
}
struct vec3 {
    x: f32;
    y: f32;
    z: f32;
}
struct vec4 {
    x: f32;
    y: f32;
    z: f32;
    w: f32;
}
operator +(a: vec2, b: vec2) -> vec2 {
    return vec2{a.x + b.x, a.y + b.y}
}
operator -(a: vec2, b: vec2) -> vec2 {
    return vec2{a.x - b.x, a.y - b.y}
}
operator *(a: vec2, b: f32) -> vec2 {
    return vec2{a.x * b, a.y * b}
}
operator *(b: f32, a: vec2) -> vec2 {
    return vec2{a.x * b, a.y * b}
}
operator /(a: vec2, b: f32) -> vec2 {
    return vec2{a.x / b, a.y / b}
}
fn length(a: vec2) {
    return sqrt(a.x*a.x + a.y*a.y)
}
fn length2(a: vec2) {
    return a.x*a.x + a.y*a.y
}

// a box collides with b box (aabb collision detection)
fn collides(pos_a: vec2, size_a: vec2, pos_b: vec2, size_b: vec2) -> bool {
    return pos_a.x + size_a.x > pos_b.x &&
        pos_a.x < pos_b.x + size_b.x && 
        pos_a.y + size_a.y > pos_b.y && 
        pos_a.y < pos_b.y + size_b.y
}