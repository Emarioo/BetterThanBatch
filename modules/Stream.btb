#import "OS"
#import "Logger"
#import "Array"

struct ByteStream_Allocation {
    ptr: void* = null;
    written_bytes: i32 = 0; // writeHead relative to this allocation
    max: i32 = 0; // size of allocation
}
// TODO: Asserts
// Note that memory is uninitialized
// All read functions take a pointer to a 32-bit variable which is the offset.
// This means that multiple threads can read from the stream at once.
struct ByteStream {
    allocations: Array<ByteStream_Allocation>;
    written_bytes: i32 = 0; // next byte to write to
    last_allocation: i32 = 0; // allocation that was last written to or should be written to
    
    // TODO: m_allocator: Allocator*;

    // unknown_state: bool = false;

    fn cleanup() { reserve(0); }

    fn get_write_head() -> i32 {
        return written_bytes;
    }
    fn write(ptr: void*, len: u64) -> bool {
        // Assert(ptr && size != 0);
        dst := write_late(len)
        if !dst
            return false
        memcpy(dst, ptr, len)
        return true;
    }
    // recommend writing things that fit in registers (64-bit), it's more efficicent
    fn write<T>(value: T) -> bool {
        return write(&value, sizeof T);
    }
    fn write_late(size: i32) -> void* {
        // Assert(size != 0);
        // Assert(size < 0x10000000); // probably a bug if it's this large
        // Assert(!unknown_state);
        
        allocation: ByteStream_Allocation* = null;
        if(allocations.size() > last_allocation)
            allocation = allocations.get_unsafe(last_allocation);
        
        add_new: bool = !allocation // NOTE: Language doesn't have short-circuit ifs
        if !add_new
            add_new = allocation.written_bytes + size > allocation.max
        if(add_new) {
            suc := allocations.add();
            if(!suc) {
                // Assert(false);
                return null;
            }
            last_allocation = allocations.size()-1;
            
            allocation = allocations.get_unsafe(last_allocation);
            allocation.max = size*2 + written_bytes * 1.5; // MEMORY GROWTH
            // ENSURE_ALLOCATOR

            // allocation->ptr = (u8*)m_allocator->allocate(allocation->max);
            allocation.ptr = Allocate(allocation.max);

            if(!allocation.ptr) {
                allocations.remove(allocations.size()-1);
                // Assert(false);
                return null;   
            }
        }
        
        out_ptr :=  allocation.ptr + allocation.written_bytes;
        allocation.written_bytes += size;
        written_bytes += size;
        return out_ptr;
    }
    fn write_at(offset: i32, ptr: void*, size: i32) -> bool {
        // Assert(size != 0);
        // Assert(!unknown_state);
        // Assert(offset < written_bytes);
        // Assert(ptr);
          
        seek_offset: i32 = 0;
        cur_written_bytes: i32 = 0;
        for i: 0..allocations.size() {
            all := allocations.get_unsafe(i)

            diff := offset + cur_written_bytes - seek_offset;
            if(diff >= 0 && diff < all.written_bytes) {
                dst := all.ptr + diff;
                
                clamped_size: i32 = size - cur_written_bytes;
                if (clamped_size > all.written_bytes - diff) {
                    clamped_size = all.written_bytes - diff;
                }
                
                memcpy(dst, ptr + cur_written_bytes, clamped_size);
                cur_written_bytes += clamped_size;
                
                if(cur_written_bytes == size)
                    break;
            }
            seek_offset += all.written_bytes;
        }
        
        // Assert(cur_written_bytes == size);
        if(cur_written_bytes != size)
            return false;
        return true;
    }
    fn write_alignment(alignment: i32) {
        mis := alignment - (written_bytes % alignment)
        if mis != 0 {
            ptr := write_late(mis)
            memzero(ptr, mis)
        }
    }
  
    // fn write_slice<T>(slice: Slice<T>) -> bool {
    //     return write(slice.ptr, slice.len)
    // }
    fn write_string8(str: Slice<char>) -> bool {
        if str.len > 0xFF
            return false
        yes := write<u8>(str.len)
        if !yes  return false
        yes = write(str.ptr, str.len)
        if !yes  return false
        return true
    }
    fn write_string16(str: Slice<char>) -> bool {
        if str.len > 0xFFFF
            return false
        yes := write<u16>(str.len)
        if !yes  return false
        yes = write(str.ptr, str.len)
        if !yes  return false
        return true
    }
  
    fn resetHead() {
        written_bytes = 0;
        last_allocation = 0;
        for i: 0..allocations.size() {
            allocations[i].written_bytes = 0;
        }
    }
    fn read(offset: i32*, ptr: void*, size: i32) -> bool {
        // Assert(size != 0);
        head: i32 = 0;
        size_left: i32 = size;
        for i: 0..allocations.size() {
            all: ByteStream_Allocation* = allocations.get_unsafe(i);
            
            rel_off: i32 = *offset - head; // relative offset in the allocation
            rem_size: i32 = all.written_bytes - rel_off; // remaining size of the allocation from the relative offset
            
            if(rem_size <= 0) {
                head += all.written_bytes;
                continue;
            }
            
            real_size: i32 = size_left;
            if(real_size > rem_size) {
                real_size = rem_size;
            }
            dst := ptr + *offset - rel_off - head;
            // Assert(cast<u64>dst >= cast<u64>ptr && cast<u64>dst < cast<u64>ptr + size);
            // Assert(rel_off < all.written_bytes);
            memcpy(dst, all.ptr + rel_off, real_size);
            *offset += real_size;
            size_left -= real_size;
            
            head += all.written_bytes;

            if(size_left == 0)
                break;
        }
        if size_left == 0 {
            *offset += size
            return true
        }
        return false
    }
    fn read<T>(offset: i32*, ptr: T*) -> bool {
        return read(offset, ptr, sizeof T)
    }
    fn read_alignment(offset: i32*, alignment: i32) -> i32 {
        mis := alignment - (offset % alignment)
        if mis != 0 {
            *offset += mis
            return mis
        }
    }
    fn read_string8(offset: i32*, str: StringBuilder*) -> bool {
        l: u8
        read<u8>(offset, &l)
        str.reserve(l)
        str.len = l
        return read(offset, str.ptr, str.len)
    }
    fn read_string16(offset: i32*, str: StringBuilder*) -> bool {
        l: u16
        read<u16>(offset, &l)
        str.reserve(l)
        str.len = l
        return read(offset, str.ptr, str.len)
    }

    // Marked unsafe because the pointer in the returned slice
    // may be invalidated if the stream is cleaned up.
    fn sliced_unsafe() -> Slice<u8> {
        return Slice<u8>{cast<u8*>data, size};
    }
    // fn resize(newLen: u32) -> bool {
    //     if newLen > max {
    //         if !_reserve(newLen)
    //             return false;
    //     }
    //     len = newLen;
    //     return true;
    // }
    fn reserve(newMax: u32) -> bool {
        suc: bool = allocations.add();
        if(!suc)
            return false;
        
        allocation := allocations.last();
        allocation.max = newMax;
        // ENSURE_ALLOCATOR
        // allocation->ptr = (u8*)m_allocator->allocate(allocation->max);
        allocation.ptr = Allocate(allocation.max);
        if(!allocation.ptr) {
            allocations.remove(allocations.size()-1);
            return false;   
        }
        return true;
    }
    // combines all allocations into one
    // All previous pointers from write_late are invalidated.
    fn finalize(out_ptr: void**, out_size: i32*) -> bool{
        // Assert(out_ptr && out_size != 0);
        if(out_ptr) {
            *out_ptr = null;
        }
        if(out_size){
            *out_size = 0;
        }
        
        max: i32 = written_bytes;
        // ENSURE_ALLOCATOR
        // u8* ptr = (u8*)m_allocator->allocate(max);
        ptr := Allocate(max);
        if(!ptr) {
            // Assert(false);
            return false;
        }
            
        // combine allocations into one
        offset: i32 = 0;
        for i: 0..allocations.size() {
            a := allocations.get_unsafe(i);
            Assert(a.written_bytes != 0 && a.ptr);
            memcpy(ptr + offset, a.ptr, a.written_bytes);
            offset += a.written_bytes;
            
            // m_allocator->allocate(0, a.ptr, a.max);
            // Free(a.ptr)
        }
        // Assert(offset == written_bytes);
        
        allocations.resize(1);
        last := allocations.last()
        last.ptr = ptr;
        last.max = max;
        last.written_bytes = written_bytes;
        last_allocation = allocations.size()-1;
        
        if(out_size) {
            *out_size = written_bytes;
        }
        if(out_ptr) {
            *out_ptr = ptr;
        }
        return true;
    }
    fn create_iterator() -> ByteStream_Iterator {
        return {}
    }
    // Iterates through all bytes of the stream.
    // Do not write to stream while iterating.
    fn iterate(iterator: ByteStream_Iterator*, byte_limit: i32 = -1) -> bool {
        iterator.ptr = null;
        iterator.size = 0;

        while(true) {
            all: ByteStream_Allocation* = null;
            
            if(iterator._index < allocations.size()) {
                all = allocations.get_unsafe(iterator._index);
            } else {
                break;
            }
            
            if(all.written_bytes == iterator._read_bytes) {
                iterator._read_bytes = 0;
                iterator._index++;
                continue;
            }
                
            iterator.size = all.written_bytes - iterator._read_bytes;
            if(byte_limit == -1) {

            } else if(iterator.size > byte_limit) {
                iterator.size = byte_limit;
            }
                
            iterator.ptr = all.ptr + iterator._read_bytes;
            iterator._read_bytes += iterator.size;
            break;
        }
        return iterator.size != 0;
    }
}
 struct ByteStream_Iterator {
    ptr: void* = null;
    size: i32 = 0;

    _read_bytes: i32 = 0;
    _index: i32 = 0;
};

/*
    Any pointers retrieved from the stream will not be invalidated by resizes.
*/
// struct StableStream {
    
// }


fn print_bytes(stream: ByteStream*) {
    slice := stream.sliced_unsafe()
    for slice {
        std_print(it); std_print(' ');
    }
    std_print('\n');
}