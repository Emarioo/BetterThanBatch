#import "OS"
#import "Logger"

// TODO: Asserts
// Note that memory is uninitialized
struct ByteStream {
    // zero initialized by default
    data: void*;
    max: u32; // allocated bytes
    size: u32; // elements in allocation

    fn cleanup() { reserve(0); }

    fn get_head() -> u32 {
        return size;
    }
    fn write(ptr: void*, len: u64) -> bool {
        if size + len > max {
            yes := reserve(64u + len + max * 2u)
            if !yes   return false;
        }

        memcpy(data + size, ptr, len);
        size += len;
        return true;
    }
    // fn write_slice<T>(slice: Slice<T>) -> bool {
    //     return write(slice.ptr, slice.len)
    // }
    fn write_string(str: Slice<char>) -> bool {
        yes := write<u16>(str.len)
        if !yes  return false
        yes = write(str.ptr, str.len)
        if !yes  return false
        return true
    }
    fn write<T>(value: T) -> bool {
        t_size := sizeof(T);
        if t_size == 1 || t_size == 2 || t_size == 4 || t_size == 8 {
            return write(&value, t_size);
        }
        return false;
    }
    fn read(ptr: void*, len: u64) -> bool {
        if size + len > max {
            return false
        }
        if ptr
            memcpy(ptr, data + size, len);
        size += len;
        return true;
    }
    fn read_string(str: StringBuilder*) -> bool {
        l: u16
        read<u16>(&l)
        str._reserve(l)
        str.len = l
        return read(str.ptr, str.len)
    }
    fn read<T>(ptr: T*) -> bool {
        return read(ptr, sizeof T)
    }
    // Marked unsafe because the pointer in the returned slice
    // may be invalidated if the stream is cleaned up.
    fn sliced_unsafe() -> Slice<u8> {
        return Slice<u8>{cast<u8*>data, size};
    }
    // fn resize(newLen: u32) -> bool {
    //     if newLen > max {
    //         if !_reserve(newLen)
    //             return false;
    //     }
    //     len = newLen;
    //     return true;
    // }
    fn reserve(newMax: u32) -> bool {
        // log("newMax",newMax)
        if(newMax==0){
            // log("oh")
            if(max!=0){
                Free(data, max);
            }
            data = null;
            max = 0;
            size = 0;
            return true;
        }
        // log("what",cast<u64>ptr)
        if(!data){
            // log("huh")
            data = Allocate(newMax);
            // log("allocSize",newMax * sizeof T)
            // log("ptr",ptr)
            // Assert(ptr);
            // initialization of elements is done when adding them
            if(!data)
                return false;
            max = newMax;
            return true;
        } else {
            newPtr: u8* = Reallocate(newMax, data, max);
            // Assert(newPtr);
            if(!newPtr)
                return false;
            data = newPtr;
            max = newMax;
            if(size > newMax){
                size = newMax;
            }
            return true;
        }
        return false;
    }
}

/*
    Any pointers retrieved from the stream will not be invalidated by resizes.
*/
struct StableStream {
    
}


fn print_bytes(stream: ByteStream*) {
    slice := stream.sliced_unsafe()
    for slice {
        std_print(it); std_print(' ');
    }
    std_print('\n');
}