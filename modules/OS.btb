/*
    This is a file/module which contains functions that allows
    you to interact with the operating system. Programs are 
    useless without these functions.

    TODO: The implementation is defined in NativeLayer.cpp.
      We will deprecate NativeLayer and just write the implementation in .btb files.
      Either all versions in OS.btb or in separate Windows.btb, Unix.btb.


*/

#import "Memory"
#import "File"
#import "Logger"

#if OS_WINDOWS
#import "Windows"
#elif OS_LINUX
#import "Linux"
#endif


// #if LINKER_MSVC
//     #load "bin/NativeLayer.lib" as native_layer
// #else
//     #load "bin/NativeLayer_gcc.lib" as native_layer
// #endif

#if LINK_BYTECODE
    #macro LINK_TYPE @native
#elif OS_WINDOWS
    #macro LINK_TYPE @import(native_layer) @stdcall
#elif OS_LINUX
    #macro LINK_TYPE @import(native_layer) @unixcall
#endif

struct Process {
    os_handle: i64;

    fn cleanup() {
        if !os_handle
            return;
        #if OS_WINDOWS
            CloseHandle(API_TO_OS_HANDLE(os_handle))
            os_handle = 0
        #else
            incomplete
        #endif
    }
    fn valid() -> bool { return os_handle }
    fn is_active() -> bool {
        if !os_handle
            return false
        #if OS_WINDOWS
            exit_code: i32
            yes := GetExitCodeProcess(os_handle, &exit_code)
            // return exit code as a second return value or through argument when inactive?
            return exit_code == STILL_ACTIVE
        #else
            incomplete
        #endif
    }
}

// NOTE: We force microsecond resolution (assuming MONOTONIC clock supports it)
#macro __LINUX_MEASURE_RESOLUTION 1000_000
fn StartMeasure() -> i64 {
    #if OS_WINDOWS
        tp: i64
        QueryPerformanceCounter(&tp)
        return tp
    #else
        spec: timespec
        clock_gettime(CLOCK_MONOTONIC, &spec)
        tp: i64 = cast<i64>(spec.tv_sec * __LINUX_MEASURE_RESOLUTION) + cast<i64>(spec.tv_nsec / (cast<i64>1000_000_000/cast<i64>__LINUX_MEASURE_RESOLUTION))
        return tp
    #endif   
}
fn StopMeasure(timePoint: i64) -> f64 {
    #if OS_WINDOWS
        tp, freq: i64
        QueryPerformanceCounter(&tp)
        QueryPerformanceFrequency(&freq)
        return cast<f64> (tp - timePoint) / cast<f64> freq
    #elif OS_LINUX
        spec: timespec
        clock_gettime(CLOCK_MONOTONIC, &spec)
        tp: i64 = cast<i64>(spec.tv_sec * __LINUX_MEASURE_RESOLUTION) + cast<i64>(spec.tv_nsec / (cast<i64>1000_000_000/cast<i64>__LINUX_MEASURE_RESOLUTION))

        return cast<f64> (tp - timePoint) / cast<f64> __LINUX_MEASURE_RESOLUTION
    #endif
}
fn DiffMeasure(endSubStart: i64) -> f64 {
    #if OS_WINDOWS
        freq: i64
        QueryPerformanceFrequency(&freq)
        return cast<f64>endSubStart / cast<f64>freq
    #elif OS_LINUX
        return cast<f64>endSubStart / cast<f64>__LINUX_MEASURE_RESOLUTION
    #endif
}

fn ProcessSleep(seconds: f32) {
    #if OS_WINDOWS
    win32_Sleep(seconds * 1000)
    #elif OS_LINUX
    time: timespec
    if seconds >= 1. {
        time.tv_sec = cast<i64>seconds
    }
    time.tv_nsec = cast<i64>( 1000000000.0 * (seconds - cast<f32>cast<i64>seconds) )
    nanosleep(&time,null)
    #endif   
}


// fn LINK_TYPE GetClockSpeed() -> u64;

// fn LINK_TYPE ExecuteCommand(path: Slice<char>*, asynchronous: bool = false, exitCode: i32* = null) -> bool;

// Somewhat Linux specific
global global_environment: char**
fn SetEnvironment(env: char**) {
    global_environment = env
}
fn GetEnvironment() -> char** {
    return global_environment
}
fn FindEnvironmentVar(name: Slice<char>) -> char* {
    envc := 0
    while global_environment[envc] {
        env := global_environment[envc]
        envc++;

        if equal_start(name, env) && env[name.len] == '=' {
            return substring(env, 5).ptr
        }
    }
    return null
}
fn DumpEnvironment(envp: char** = null) {
    if !envp
        envp = global_environment
    envc := 0
    while envp[envc] {
        env := envp[envc]
        envc++;

        log(env)
        // if equal_start("PATH=",env) {
        //     // log(env)
        //     arr := split(":",substring(env,5))
        //     for arr.sliced_unsafe() {
        //         log(it)
        //     }
        // }
    }
}

// returns argc, argv
// don't forget to cleanup the buffers
// TODO: Linear allocator for the buffers instead of StringBuilder and Array?
fn ParseCmdLine(cmd: char[], buffer_text: StringBuilder*, buffer_args: Array<char*>*) -> i32, char** {
    // This function doesn't conform to the way command line SHOULD be parsed

    word_start := 0
    parsed_command := false
    inside_quote := false

    head := 0
    while head < cmd.len {
        chr := cmd[head]
        head++;

        if chr == '"' {
            if inside_quote {
                // submit word
                word_end := head - 1
                buffer_args.add(cast<char*>cast<i64>buffer_text.size())
                buffer_text.append(substring(cmd, word_start, word_end))
                buffer_text.append('\0')
            } else {
                // start word
                // word_start = head
            }
            word_start = head // new word may start at next character
            inside_quote = !inside_quote
            continue
        }

        if inside_quote
            continue

        if chr == ' ' || chr == '\n' || chr == '\t' || chr == '\r' || head == cmd.len {
            word_end := head - 1
            if head == cmd.len
                word_end = head
            if word_end - word_start > 0 {
                buffer_args.add(cast<char*>cast<i64>buffer_text.size())
                buffer_text.append(substring(cmd, word_start, word_end))
                buffer_text.append('\0')
            }
            word_start = head
        }
    }

    // fix arg pointers later because raw_args may be reallocated and invalidate pointers
    for @ptr buffer_args.sliced() {
        *it = cast<i64>*it + buffer_text.ptr
    }

    buffer_args.add(null) // null marks the end of arguments

    // debugging
    // log("Args:")
    // log(command)
    // for args.sliced()
    //     log(it)

    return buffer_args.len, buffer_args.ptr
}

// Only works on windows
fn ExecuteCommand(cmd: char[], exit_code: i32* = null, asynchronous: bool = false, process: Process* = null) -> bool {
    // Parsing command line is more complicated than this.
    // Use the other ExecuteCommand overload separate cmd and arguments.
    
    command: StringBuilder
    raw_args: StringBuilder
    args: Array<char*>
    defer {
        command.cleanup()
        raw_args.cleanup()
        args.cleanup()
    }

    word_start := 0

    parsed_command := false

    inside_quote := false

    head := 0
    while head < cmd.len {
        chr := cmd[head]
        head++;

        if chr == '"' {
            if inside_quote {
                // submit word
                word_end := head - 1
                if !parsed_command {
                    command.append(substring(cmd, word_start, word_end))
                    args.add(cast<char*>cast<i64>raw_args.size())
                    // command is added to args too
                }
                args.add(cast<char*>cast<i64>raw_args.size())
                raw_args.append(substring(cmd, word_start, word_end))
                raw_args.append('\0')
            } else {
                // start word
                // word_start = head
            }
            word_start = head // new word may start at next character
            inside_quote = !inside_quote
            continue
        }

        if inside_quote
            continue

        if chr == ' ' || chr == '\n' || chr == '\t' || chr == '\r' || head == cmd.len {
            word_end := head - 1
            if head == cmd.len
                word_end = head
            if word_end - word_start > 0 {
                if !parsed_command {
                    command.append(substring(cmd, word_start, word_end))
                    parsed_command =  true
                    // command is added to args too
                }
                args.add(cast<char*>cast<i64>raw_args.size())
                raw_args.append(substring(cmd, word_start, word_end))
                raw_args.append('\0')
            }
            word_start = head
        }
    }

    // fix arg pointers later because raw_args may be reallocated and invalidate pointers
    for @ptr args.sliced() {
        *it = cast<i64>*it + raw_args.ptr
    }

    args.add(null) // null marks the end of arguments

    // debugging
    // log("Args:")
    // log(command)
    // for args.sliced()
    //     log(it)

    yes := ExecuteCommand(command.sliced(), args.ptr, exit_code, asynchronous, process)
    return yes
}

// Returns false if anything failed, NOT if the program you called
// failed. Check 'exit_code' for that.
// 'asynchronous' will run the command without waiting for status code
fn ExecuteCommand(cmd: char[], args: char**, exit_code: i32* = null, asynchronous: bool = false, process: Process* = null) -> bool {
    // TODO: This function doesn't mix well with Windows and Linux. cmd can contain executable path
    // and arguments on Windows but on Linux you must separate them where cmd has executable and 'args'
    // has arguments.
#if OS_WINDOWS
    if(!cmd.ptr || cmd.len == 0){
        return false;
    }
    
    // additional information
    si: STARTUPINFOA;
    pi: PROCESS_INFORMATION;
    // set the size of the structures
    memzero(&si, sizeof(si));
    si.cb = sizeof(si);
    memzero(&pi, sizeof(pi));
    
    // This commented code comes from Win32.cpp (PlatformLayer in Engone)
    // 
    // if(fStdin){
    //     // auto& info = pipes[fStdin];
    //     // si.hStdInput = info.readH;
    //     si.hStdInput = TO_HANDLE(fStdin.internal);
    // }
    // if(fStdout){
    //     // auto& info = pipes[fStdout];
    //     // si.hStdOutput = info.writeH;
    //     // si.hStdError = info.writeH;
    //     si.hStdOutput = TO_HANDLE(fStdout.internal);
    // }
    // if(fStderr){
    //     // auto& info = pipes[fStderr];
    //     // si.hStdError = info.writeH;
    //     si.hStdError = TO_HANDLE(fStderr.internal);
    // }
    inheritHandles := true;
    // if(fStdin||fStdout||fStderr){
    //     si.dwFlags |= STARTF_USESTDHANDLES;
    //     inheritHandles = true;
    // }
    // inheritHandles = false;
        
    // int slashIndex = path.find_last_of("\\");

    // std::string workingDir{};
    dir: char* = null;
    // if(slashIndex!=-1)
    // 	workingDir = path.substr(0, slashIndex);
    // else
    // 	workingDir = GetWorkingDirectory();
    
    // if(!workingDir.empty())
    // 	dir = workingDir.c_str();
        
    createFlags: i32= 0;
    // if(flags&PROGRAM_NEW_CONSOLE)
    //     createFlags |= CREATE_NEW_CONSOLE;

    tmp: StringBuilder // I believe CreateProcessA may modify the string we give it so we create a little temporary string here so the caller of ExecuteCommand isn't affected
    tmp.append(cmd)
    if args {
        ind := 1 // skip first, since first is executable name
        while args[ind] {
            has_whitespace := false
            len := strlen(args[ind])
            for 0..len {
                if args[ind][nr] == ' ' {
                    has_whitespace = true
                    break
                }
            }
            if has_whitespace
                tmp.append(" \"")
            else
                tmp.append(" ")
            tmp.append(args[ind])
            if has_whitespace
                tmp.append("\"")
            ind++
        }
    }

    // log("tmp: ",tmp)
        
    yes := CreateProcessA(null,   // the path
                    tmp.ptr,        // Command line
                    null,           // Process handle not inheritable
                    null,           // Thread handle not inheritable
                    inheritHandles,          // Set handle inheritance
                    createFlags,              // creation flags
                    null,           // Use parent's environment block
                    dir,   // starting directory 
                    &si,            // Pointer to STARTUPINFO structure
                    &pi             // Pointer to PROCESS_INFORMATION structure (removed extra parentheses)
                    );
    if(!yes){
        err := GetLastError();
        if(err == ERROR_BAD_EXE_FORMAT){
            log("[WinError ",err,"] StartProgram, bad_exe_format ",cmd);
        }else{
            log("[WinError ",err,"] StartProgram, could not start ",cmd);
            // TODO: does the handles need to be closed? probably not since CreateProcess failed. double check.	
        }
        return false;
    }
    if(!asynchronous){
        WaitForSingleObject(pi.hProcess,INFINITE);
        if(exit_code){
            success := GetExitCodeProcess(pi.hProcess, cast<i32*>exit_code);
            if(!success){
                err := GetLastError();
                log("[WinError ",err,"] StartProgram, failed acquring exit code (path: ",cmd,")");	
            }else{
                if(success==STILL_ACTIVE){
                    log("[WinWarning] StartProgram, cannot get exit code, process is active (path: ",cmd,")");	
                }else{
                    
                }
            }
        }
    } else {
        if exit_code {
            *exit_code = 0 // perhaps we shouldn't set exit code at all?
        }
    }
    
    CloseHandle(pi.hThread);
    if process && asynchronous {
        *process = Process{}
        process.os_handle = OS_TO_API_HANDLE(pi.hProcess)
    } else {
        CloseHandle(pi.hProcess);
    }
    
    return true;
#elif OS_LINUX

    // We might be able to get away with vfork, it's just that we must copy cmd
    // because it might point to invalid memory if asynchronous was specified
    pid := fork()

    if pid < 0 {
        log("Error in 'ExecuteCommand': fork, ", name_of_error(pid))
        return false;
    }

    if pid == 0 {
        // child process
        
        if !global_environment {

            global_environment = environ
            // log("Warning in 'ExecuteCommand': global_environment is null, see SetEnvironment.")
        }

        real_path := FindFile(cmd, true)
        // real_path: StringBuilder
        // real_path.append("okay")
        // real_path: StringBuilder
        defer {
            real_path.cleanup();
        }
        // log(real_path)
        temp_args: char*[]{
            cmd.ptr,
            null
        }
        real_args: char** = args
        if !real_args {
            // temp_args[0] = real_path.ptr
            real_args = temp_args.ptr
        }

        // log("rp ",real_path.ptr)
        ptr := Allocate(2423)

        if real_path.ptr {
        // if false {
            // log("cmd: ", real_path)
            res := execve(real_path.ptr, real_args, global_environment)
            if res < 0 {
                log("Error in 'ExecuteCommand': execve, ", name_of_error(res), " cmd: '",cmd,"'")
            }
        } else {
            res := execve(cmd.ptr, real_args, global_environment)
            if res < 0 {
                log("Error in 'ExecuteCommand': execve, ", name_of_error(res), " cmd: '",cmd,"'")
            }
        }
        // log("OHH NOOOO THIS SHOULD BE UNREACHABLE!!")
        exit(0)
    }
    // parent process

    if !asynchronous {
        info: siginfo
        flags: i32 = WEXITED
        res := waitid(P_PID, pid, &info, flags)
        if res < 0 {
            std_print_any(&info) std_print('\n')
            if info.si_code != CLD_EXITED {
                // log error
                log("Error in 'ExecuteCommand': waitid, ", name_of_error(res), " cmd: '", cmd, "'")
                return false
            }
        }
        if exit_code {
            *exit_code = info.status
        }
    }

    return true
#endif
}

global enable_logging_dynamic_library: bool
// A struct that refers to a dynamically linked library
// TODO: Linux implementation
struct DynamicLibrary {
    handle: void*;
    path: StringBuilder;

    fn valid() -> bool { return handle }

    fn cleanup() {
        yes := FreeLibrary(handle);
        if enable_logging_dynamic_library
            log("Unload ", path)
        handle = null
        path.cleanup()
		if (!yes) {
			err := GetLastError();
			log("[WinError ",err,"] UnloadDynamicLibrary");
            return
        }
    }
    // You may need to cast the function pointer to the appropriate function.
    // Also used for global variables.
    // IMPORTANT: MAKE SURE TO CAST TO THE RIGHT CALLING CONVENTION!
    //   Exported and imported functions use @oscall by default (stdcall, sys v abi).
    fn get_pointer(name: char[]) -> fn() {
        // TODO: Check null termination
        proc := GetProcAddress(handle, name.ptr);
		if (proc == null) {
			err := GetLastError();
			if(err==ERROR_PROC_NOT_FOUND){
				log("[WinError ",err,"] GetFunctionPointer, could not find '",name,"'");
			}else {
                log("[WinError ",err,"] GetFunctionPointer ",name);
            }
		}
		return cast_unsafe<fn()>proc;
    }
}
// return null on error (library not found?). Pass returned value into GetFunctionAdress to get function pointer. 
fn LoadDynamicLibrary(path: char[], log_error: bool = true) -> DynamicLibrary {
    // TODO: Check null termination
    #if OS_WINDOWS
        module := LoadLibraryA(path.ptr);
        if (module == null) {
            err := GetLastError();
            if(log_error) {
                log("[WinError ",err,"] LoadDynamicLibrary: ",path);
            }
            return DynamicLibrary{}
        }
        if enable_logging_dynamic_library
            log("Load ", path)
        str: StringBuilder
        str.append(path)
        return DynamicLibrary{module, str};
    #else
        incomplete
    #endif
}


fn set_cursor(x: u32, y: u32) {
    std_print("\e[",(x),";",(y),"H")
}
fn move_cursor(x: i32, y: i32) {
    if y > 0 {
        std_print("\e[",y,"A");
    } else if y < 0 {
        std_print("\e[",-y,"B");
    }
    if x > 0 {
        std_print("\e[",x,"C");
    } else if x < 0 {
        std_print("\e[",-x,"D");
    }
}