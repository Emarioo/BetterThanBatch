// using u64 as File does not work since functions are evaluated
// first and then using. Using won't be applied to functions.
// A macro is used instead,or now.
#define File u64

enum @hide FileFlag {
    FILE_NO_FLAG=0,
    FILE_ONLY_READ=1,
    FILE_CAN_CREATE=2,
    FILE_WILL_CREATE=4,
};

// returns file handle and file size
fn @hide FileOpen(path: Slice<char>, flags: FileFlag) -> File, u64 { @native-code }
fn @hide FileRead(file: File, buffer: void*, readBytes: u64) -> u64 { @native-code }
fn @hide FileWrite(file: File, buffer: void*, writeBytes: u64) -> u64 { @native-code }
fn @hide FileClose(file: File) { @native-code }

fn @hide malloc(size: u64) -> void* { @native-code }
fn @hide realloc(ptr: void*, oldSize: u64, newSize: u64) -> void* { @native-code }
fn @hide free(ptr: void*, size: u64) { @native-code }

fn @hide printi(num: i64) { @native-code }
fn @hide printd(num: f32) { @native-code }
fn @hide printc(chr: char) { @native-code }
fn @hide prints(slice: Slice<char>) { @native-code }
// fn @hide prints(slice: Slice<char>) {
//     i = 0;
//     while i < slice.len; {
//         printc(slice.ptr[i]);
//         i++;
//     }
// }