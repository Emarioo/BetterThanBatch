// using u64 as File does not work since functions are evaluated
// first and then using. Using won't be applied to functions.
// A macro is used instead,or now.

// File handle
#define File u64

enum @hide FileFlag {
    FILE_NO_FLAG=0,
    FILE_ONLY_READ=1,
    FILE_CAN_CREATE=2,
    FILE_WILL_CREATE=4,
}

fn @hide @native printi(num: i64) ;
fn @hide @native printd(num: f32) ;
fn @hide @native printc(chr: char) ;
fn @hide @native prints(str: char[]) ;

fn @hide @native malloc(size: u64) -> void* ;
fn @hide @native realloc(ptr: void*, oldSize: u64, newSize: u64) -> void* ;
fn @hide @native free(ptr: void*, size: u64) ;

// intrinsics?
fn @hide @native memcpy(dst: void*, src: void*, len: u64);
fn @hide @native memzero(dst: void*, len: u64);

// // returns file handle and file size
fn @hide @native FileOpen(path: Slice<char>, flags: FileFlag) -> File, u64;
// returns read bytes
fn @hide @native FileRead(file: File, buffer: void*, readBytes: u64) -> u64 ;
// returns written bytes
fn @hide @native FileWrite(file: File, buffer: void*, writeBytes: u64) -> u64 ;
fn @hide @native FileClose(file: File) ;

fn @hide @native DirectoryIteratorCreate(rootPath: char[]) -> DirectoryIterator*;
fn @hide @native DirectoryIteratorDestroy(iterator: DirectoryIterator*);
fn @hide @native DirectoryIteratorNext(iterator: DirectoryIterator*) -> DirectoryIteratorData*;
fn @hide @native DirectoryIteratorSkip(iterator: DirectoryIterator*);

// The returned string is heap allocated in the interpreter.
// This allocation is freed when the interpreter finishes.
// TODO: You may want to change this so that you give the function a
//   StringBuffer or StringBuilder and it puts the CWD in there while
//   still returning a slice. Perhaps the StringBuilder defaults to null
//   and if not provided it is heap allocated, otherwise allocated in StringBuilder.
fn @hide @native CurrentWorkingDirectory() -> char[]; // should it be const?
fn @hide @native StartTimePoint() -> u64;
fn @hide @native EndTimePoint(timepoint: u64) -> f32; // TODO: Use f64 (double) when implemented

fn @hide @native CmdLineArgs() -> Slice<Slice<char>>; // const?

struct @hide DirectoryIteratorData {
    name: char[]; // allocated by interpreter, the ptr should be const (char* const NOT const char*)
    fileSize: u64;
    lastWriteSeconds: f32;
    isDirectory: bool;
}

struct @hide DirectoryIterator {
    _handle: u64;
    rootPath: char[]; // allocated by interpreter, should be char* const
    result: DirectoryIteratorData;

    fn next() -> DirectoryIteratorData* {
        return DirectoryIteratorNext(this);
    }
    fn skip() {
        DirectoryIteratorSkip(this);
    }
}