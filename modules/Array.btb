// import allocation functions
#import "Memory"
// #import "Logger"
#import "Asserts"

#macro ARRAY_CLEANUP(ARR) for @ptr ARR.sliced_unsafe() it.cleanup(); ARR.cleanup();

// TODO: Asserts
struct Array<T> {
    ptr: T*;
    max: i32; // allocated elements (not bytes)
    len: i32; // elements in allocation

    fn cleanup(free_stuff: bool = true) {
        // log("clean array ", free_stuff)
        if !free_stuff {
            ptr = null
            len = 0
            max = 0
        } else {
            reserve(0);
        }
    }

    // returns index where element was inserted
    fn add() -> T* {
        if len + 1 > max {
            res := reserve(7 + max * 2);
            // res := reserve(1 + max); // small growth when debugging
            if !res {
                return null;
            }
        }
        construct(&ptr[len])
        ptr_elem := ptr + len * sizeof T;
        len++;
        return ptr_elem;
    }
    fn add(newElement: T) -> T* {
        if len + 1 > max {
            res := reserve(7 + max * 2);
            // res := reserve(1 + max); // small growth when debugging
            if !res {
                return null;
            }
        }
        ptr[len] = newElement;
        ptr_elem := ptr + len * sizeof T;
        len++;
        return ptr_elem;
    }
    // DOES NOT CALL CLEANUP ON ITEMS
    fn clear() {
        for 0..len {
            destruct(&ptr[nr])
        }
        len = 0
    }
    fn data() -> T* { return ptr }
    fn size() -> i32 { return len; }
    fn sliced_unsafe() -> Slice<T> {
        return Slice<T>{ptr, len};
    }
    fn sliced() -> Slice<T> {
        return Slice<T>{ptr, len};
    }
    // destructs popped item
    fn pop() {
        if len > 0 {
            destruct(&ptr[len-1])
            len--
        }
    }
    // Does not destroy item, it pops it off.
    fn pop_item(index: i32) -> T {
        // Assert(index < len)
        if index >= len
            return {}
        temp := ptr[index]
        // TODO: Move item directly into return value and implement named return values
        for index..len-1 {
            ptr[nr] = ptr[nr+1];
        }
        len--
        return temp
    }
    // item will be destructed, do not use get(0) and remove(0) together.
    // use pop_item(0) instead
    fn remove(index: i32) {
        if index >= len
            return;
        destruct(&ptr[index])
        for index..len-1 {
            ptr[nr] = ptr[nr+1];
        }
        len--;
    }
    fn get(index: i32) -> T {
        if(index >= len)
            return T{}; // TODO: Assert instead
        return ptr[index];
    }
    fn set(index: i32, t: T) {
        if(index >= len)
            return; // TODO: Assert instead
        ptr[index] = t;
    }
    fn last() -> T* {
        if(len == 0)
            return null; // TODO: Assert instead
        return &ptr[len - 1];
    }
    fn get_unsafe(index: i32) -> T* {
        if(index >= len)
            return null;
        return &ptr[index];
    }
    fn set_unsafe(index: i32, t: T*) {
        if(index >= len)
            return;
        ptr[index] = t;
    }
    fn resize(newLen: i32) -> bool {
        // TODO: destruct elements if shrinking
        if newLen > max {
            if !reserve(newLen)
                return false;
        }
        if newLen < len {
            for newLen..len {
                destruct(&ptr[nr])
            }
        }
        len = newLen;
        return true;
    }
    // new memory is zero-initialized (DO NOT CHANGE THIS IN THE FUTURE BECAUSE CODE DEPEND ON THIS)
    fn reserve(newMax: i32) -> bool {
        // log("newMax",newMax)
        // log("size",sizeof T)
        Assert(!is_frozen())
        // NOTE: We could return false instead of asserting but the intention of freeze,
        //   is to put a restriction and an expectation of no reallocations. You
        //   want an asser as soon as it happens.
        if is_frozen()
            return false
        
        if newMax==0 {
            // log("{",cast<u64>ptr, max, len,"}",newMax);
            if max!=0 {
                // log("oh")
                for 0..len {
                    destruct(&ptr[nr])
                }
                bytes := max * sizeof T
                Free(cast_unsafe<void*>ptr, bytes);
                // memory_tracker.remove(cast_unsafe<void*>ptr, bytes, typeid T)
                // log("nah")
            }
            ptr = null;
            max = 0;
            len = 0;
            return true;
        }
        // log("what",cast<u64>ptr)
        if !ptr {
            // log("huh")
            // log("Try reserve, sizeof T =",sizeof T)
            bytes := newMax * sizeof T
            ptr = cast_unsafe<T*>Allocate(bytes);
            // memory_tracker.add(cast_unsafe<void*>ptr, bytes, typeid T)
            memzero(cast_unsafe<void*>ptr, bytes)
            // log("allocSize",newMax * sizeof T)
            // log("ptr",ptr)
            // Assert(ptr);
            // initialization of elements is done when adding them
            if !ptr
                return false;
            len = 0;
            max = newMax;
            return true;
        } else {
            if newMax < len {
                for newMax..len {
                    destruct(&ptr[nr])
                }
            }

            new_size := newMax * sizeof T;
            old_size := max * sizeof T;
            newPtr: T* = cast_unsafe<T*>Reallocate(new_size, cast_unsafe<void*>ptr, old_size);
            // memory_tracker.remove(cast_unsafe<void*>ptr, old_size, typeid T)
            // memory_tracker.add(cast_unsafe<void*>newPtr, new_size, typeid T)
            // Assert(newPtr);
            if !newPtr
                return false;
            if newMax > max
                memzero(cast_unsafe<void*>newPtr + len * sizeof T, (newMax - max) * sizeof T);
            ptr = newPtr;
            max = newMax;
            if len > newMax {
                len = newMax;
            }
            return true;
        }
        return false;
    }
    // shallow copy
    fn copy() -> Array<T> {
        new_array: Array<T>
        
        new_array.resize(len)
        memcpy(cast_unsafe<void*>new_array.ptr, cast_unsafe<void*>ptr, len * sizeof T)

        return new_array
    }
    
    fn create_iterator() -> Array_Iterator<T> {
        return {null,-1}
    }
    fn iterate(iter: Array_Iterator<T>*) -> bool {
        if iter.index+1 >= len {
            iter.value = null
            iter.index = len
            return false
        }
        iter.index++
        iter.value = &ptr[iter.index]
        return true
    }
    
    fn is_frozen() -> bool {
        return ptr && max == 0
    }
    // If an array is frozen, any reallocation will trigger an assert.
    // You want to freeze an array in multi-threaded applications were you
    // have filled an array with data and want it to be read-only.
    fn freeze() -> Array_FreezeLock {
        lock: Array_FreezeLock
        lock.ptr = ptr
        lock.max = max
        max = 0 // prevent user from resizing array
        return lock
    }
    fn unfreeze(lock: Array_FreezeLock*) {
        Assert(ptr == lock.ptr)
        Assert(max == 0)
        max = lock.max
        lock.ptr = null
        lock.max = 0
    }
}
struct Array_FreezeLock {
    ptr: void*;
    max: i32;
}
struct Array_Iterator<T> {
    value: T*;
    index: i32;
}
// this does not work
operator []<T>(arr: Array<T>, index: i32) -> T {
    return arr.get(index)
}
// arguments: a, b, userdata
#macro FnCmp fn(void*,void*,void*)->i32
// Do not sort structs with this function. Integers, floats, pointers to structs are ideal
// items to sort.
// Compare function should return a positive number if a is bigger than b (negative otherwise, zero if equal).
fn sort<T>(arr: Array<T>*, compare_callback: FnCmp, descending: bool = false, user_data: void* = null) {
    data := arr.data()
    // TODO: Don't use bubble sort (I just can't help it because it's soooo easy)
    desc_factor := 1
    if descending
        desc_factor = -1
    for j: 0..arr.len-1 {
        for i: 0..arr.len-1-j {
            a := data[i]
            b := data[i+1]
            
            if desc_factor * compare_callback(a, b, user_data) > 0 {
                data[i] = b
                data[i+1] = a
            }
        }
    }
}


fn TestArrayFreeze() {
    arr: Array<i32>
    for 0..5
        arr.add(nr)
    
    lock := arr.freeze()
    
    // TODO: Use _test instead of logging?
    // TODO: If we use a boolean in the freeze array instead of setting max to zero
    //   We can allow adding of new elements as long as we don't resize.
    //   But if you do call freeze you may want to actually freeze the array completly and not
    //   allow any new elements.
    for 0..50 {
        yes := arr.add(100 + nr)
        if !yes {
            log("Could not add ", nr, ", arr = ", &arr)
            break
        }
    }
    
    arr.unfreeze(&lock)
    
    for 0..50 {
        yes := arr.add(100 + nr)
        if !yes {
            log("Could not add ", nr, ", arr = ", &arr)
            break
        }
    }
    
    log("Final array: ", &arr)
}

// Some code to quickly test an array
// #import "Logger"
// #import "Array"
// #import "Lang"

// global counter: i32
// struct Item {
//     x: i32
//     fn init() {
//         x = counter++
//         log("init ",x)
//     }
//     fn cleanup() {
//         log("cleanup ",x)
//     }
// }

// arr: Array<Item>;
// arr.add(Item{4})
// arr.add(Item{23})
// arr.pop()
// arr.add(Item{92})
// arr.add(Item{96})
// arr.add(Item{98})
// for arr.sliced() {
//     log(&it)
// }
// log(arr.len, " ", arr.max)
// arr.reserve(0);


// ######
// MORE CODE FOR TESTING
// ##########


// #import "Logger"
// #import "Array"
// #import "Lang"

// global counter: i32
// struct Item {
//     x: i32
//     fn init() {
//         x = counter++
//         log("init ",x)
//     }
//     fn cleanup() {
//         log("cleanup ",x)
//     }
// }

// // operator cast(x: i32) -> Item { return Item{x} }

// memory_tracker.init()

// arr: Array<Item>;
// arr.add(Item{4})
// arr.add(Item{23})
// arr.pop()
// arr.add(Item{92})
// arr.add(Item{96})
// arr.add(Item{98})
// for arr.sliced() {
//     log(&it)
// }
// log(arr.len, " ", arr.max)

// memory_tracker.print_memory()

// arr.reserve(0);

// memory_tracker.print_memory()