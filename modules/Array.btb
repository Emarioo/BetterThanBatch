// import allocation functions
#import "OS"
// #import "Logger"

#define ARRAY_CLEANUP(ARR) for @ptr ARR.sliced() it.cleanup(); ARR.cleanup();

// TODO: Asserts
// Note that memory is uninitialized
struct DynamicArray<T> {
    // zero initialized by default
    ptr: T*;
    max: u32; // allocated bytes
    len: u32; // elements in allocation

    fn cleanup() { _reserve(0u); }

    // returns index where element was inserted
    // fn add(newElement: T) -> u32 {
    fn add(newElement: T) -> T* {
        if(len + 1u > max){
            re = _reserve(7u + max * 2u);
            // log("re",re);
            if(!re){
                // return -1;
                return null;
                // return;
            }
        }
        ptr[len] = newElement;
        return ptr + len++ * sizeof T;
        // return len++;
    }
    fn sliced() -> Slice<T> {
        return Slice<T>{ptr, len};
    }
    fn pop() {
        if len > 0u
            len--
    }
    // fn get(index: u32) -> T {
    //     // assert
    //     return ptr[]
    // }
    fn getPtr(index: u32) -> T* {
        if(index >= len)
            return null;
        return ptr + index * sizeof T;
    }
    fn resize(newLen: u32) -> bool {
        if newLen > max {
            if !_reserve(newLen)
                return false;
        }
        len = newLen;
        return true;
    }
    fn _reserve(newMax: u32) -> bool {
        // log("newMax",newMax)
        if(newMax==0){
            // log("oh")
            if(max!=0){
                Free(ptr, max * sizeof T);
            }
            ptr = null;
            max = 0;
            len = 0;
            return true;
        }
        // log("what",cast<u64>ptr)
        if(!ptr){
            // log("huh")
            ptr = Allocate(newMax * sizeof T);
            // log("allocSize",newMax * sizeof T)
            // log("ptr",ptr)
            // Assert(ptr);
            // initialization of elements is done when adding them
            if(!ptr)
                return false;
            max = newMax;
            return true;
        } else {
            newPtr: T* = Reallocate(ptr, max * sizeof T, newMax * sizeof T);
            // Assert(newPtr);
            if(!newPtr)
                return false;
            ptr = newPtr;
            max = newMax;
            if(len > newMax){
                len = newMax;
            }
            return true;
        }
        return false;
    }
}

// Some code to quickly test an array
// #import "Logger"
// #import "Array"
// arr: DynamicArray<i32>;
// arr.add(4)
// arr.add(23)
// arr.pop()
// arr.add(92)
// arr.add(92)
// arr.add(92)
// for arr.sliced() {
//     log(it)
// }
// log(arr.len, arr.max)
// arr._reserve(0);