#import "Memory"
#import "Logger"
#import "Array"
#import "Lang"

// #macro LN printc('L'); printc('N'); std_print(cast<i64>#line); std_print('\n')

#macro appends(S, V, ...) S.append(V) appends(S, ...)
#macro appends(S) #endmacro

// heap allocated for now
// null terminated
struct StringBuilder {
    // I was gonna say, the order ptr, len, max
    // allows you to cast String to char[] but that's wrong
    // because len in slice is 8 bytes while being 4 bytes here.
    ptr: char*; // null terminated
    len: i32;
    max: i32; // does not include \0

    fn cleanup(free_stuff: bool = true) {
        if !free_stuff {
            ptr = null
            len = 0
            max = 0
        } else {
            reserve(0)
        }
    }

    fn sliced() -> Slice<char> {
        return Slice<char>{ptr, len};
    }
    fn size() -> i32 { return len }
    fn data() -> char* { return ptr }
    fn get(index: i32) -> char { 
        // TODO: Bounds check
        return ptr[index]
    }
    fn clear() {
        len = 0;
        if ptr {
            *ptr = '\0'
        }
    }
    fn append(value: char) {
        append(Slice<char>{&value, 1})
    }
    fn append(value: bool) {
        if value {
            append("true")
        } else {
            append("false")
        }
    }
    fn append(str: char[]) {
        if str.len == 0
            return;
        if len + str.len > max {
            if !reserve(str.len + 10 + max * 2) {
                return;
            }
        }
        memcpy(ptr + len, str.ptr, str.len);
        len += str.len;
        ptr[len] = '\0';
    }
    fn append(str: char*, size: i32) {
        append(Slice<char>{str, size})
    }
    fn append(str: char*) {
        append(str, strlen(str))
    }
    fn append(str: StringBuilder) {
        append(str.sliced())
    }
    fn append(value: i64) -> i32 {
        if len + 21 > max {
            reserve(len + 21);
        }

        start := len;
        if value == 0 {
            append('0')
            return len - start;
        }
        if value < 0 {
            value = -value;
            append('-')
        }
        
        str: char[21];
        used := 20;
        while value > 0 && used > 0 {
            num := value % 10;
            value = value / 10;
            str.ptr[used] = num + '0';
            used--;
        }
        // LN
        str.ptr += used + 1;
        str.len -= used + 1;

        append(str)

        return len - start;
    }
    fn append(value: u64) -> i32 {
        if len + 20 > max {
            reserve(len + 20);
        }
        
        start := len;
        if value == 0 {
            append('0')
            return len - start;
        }
        str: char[21];
        used := 20;
        while value > 0u && used >= 0 {
            num := value % 10u;
            value = value / 10u;
            str.ptr[used] = num + '0';
            used--;
        }
        str.ptr += used + 1;
        str.len -= used + 1;

        append(str)

        return len - start;
    }
    fn append(value: f64, max_decimals: i32 = 3) -> i32 {
        if len + 50 > max {
            reserve(len + 50);
        }
        // TODO: We may reserve to few bytes to store a large float which could cause an extra reallocation when appending digits.
        start := len;
        bits: u64 = *cast<u64*>cast<void*>&value;

        sign_mask :u64= cast<u64>1
        exp_mask :u64= cast<u64>((cast<u64>1<<11)-1)
        mantissa_mask :u64= cast<u64>((cast<u64>1<<52)-1)

        // std_print("sign|exp|mantissa\n")
        // for @rev 0..64 {
        //     bit := cast<u64>1 & (bits >> nr)
        //     std_print(bit)
        //     if nr == 52 + 11 || nr == 52
        //         std_print('\n')
        //         // std_print(' ')
        // }
        // log()

        sign := (bits >> 63u) & sign_mask;
        exp := (bits >> 52u) & exp_mask
        mantissa: u64 = (cast<u64>1 << 52) | (bits & mantissa_mask)
        // mantissa: u64 = (bits & mantissa_mask)

        // std_print("exp ") std_print_bits(exp) log()
        // std_print("mant ") std_print_bits(mantissa) log()
        // 0100000000000000000000000000000000000000000000000000
        // log(sign) // log()
        // log(exp)  // log()
        // std_print_hex(mantissa) log()

        if sign {
            append('-')
        }
        
        intPart: u64 = 0;
        decimalBits: i32 = 52 - (exp - ((1 << 10) - 1));
        // log(decimalBits)
        if decimalBits < 1 {
            // TODO: A large exponent would shift the mantissa out of the 64-bit integer. 'intPart' cannot represent really large integers, how do we solve it?
            intPart = (mantissa) << (0-decimalBits);

            if intPart == 0 {
                append('0')
            } else {
                str: char[53];
                used := str.len-1;
                while intPart > 0u && used > 0 {
                    digit: u8 = intPart % 10u;
                    // log("i",intPart);
                    // log("d",digit);
                    str.ptr[used] = digit + '0';
                    used--;
                    intPart = intPart / 10u;
                }
                str.ptr += used + 1;
                str.len -= used + 1;
                // prints(str);
                append(str)
                // log("o");

            }

            append(".0")
        } else {
            // log("ya");

            if exp >= cast<u64>((1u << 10) - 1)
                intPart = (mantissa) >> decimalBits;

            // log(intPart)
            append(cast<i64>intPart)
        
            append('.')

            // TODO: A small exponent with a small value won't fit in 'acc' (64-bit integer). If we manually print zeros then we could fit "useful" values in acc instead.

            decimals: char[53];

            acc: u64 = 0;
            mul: u64 = 1;
            precision := 19; // acc has limited precision, it cannot store all decimals
            minBits := decimalBits - precision;
            if minBits < 0
                minBits = 0;
            for @rev minBits..decimalBits {
                mul *= 5u;
                acc = acc*10u
                if nr < decimals.len {
                    bit := cast<u64>1 & (mantissa >> nr)
                    // log(nr," ",bit, " ",acc)
                    if bit {
                        acc += mul;
                    }
                }
            }
            if acc == 0 {
                append('0')
            } else {
                blank := true;
                lastZero := 0;
                limit := precision;
                if decimalBits < precision;
                    limit = decimalBits;
                for @rev 0..limit {
                    digit := acc % 10u;
                    acc = acc / 10u;
                    if lastZero != 0 || digit != 0 {
                        if max_decimals == 0 || nr < max_decimals {
                            decimals.ptr[nr] = digit + '0';
                            if lastZero == 0
                                lastZero = nr+1
                        }
                    }
                }
                // LN
                if lastZero == 0 {
                    append('0')
                } else {
                    decimals.len = lastZero;
                    append(decimals)
                }
            }
        }
        return len - start;
    }
    fn append(value: f32, max_decimals: i32 = 3) -> i32 {
        if len + 25 > max {
            reserve(len + 25);
        }
        start := len;
        bits: u32 = *cast<u32*>cast<void*>&value;

        sign := (bits >> 31u) & 1u;
        exp := (bits >> 23u) & cast<u32>0xFF
        mantissa: u64 = cast<u64>0x80_0000 | (cast<u64>bits & cast<u64>0x7FFFFF)

        if sign {
            append('-')
        }

        intPart: u64 = 0;
        decimalBits: i32 = 23 - (exp-127);
        if decimalBits < 1 {
            intPart = (mantissa) << (0-decimalBits);

            // log("pl");
            if intPart == 0 {
                append('0')
            } else {
                // we don't use swrite_unsafe because it uses
                // i64 but we need u64 for the extra large integers.
                str: char[23];
                used := 22;
                while intPart > 0u && used > 0 {
                    digit: u8 = intPart % 10u;
                    // log("i",intPart);
                    // log("d",digit);
                    str.ptr[used] = digit + '0';
                    used--;
                    intPart = intPart / 10u;
                }
                str.ptr += used + 1;
                str.len -= used + 1;
                // prints(str);
                append(str)
                // log("o");

            }

            append('.')
            append('0')
        } else {
            // log("ya");

            if exp >= 127u
                intPart = (mantissa) >> decimalBits;

            // log(intPart)
            append(cast<i64>intPart)
        
            append('.')

            decimals: char[24];

            acc: u64 = 0;
            mul: u64 = 1;
            precision := 19; // acc has limited precision, it cannot store all decimal digits.
            minBits := decimalBits - precision;
            if minBits < 0
                minBits = 0;
            for @rev minBits..decimalBits {
                mul *= 5u;
                acc = acc*10u
                if nr < 24 {
                    bit := cast<u64>1 & (mantissa >> nr)
                    if bit {
                        acc += mul;
                    }
                }
            }
            if acc == 0 {
                append('0')
            } else {
                blank := true;
                lastZero := 0;
                limit := precision;
                if decimalBits < precision;
                    limit = decimalBits;
                for @rev 0..limit {
                    digit := acc % 10u;
                    acc = acc / 10u;
                    if lastZero != 0 || digit != 0 {
                        if max_decimals == 0 || nr < max_decimals {
                            decimals.ptr[nr] = digit + '0';
                            if lastZero == 0
                                lastZero = nr+1
                        }
                    }
                }
                // LN
                if lastZero == 0 {
                    append('0')
                } else {
                    decimals.len = lastZero;
                    append(decimals)
                }
            }
        }
        return len - start;
    }
    
    fn append(value: void*) {
        append('0')
        append('x')
        zeros: bool = true;
        for @rev 0..16 {
            hex := (cast<u64>value >> cast<u64>(4*nr)) & cast<u64>0xF;
            if hex != 0  zeros = false
            if !zeros {
                if hex < 10u
                    append('0'+hex)
                else
                    append('a' + hex - 10)
            }
        }
        if zeros
            append('0'); // we want at least one zero
    }
    fn append<T>(value: T*,pretty: bool = false) {
        append(value, typeid(T),pretty)
    }
    fn append(data: void*, type: lang_TypeId, pretty: bool = false, depth: i32 = 1) {
        global printed_pointers: Array<void*>
        global mutex: Mutex

        if data == null {
            append("null")
            return;
        }
        
        if depth == 1 {
            mutex.lock()
            printed_pointers.resize(0) // reset before use
        }
        defer {
            if depth == 1
                mutex.unlock()
        }

        if type == typeid Slice<char> {
            data := cast<Slice<char>*>data
            append('"')
            append(data.ptr, data.len)
            append('"')
            return;
        }

        if type.ptr_level != 0 {
            found := false
            for printed_pointers.sliced() {
                if it == data {
                    found = true
                    break
                }
            }
            if found {
                append(*cast<void**>(data))
            } else {
                printed_pointers.add(data)
                // log(new_type)
                if type == typeid (char*) {
                    append('"')
                    str := *cast<char**>(data)
                    len := strlen(str)
                    append(str, len)
                    append('"')
                } else if type == typeid (void*) {
                    append(*cast<void**>(data))
                } else {
                    new_type := type
                    new_type.ptr_level--
                    append(*cast<void**>(data), new_type, pretty, depth + 1)
                }
            }
            return;   
        }
        enum ASTPrimitives {
            AST_VOID = 0,
            AST_UINT8,
            AST_UINT16,
            AST_UINT32,
            AST_UINT64,
            AST_INT8,
            AST_INT16,
            AST_INT32,
            AST_INT64,
            AST_BOOL,
            AST_CHAR,
            AST_FLOAT32,
            AST_FLOAT64,   
        }
        
        type_id := type.index();
        switch type_id {
        case AST_UINT8:     append(*cast<u8*>  (data)) return;
        case AST_UINT16:    append(*cast<u16*> (data)) return;
        case AST_UINT32:    append(*cast<u32*> (data)) return;
        case AST_UINT64:    append(*cast<u64*> (data)) return;
        case AST_INT8:      append(*cast<i8*>  (data)) return;
        case AST_INT16:     append(*cast<i16*> (data)) return;
        case AST_INT32:     append(*cast<i32*> (data)) return;
        case AST_INT64:     append(*cast<i64*> (data)) return;
        case AST_BOOL:      append(*cast<bool*>(data)) return;
        case AST_CHAR:      append(*cast<char*>(data)) return;
        case AST_FLOAT32:   append(*cast<f32*> (data)) return;
        case AST_FLOAT64:   append(*cast<f64*> (data)) return;
        }
        
        fn indent(n: i32, this: StringBuilder* = this) { for 0..n this.append("  ") }
        
        // std_print(lang_typename(id));

        typeinfo := lang_typeInfos.ptr[type_id]

        a := lang_Primitive.STRUCT
        b := lang_Primitive.ENUM

        if typeinfo.type == lang_Primitive.STRUCT {
            append("{")
            if pretty  append('\n')
            members := lang_typemembers(type);
            if members.len > 0 {
                for @ptr members {
                    if nr != 0 {
                        append(", ");
                        if pretty  append('\n')
                    }
                    
                    if pretty  indent(depth)
                    
                    name := lang_name_from_range(it.name);
                    append(name)
                    append(": ")
                    
                    append(data + it.offset, it.type, pretty, depth + 1)
                }
            }
            if pretty {
                append('\n')
                indent(depth-1)
            }
            
            append("}");
        } else if typeinfo.type == lang_Primitive.ENUM {
            members := lang_typemembers(type);
            enum_value: i64
            memcpy(&enum_value, data, typeinfo.size)
            printed := false
            for @ptr members {
                // TODO: What about bit field?
                if it.value == enum_value {
                    name := lang_name_from_range(it.name);
                    append(name)
                    printed = true
                    break
                }
            }
            if !printed {
                append(*cast<i64*>data) // print raw value
            }
        } else if typeinfo.type == lang_Primitive.FUNCTION {
            append(*cast<void**>data) // print raw value
        }
    }
    
    fn append_hex(data: u64) {
        append("0x") // TODO: Option to remove prefix
        zeros: bool = true;
        for @rev 0..16 {
            hex := (cast<u64>data >> cast<u64>(4*nr)) & cast<u64>0xF;
            if hex != 0  zeros = false
            if !zeros {
                if hex < 10u
                    append('0'+hex)
                else
                    append('a' + hex - 10)
            }
        }
        if zeros
            append('0'); // we want at least one zero
    }
    fn append_bits(data: u64, end: i32 = 64, start: i32 = 0) {
        for @rev start..end {
            bit := cast<u64>1 & (data >> nr);
            if bit
                append('1')
            else
                append('0')
        }
    }

    fn append_hex<T>(p: T*) {
        append("0x")
        bytes: u8* = cast<u8*>cast<void*>p
        l: u32 = sizeof T
        for 0..l {
            hex0 := bytes[nr] & cast<u8>0x0F
            hex1 := bytes[nr] >> cast<u8>4
            if hex1 < 10u   append(cast<char>('0' + hex1))
            else            append(cast<char>('a' + hex1 - 10))
            if hex0 < 10u   append(cast<char>('0' + hex0))
            else            append(cast<char>('a' + hex0 - 10))
        }
    }
    fn append_hex(p: void*, l: u32) {
        append("0x")
        bytes: u8* = cast<u8*>cast<void*>p
        for 0..l {
            hex0 := bytes[nr] & cast<u8>0x0F
            hex1 := bytes[nr] >> cast<u8>4
            if hex1 < 10u   append('0' + hex1)
            else            append('a' + hex1 - 10)
            if hex0 < 10u   append('0' + hex0)
            else            append('a' + hex0 - 10)
        }
    }

    fn insert(pos: i32, chr: char) {
        if len + 1 > max {
            if !reserve(1 + max * 2) {
                return;
            }
        }
        for @rev pos..len
            ptr[1 + nr] = ptr[nr]
        
        // memcpy(ptr + pos + 1, ptr + pos, len - pos);
        len += 1;
        ptr[pos] = chr
        ptr[len] = '\0';
    }
    fn removeAt(pos: i32) {
        if pos < 0 || pos >= len
            return;
        
        for pos..len-1
            ptr[nr] = ptr[nr+1]
            // memcpy(ptr + pos, ptr + pos + 1, len - (pos + 1));
        len -= 1;
        ptr[len] = '\0';
    }
    
    fn resize(newLen: i32) -> bool {
        if newLen > max {
            if !reserve(newLen)
                return false;
        }
        len = newLen;
        return true;
    }
    fn reserve(newMax: i32) -> bool {
        // log("newMax",newMax)
        if(newMax==0){
            // log("oh")
            if(max!=0){
                Free(ptr, max + 1);
            }
            ptr = null;
            max = 0;
            len = 0;
            return true;
        }
        // log("what",cast<u64>ptr)
        if(!ptr){
            // log("huh")
            ptr = Allocate(newMax + 1);
            *ptr = '\0';
            // log("allocSize",newMax * sizeof T)
            // log("ptr",ptr)
            // Assert(ptr);
            // initialization of elements is done when adding them
            if(!ptr)
                return false;
            max = newMax;
            return true;
        } else {
            newPtr: char* = Reallocate(newMax + 1, ptr, max + 1);
            // Assert(newPtr);
            if(!newPtr)
                return false;
            ptr = newPtr;
            max = newMax;
            if(len > newMax){
                len = newMax;
            }
            return true;
        }
        return false;
    }
    fn copy() -> StringBuilder {
        s: StringBuilder
        s.append(sliced())
        return s
    }
}
operator cast(b: StringBuilder) -> Slice<char> {
    return b.sliced()
}
operator [](b: StringBuilder, index: i32) -> char {
    return b.get(index)
}
// #import "String"
// #import "Logger"

// a0 = "my"
// a1 = "stuff"

// str: String;
// defer str.cleanup();

// str.append(a0)
// str.append(a1)
// str.append(a0)

// log(str.sliced())

// #import "OS"

fn sliced(s: char*) -> char[] {
    return Slice<char>{s, strlen(s)}
}

fn std_print(t: StringBuilder){
    std_print(t.sliced())
}

operator ==(a: StringBuilder, b: StringBuilder) -> bool {
    return a.sliced() == b.sliced()
}
operator ==(a: StringBuilder, b: Slice<char>) -> bool {
    return a.sliced() == b
}
operator ==(a: Slice<char>, b: Slice<char>) -> bool {
    if a.len != b.len  return false;
    for a
        if it != b.ptr[nr]
            return false;
    return true;
}

// TODO: Inline
operator !=(a: Slice<char>, b: Slice<char>) -> bool {
    return !(a == b);
}

fn parse_i64(slice: Slice<char>, read_chars: u32* = null) -> i64 {
    // TODO: Parse white space?
    // TODO: Parse negative number
    // TODO: Provide parsing errors, non-digit character, digit has no trailing whitespace (a number would still be returned in case you don't care, but if you do care, there you go)
    result: i64;
    i: u32 = 0;
    while i < slice.len {
        chr := slice.ptr[i];
        if chr >= '0' && chr <= '9' {
            result = result * 10 + chr - '0';
        } else {
            break;
        }
        i++;
    }
    if read_chars {
        *read_chars = i;
    }
    return result;
}
// function assumes the text is a correct hexidecimal string
// even length, characters which are digits or A-F
fn parse_hex(text: Slice<char>, data: Slice<u8>*) {
    Assert(text.len/2u == data.len)
    for 0..text.len/2u {
        tmp: u8 = 0
        hex0 := text.ptr[2*nr]
        hex1 := text.ptr[2*nr+1]
        if hex0 <= '9' {
            tmp = hex0 - '0'
        } else if hex0 >= 'a' && hex0 <= 'f' {
            tmp = hex0 - 'a' + 10
        } else if hex0 >= 'A' && hex0 <= 'F' {
            tmp = hex0 - 'A' + 10
        }
        tmp = tmp << cast<u8>4
        if hex1 <= '9' {
            tmp |= hex1 - '0'
        } else if hex1 >= 'a' && hex1 <= 'f' {
            tmp |= hex1 - 'a' + 10
        } else if hex1 >= 'A' && hex1 <= 'F' {
            tmp |= hex1 - 'A' + 10
        }
        data.ptr[nr] = tmp
    }
}

#import "Logger"

// TODO:: The debugger can't handle macros.
//   Add it to DWARF or use fewer macros.
#macro SLICE_OVERLOADS(FUNC, A0, A1, RET)
fn FUNC(A0: char*, A1: char*) -> RET {
    return FUNC(Slice<char>{A0,strlen(A0)}, Slice<char>{A1,strlen(A1)})
}
fn FUNC(A0: char[], A1: char*) -> RET {
    return FUNC(A0, Slice<char>{A1,strlen(A1)})
}
fn FUNC(A0: char*, A1: char[]) -> RET {
    return FUNC(Slice<char>{A0,strlen(A0)}, A1)
}
#endmacro
SLICE_OVERLOADS(equal, a, b, bool)
fn equal(a: char[], b: char[]) -> bool {
    if a.len != b.len
        return false
    for a {
        if it != b.ptr[nr]
            return false
    }
    return true
}
SLICE_OVERLOADS(equal_start, pattern, text, bool)
fn equal_start(pattern: char[], text: char[]) -> bool {
    if text.len < pattern.len || pattern.len == 0
        return false
    for pattern {
        if it != text.ptr[nr]
            return false
    }
    return true
}
SLICE_OVERLOADS(equal_end, pattern, text, bool)
fn equal_end(pattern: char[], text: char[]) -> bool {
    if text.len < pattern.len || pattern.len == 0
        return false
    for @rev pattern {
        if it != text.ptr[text.len + nr - pattern.len]
            return false
    }
    return true
}
// returns -1 if not found
// returns the index to the first character of pattern found in the text.
// if not reverse, then first match is returned, otherwise, last match is returned
SLICE_OVERLOADS(find, pattern, text, i32)
fn find(pattern: char[], text: char[], reverse: bool = false) -> i32 {
    if text.len < pattern.len || pattern.len == 0
        return -1;
    if !reverse {
        correct := 0;
        for text {
            if it == pattern.ptr[correct] {
                correct++;
                if correct == pattern.len
                    return nr - pattern.len + 1
            } else {
                correct = 0;
            }
        }
    } else {
        correct := pattern.len-1;
        for @reverse text {
            if it == pattern.ptr[correct] {
                correct--;
                if correct == -1
                    return nr
            } else {
                correct = pattern.len-1;
            }
        }
    }
    return -1;
}
SLICE_OVERLOADS(split, pattern, text, Array<char[]>)
// the returned array contains substrings referencing memory in 'text'
// if 'text' is freed than the array will point to invalid memory
fn split(pattern: char[], text: char[]) -> Array<char[]> {
    arr: Array<char[]>;
    if pattern.len == 0
        return arr

    correct := 0
    split_start := 0
    for text {
        if it == pattern[correct] {
            correct++
            if correct == pattern.len {
                new_len := nr + 1 - pattern.len  - split_start
                // if new_len > 0 // do we skip empty ones or no? probably not.
                arr.add(Slice<char>{text.ptr + split_start, new_len})
                correct = 0;
                split_start = nr + 1
            }
        } else {
            correct = 0
            if nr == text.len - 1 {
                new_len := 1 + nr - split_start
                // if new_len > 0
                arr.add(Slice<char>{text.ptr + split_start, new_len})
                break
            }
        }
    }

    return arr
}
fn substring(text: char*, start: i32, end: i32 = -1) -> char[] {
    return substring(Slice<char>{text,strlen(text)}, start, end)
}
// end is exclusive
fn substring(text: char[], start: i32, end: i32 = -1) -> char[] {
    if start >= text.len
        return Slice<char>{}
    if end > text.len
        end = text.len
    if start < 0
        start = 0
    if end < 0
        return Slice<char>{text.ptr + start, text.len - start}
    return Slice<char>{text.ptr + start, end - start}
}

// Look at Utility.cpp
// fn FormatTime() {
    
// }

fn printData<T>(t: T*) {
    at := 0;
    while at < sizeof T {
        byte: u8 = *(cast<u8*>cast<void*>t + at);
        if at % 8 == 0 {
            std_print('\n',at,": ");
        }
        std_print(byte, ' ')
        at++
    }
}